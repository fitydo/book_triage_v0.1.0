2025-07-16T01:35:56.5759084Z ##[group]Run coverage run -m pytest tests/ -v
2025-07-16T01:35:56.5759455Z [36;1mcoverage run -m pytest tests/ -v[0m
2025-07-16T01:35:56.5759750Z [36;1mcoverage report --show-missing[0m
2025-07-16T01:35:56.5760019Z [36;1mcoverage xml[0m
2025-07-16T01:35:56.5784825Z shell: /usr/bin/bash -e {0}
2025-07-16T01:35:56.5785058Z env:
2025-07-16T01:35:56.5785304Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5785711Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T01:35:56.5786114Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5786475Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5786825Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5787359Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T01:35:56.5787661Z   BOOK_USER: testuser
2025-07-16T01:35:56.5787862Z   BOOK_PASS: testpass
2025-07-16T01:35:56.5788064Z   OPENAI_API_KEY: test-key
2025-07-16T01:35:56.5788289Z ##[endgroup]
2025-07-16T01:35:57.6906200Z ============================= test session starts ==============================
2025-07-16T01:35:57.6907270Z platform linux -- Python 3.12.11, pytest-8.4.1, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.12.11/x64/bin/python
2025-07-16T01:35:57.6908048Z cachedir: .pytest_cache
2025-07-16T01:35:57.6908552Z rootdir: /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T01:35:57.6909118Z configfile: pyproject.toml
2025-07-16T01:35:57.6909632Z plugins: cov-6.2.1, asyncio-1.0.0, anyio-4.9.0
2025-07-16T01:35:57.6910436Z asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
2025-07-16T01:36:02.1947697Z collecting ... collected 193 items
2025-07-16T01:36:02.1948177Z 
2025-07-16T01:36:02.3323162Z tests/test_api.py::TestAPIEndpoints::test_root_endpoint PASSED           [  0%]
2025-07-16T01:36:02.3612946Z tests/test_api.py::TestAPIEndpoints::test_health_endpoint PASSED         [  1%]
2025-07-16T01:36:02.3915778Z tests/test_api.py::TestAPIEndpoints::test_get_books_empty PASSED         [  1%]
2025-07-16T01:36:02.4256066Z tests/test_api.py::TestAPIEndpoints::test_get_books_with_data PASSED     [  2%]
2025-07-16T01:36:02.4798971Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_success PASSED    [  2%]
2025-07-16T01:36:02.5075557Z tests/test_api.py::TestAPIEndpoints::test_scan_books_unauthorized PASSED [  3%]
2025-07-16T01:36:02.5346141Z tests/test_api.py::TestAPIEndpoints::test_rate_limiting_books_endpoint PASSED [  3%]
2025-07-16T01:36:02.5882122Z tests/test_api.py::TestAPIEndpoints::test_file_upload_size_limit PASSED  [  4%]
2025-07-16T01:36:02.6160301Z tests/test_api.py::TestAPIEndpoints::test_security_headers_in_response PASSED [  4%]
2025-07-16T01:36:02.6472762Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_no_title_extracted PASSED [  5%]
2025-07-16T01:36:02.6796257Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_vision_processor_exception PASSED [  5%]
2025-07-16T01:36:02.7065092Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_no_file PASSED    [  6%]
2025-07-16T01:36:02.7343867Z tests/test_api.py::TestAPIEndpoints::test_scan_books_success PASSED      [  6%]
2025-07-16T01:36:02.7621079Z tests/test_api.py::TestAPIEndpoints::test_scan_books_exception PASSED    [  7%]
2025-07-16T01:36:02.7918250Z tests/test_api.py::TestAPIEndpoints::test_rescan_title_record_not_found PASSED [  7%]
2025-07-16T01:36:02.8198031Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_success PASSED [  8%]
2025-07-16T01:36:02.8463553Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_missing_isbn PASSED [  8%]
2025-07-16T01:36:02.8739941Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_invalid_isbn PASSED [  9%]
2025-07-16T01:36:02.9124115Z tests/test_api.py::TestAPIEndpoints::test_rescan_title_preserves_values PASSED [  9%]
2025-07-16T01:36:02.9359739Z tests/test_api.py::TestAPIInitialization::test_initialize_app PASSED     [ 10%]
2025-07-16T01:36:02.9425975Z tests/test_api.py::TestAPIInitialization::test_app_without_initialization PASSED [ 10%]
2025-07-16T01:36:02.9672013Z tests/test_cli.py::TestCLICommands::test_cli_help PASSED                 [ 11%]
2025-07-16T01:36:02.9755587Z tests/test_cli.py::TestCLICommands::test_scan_command_success PASSED     [ 11%]
2025-07-16T01:36:02.9820099Z tests/test_cli.py::TestCLICommands::test_scan_command_with_options PASSED [ 12%]
2025-07-16T01:36:02.9876443Z tests/test_cli.py::TestCLICommands::test_scan_command_no_records PASSED  [ 12%]
2025-07-16T01:36:02.9934024Z tests/test_cli.py::TestCLICommands::test_scan_command_nonexistent_file PASSED [ 13%]
2025-07-16T01:36:02.9987936Z tests/test_cli.py::TestCLICommands::test_scan_command_exception PASSED   [ 13%]
2025-07-16T01:36:03.0052258Z tests/test_cli.py::TestCLICommands::test_web_command_success PASSED      [ 14%]
2025-07-16T01:36:03.0116075Z tests/test_cli.py::TestCLICommands::test_web_command_with_options PASSED [ 15%]
2025-07-16T01:36:03.0177724Z tests/test_cli.py::TestCLICommands::test_web_command_nonexistent_file PASSED [ 15%]
2025-07-16T01:36:03.0234365Z tests/test_cli.py::TestCLICommands::test_web_command_exception PASSED    [ 16%]
2025-07-16T01:36:03.0317551Z tests/test_cli.py::TestCLICommands::test_create_csv_command_empty PASSED [ 16%]
2025-07-16T01:36:03.0404728Z tests/test_cli.py::TestCLICommands::test_create_csv_command_with_sample PASSED [ 17%]
2025-07-16T01:36:03.0463979Z tests/test_cli.py::TestCLICommands::test_create_csv_command_creates_directory PASSED [ 17%]
2025-07-16T01:36:03.0521088Z tests/test_cli.py::TestCLICommands::test_create_csv_command_exception PASSED [ 18%]
2025-07-16T01:36:03.0603997Z tests/test_cli.py::TestCLICommands::test_info_command_success PASSED     [ 18%]
2025-07-16T01:36:03.0652118Z tests/test_cli.py::TestCLICommands::test_info_command_nonexistent_file PASSED [ 19%]
2025-07-16T01:36:03.0715424Z tests/test_cli.py::TestCLICommands::test_info_command_exception PASSED   [ 19%]
2025-07-16T01:36:03.0798889Z tests/test_cli.py::TestCLIValidation::test_scan_cost_validation_min PASSED [ 20%]
2025-07-16T01:36:03.0868874Z tests/test_cli.py::TestCLIValidation::test_scan_cost_validation_max PASSED [ 20%]
2025-07-16T01:36:03.0932667Z tests/test_cli.py::TestCLIValidation::test_port_validation PASSED        [ 21%]
2025-07-16T01:36:03.0993451Z tests/test_cli.py::TestCLIIntegration::test_scan_integration_with_core PASSED [ 21%]
2025-07-16T01:36:03.1055872Z tests/test_cli.py::TestCLIIntegration::test_web_integration_with_api PASSED [ 22%]
2025-07-16T01:36:03.1191933Z tests/test_cli.py::TestCLIEnvironment::test_environment_loading PASSED   [ 22%]
2025-07-16T01:36:03.1330445Z tests/test_cli.py::TestCLIEnvironment::test_logging_configuration PASSED [ 23%]
2025-07-16T01:36:03.1391511Z tests/test_cli.py::TestCLIEnvironment::test_verbose_logging PASSED       [ 23%]
2025-07-16T01:36:03.1402834Z tests/test_core.py::TestBookRecord::test_book_record_creation PASSED     [ 24%]
2025-07-16T01:36:03.1414263Z tests/test_core.py::TestBookRecord::test_book_record_to_dict PASSED      [ 24%]
2025-07-16T01:36:03.1426109Z tests/test_core.py::TestBookRecord::test_book_record_with_all_fields PASSED [ 25%]
2025-07-16T01:36:03.1440428Z tests/test_core.py::TestBookTriage::test_book_triage_initialization_nonexistent_file PASSED [ 25%]
2025-07-16T01:36:03.1482852Z tests/test_core.py::TestBookTriage::test_book_triage_initialization_with_data PASSED [ 26%]
2025-07-16T01:36:03.1497134Z tests/test_core.py::TestBookTriage::test_calculate_utilities PASSED      [ 26%]
2025-07-16T01:36:03.1511180Z tests/test_core.py::TestBookTriage::test_calculate_utilities_with_none_values PASSED [ 27%]
2025-07-16T01:36:03.1524807Z tests/test_core.py::TestBookTriage::test_make_decision PASSED            [ 27%]
2025-07-16T01:36:03.1573954Z tests/test_core.py::TestBookTriage::test_add_record PASSED               [ 28%]
2025-07-16T01:36:03.1620209Z tests/test_core.py::TestBookTriage::test_get_record_by_id PASSED         [ 29%]
2025-07-16T01:36:03.1667439Z tests/test_core.py::TestBookTriage::test_price_to_v_calculation PASSED   [ 29%]
2025-07-16T01:36:03.1689933Z tests/test_core.py::TestBookTriage::test_enrich_with_gpt4o_mock PASSED   [ 30%]
2025-07-16T01:36:03.1712358Z tests/test_core.py::TestBookTriage::test_scan_cost_parameter PASSED      [ 30%]
2025-07-16T01:36:03.1730071Z tests/test_core.py::TestDecisionEnum::test_decision_values PASSED        [ 31%]
2025-07-16T01:36:03.1747980Z tests/test_core.py::TestDecisionEnum::test_decision_comparison PASSED    [ 31%]
2025-07-16T01:36:03.1797059Z tests/test_core_coverage.py::TestBookTriageCoverage::test_load_csv_with_invalid_float_values PASSED [ 32%]
2025-07-16T01:36:03.1842188Z tests/test_core_coverage.py::TestBookTriageCoverage::test_load_csv_with_nan_values PASSED [ 32%]
2025-07-16T01:36:03.1886668Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_no_title_no_isbn PASSED [ 33%]
2025-07-16T01:36:03.1931182Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_invalid_isbn PASSED [ 33%]
2025-07-16T01:36:03.1983645Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_json_parsing_error PASSED [ 34%]
2025-07-16T01:36:03.2028231Z tests/test_core_coverage.py::TestBookTriageCoverage::test_calculate_utilities_with_none_values PASSED [ 34%]
2025-07-16T01:36:03.2072176Z tests/test_core_coverage.py::TestBookTriageCoverage::test_make_decision_with_verification_calculation PASSED [ 35%]
2025-07-16T01:36:03.2118236Z tests/test_core_coverage.py::TestBookTriageCoverage::test_save_csv_with_no_records PASSED [ 35%]
2025-07-16T01:36:03.2129847Z tests/test_core_simple.py::TestBookRecord::test_book_record_creation PASSED [ 36%]
2025-07-16T01:36:03.2141550Z tests/test_core_simple.py::TestBookRecord::test_book_record_with_values PASSED [ 36%]
2025-07-16T01:36:03.2154453Z tests/test_core_simple.py::TestBookTriage::test_book_triage_initialization PASSED [ 37%]
2025-07-16T01:36:03.2167579Z tests/test_core_simple.py::TestBookTriage::test_calculate_utilities_simple PASSED [ 37%]
2025-07-16T01:36:03.2181057Z tests/test_core_simple.py::TestBookTriage::test_make_decision_simple PASSED [ 38%]
2025-07-16T01:36:03.2194217Z tests/test_core_simple.py::TestDecision::test_decision_values PASSED     [ 38%]
2025-07-16T01:36:03.2548938Z tests/test_frontend_layout.py::TestFrontendLayout::test_modern_css_styling_present PASSED [ 39%]
2025-07-16T01:36:03.2909612Z tests/test_frontend_layout.py::TestFrontendLayout::test_control_panel_styling PASSED [ 39%]
2025-07-16T01:36:03.3245137Z tests/test_frontend_layout.py::TestFrontendLayout::test_table_container_styling PASSED [ 40%]
2025-07-16T01:36:03.3623155Z tests/test_frontend_layout.py::TestFrontendLayout::test_upload_section_styling PASSED [ 40%]
2025-07-16T01:36:03.3992524Z tests/test_frontend_layout.py::TestFrontendLayout::test_button_styling PASSED [ 41%]
2025-07-16T01:36:03.4343040Z tests/test_frontend_layout.py::TestFrontendLayout::test_form_layout PASSED [ 41%]
2025-07-16T01:36:03.4701027Z tests/test_frontend_layout.py::TestFrontendLayout::test_input_field_styling PASSED [ 42%]
2025-07-16T01:36:03.5053903Z tests/test_frontend_layout.py::TestFrontendLayout::test_responsive_table_headers PASSED [ 43%]
2025-07-16T01:36:03.5413465Z tests/test_frontend_layout.py::TestFrontendLayout::test_decision_row_colors PASSED [ 43%]
2025-07-16T01:36:03.5821116Z tests/test_frontend_layout.py::TestFrontendLayout::test_main_content_wrapper PASSED [ 44%]
2025-07-16T01:36:03.6170351Z tests/test_frontend_layout.py::TestFrontendLayout::test_hover_effects PASSED [ 44%]
2025-07-16T01:36:03.6489555Z tests/test_frontend_layout.py::TestTableFunctionality::test_table_renders_with_data PASSED [ 45%]
2025-07-16T01:36:03.6822691Z tests/test_frontend_layout.py::TestTableFunctionality::test_table_has_all_columns PASSED [ 45%]
2025-07-16T01:36:03.7138504Z tests/test_frontend_layout.py::TestTableFunctionality::test_input_field_classes PASSED [ 46%]
2025-07-16T01:36:03.7476723Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_viewport_meta_tag PASSED [ 46%]
2025-07-16T01:36:03.7810801Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_semantic_html_structure PASSED [ 47%]
2025-07-16T01:36:03.8148375Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_css_organization PASSED [ 47%]
2025-07-16T01:36:03.8741883Z tests/test_indicators_implementation.py::test_v_calculation_from_prices PASSED [ 48%]
2025-07-16T01:36:03.8757051Z tests/test_indicators_implementation.py::test_utility_calculations PASSED [ 48%]
2025-07-16T01:36:03.8773522Z tests/test_indicators_implementation.py::test_decision_making PASSED     [ 49%]
2025-07-16T01:36:03.8786324Z tests/test_indicators_implementation.py::test_human_vs_auto_indicators PASSED [ 49%]
2025-07-16T01:36:03.8808314Z tests/test_indicators_implementation.py::test_scan_cost_impact PASSED    [ 50%]
2025-07-16T01:36:03.9136052Z tests/test_layout_basic.py::TestBasicLayout::test_homepage_loads PASSED  [ 50%]
2025-07-16T01:36:03.9448938Z tests/test_layout_basic.py::TestBasicLayout::test_modern_css_included PASSED [ 51%]
2025-07-16T01:36:04.1059702Z tests/test_layout_basic.py::TestBasicLayout::test_sticky_header_css FAILED [ 51%]
2025-07-16T01:36:04.1448328Z tests/test_layout_basic.py::TestBasicLayout::test_table_container_css FAILED [ 52%]
2025-07-16T01:36:04.1769985Z tests/test_layout_basic.py::TestBasicLayout::test_form_styling PASSED    [ 52%]
2025-07-16T01:36:04.2085842Z tests/test_layout_basic.py::TestBasicLayout::test_button_styling PASSED  [ 53%]
2025-07-16T01:36:04.2396746Z tests/test_layout_basic.py::TestBasicLayout::test_upload_section_present PASSED [ 53%]
2025-07-16T01:36:04.2714345Z tests/test_layout_basic.py::TestBasicLayout::test_manual_input_section PASSED [ 54%]
2025-07-16T01:36:04.3025543Z tests/test_layout_basic.py::TestBasicLayout::test_table_headers_present PASSED [ 54%]
2025-07-16T01:36:04.3336214Z tests/test_layout_basic.py::TestLayoutComponents::test_control_panel_structure PASSED [ 55%]
2025-07-16T01:36:04.3662167Z tests/test_layout_basic.py::TestLayoutComponents::test_main_content_wrapper PASSED [ 55%]
2025-07-16T01:36:04.3983225Z tests/test_layout_basic.py::TestLayoutComponents::test_css_organization PASSED [ 56%]
2025-07-16T01:36:04.4294366Z tests/test_layout_basic.py::TestLayoutComponents::test_decision_colors_css PASSED [ 56%]
2025-07-16T01:36:04.4614490Z tests/test_layout_basic.py::TestAPIEndpoints::test_books_endpoint PASSED [ 57%]
2025-07-16T01:36:04.4945771Z tests/test_layout_basic.py::TestAPIEndpoints::test_health_endpoint PASSED [ 58%]
2025-07-16T01:36:04.4971403Z tests/test_main.py::TestMainModule::test_main_no_args_with_existing_csv PASSED [ 58%]
2025-07-16T01:36:04.4994781Z tests/test_main.py::TestMainModule::test_main_no_args_creates_new_csv PASSED [ 59%]
2025-07-16T01:36:04.5015186Z tests/test_main.py::TestMainModule::test_main_with_args PASSED           [ 59%]
2025-07-16T01:36:04.5036122Z tests/test_main.py::TestMainModule::test_main_finds_alternative_csv_paths PASSED [ 60%]
2025-07-16T01:36:04.5055062Z tests/test_main.py::TestMainModule::test_main_module_entry_point PASSED  [ 60%]
2025-07-16T01:36:04.5338058Z tests/test_scroll_preservation.py::TestScrollPreservation::test_loadbooks_accepts_preserve_scroll_parameter PASSED [ 61%]
2025-07-16T01:36:04.5610540Z tests/test_scroll_preservation.py::TestScrollPreservation::test_savebook_calls_loadbooks_with_true PASSED [ 61%]
2025-07-16T01:36:04.5879582Z tests/test_scroll_preservation.py::TestScrollPreservation::test_scroll_preservation_logic_exists PASSED [ 62%]
2025-07-16T01:36:04.6148613Z tests/test_scroll_preservation.py::TestScrollPreservation::test_scroll_container_selector PASSED [ 62%]
2025-07-16T01:36:04.6435371Z tests/test_scroll_preservation.py::TestScrollPreservation::test_manual_submit_calls_loadbooks_with_target PASSED [ 63%]
2025-07-16T01:36:04.6748598Z tests/test_scroll_preservation.py::TestScrollPreservation::test_integration_save_preserves_scroll PASSED [ 63%]
2025-07-16T01:36:04.6772954Z tests/test_security.py::TestGetCurrentUser::test_valid_credentials_default PASSED [ 64%]
2025-07-16T01:36:04.6796613Z tests/test_security.py::TestGetCurrentUser::test_valid_credentials_custom PASSED [ 64%]
2025-07-16T01:36:04.6821435Z tests/test_security.py::TestGetCurrentUser::test_invalid_username PASSED [ 65%]
2025-07-16T01:36:04.6844318Z tests/test_security.py::TestGetCurrentUser::test_invalid_password PASSED [ 65%]
2025-07-16T01:36:04.6867148Z tests/test_security.py::TestGetCurrentUser::test_both_invalid PASSED     [ 66%]
2025-07-16T01:36:04.6890344Z tests/test_security.py::TestGetCurrentUser::test_empty_credentials PASSED [ 66%]
2025-07-16T01:36:04.6911481Z tests/test_security.py::TestAdminRequired::test_admin_required_with_user PASSED [ 67%]
2025-07-16T01:36:04.6929698Z tests/test_security.py::TestAdminRequired::test_admin_required_without_user PASSED [ 67%]
2025-07-16T01:36:04.6947734Z tests/test_security.py::TestAdminRequired::test_admin_required_with_none_user PASSED [ 68%]
2025-07-16T01:36:04.6967303Z tests/test_security.py::TestValidateFileUpload::test_valid_small_image PASSED [ 68%]
2025-07-16T01:36:04.6988195Z tests/test_security.py::TestValidateFileUpload::test_file_too_large PASSED [ 69%]
2025-07-16T01:36:04.7090232Z tests/test_security.py::TestValidateFileUpload::test_non_image_file FAILED [ 69%]
2025-07-16T01:36:04.7106160Z tests/test_security.py::TestValidateFileUpload::test_magic_exception PASSED [ 70%]
2025-07-16T01:36:04.7129180Z tests/test_security.py::TestValidateFileUpload::test_different_image_types PASSED [ 70%]
2025-07-16T01:36:04.7148566Z tests/test_security.py::TestSanitizeImage::test_sanitize_valid_rgb_image PASSED [ 71%]
2025-07-16T01:36:04.7170404Z tests/test_security.py::TestSanitizeImage::test_sanitize_rgba_image PASSED [ 72%]
2025-07-16T01:36:04.7190245Z tests/test_security.py::TestSanitizeImage::test_sanitize_palette_image PASSED [ 72%]
2025-07-16T01:36:04.7876426Z tests/test_security.py::TestSanitizeImage::test_sanitize_invalid_image_data PASSED [ 73%]
2025-07-16T01:36:04.7891387Z tests/test_security.py::TestSanitizeImage::test_sanitize_corrupted_image PASSED [ 73%]
2025-07-16T01:36:04.7912481Z tests/test_security.py::TestSanitizeImage::test_sanitize_quality_setting PASSED [ 74%]
2025-07-16T01:36:04.7936794Z tests/test_security.py::TestSecurityIntegration::test_full_file_security_pipeline PASSED [ 74%]
2025-07-16T01:36:04.8309623Z tests/test_sticky_form.py::test_sticky_form_css_present FAILED           [ 75%]
2025-07-16T01:36:04.8614083Z tests/test_sticky_form.py::test_sticky_form_html_structure PASSED        [ 75%]
2025-07-16T01:36:04.8967934Z tests/test_sticky_form.py::test_body_padding_adjustment FAILED           [ 76%]
2025-07-16T01:36:04.9277383Z tests/test_sticky_form.py::test_books_database_outside_control_panel PASSED [ 76%]
2025-07-16T01:36:04.9592934Z tests/test_sticky_form.py::test_toast_notifications_position PASSED      [ 77%]
2025-07-16T01:36:04.9898256Z tests/test_sticky_form.py::test_form_functionality_still_works PASSED    [ 77%]
2025-07-16T01:36:05.0267017Z tests/test_sticky_table_headers.py::test_sticky_table_headers_css_present FAILED [ 78%]
2025-07-16T01:36:05.0621302Z tests/test_sticky_table_headers.py::test_table_header_structure FAILED   [ 78%]
2025-07-16T01:36:05.1104260Z tests/test_sticky_table_headers.py::test_table_header_css_specificity FAILED [ 79%]
2025-07-16T01:36:05.1549068Z tests/test_sticky_table_headers.py::test_sticky_header_positioning FAILED [ 79%]
2025-07-16T01:36:05.1901901Z tests/test_sticky_table_headers.py::test_z_index_layering FAILED         [ 80%]
2025-07-16T01:36:05.2252553Z tests/test_sticky_table_headers.py::test_table_headers_visual_separation FAILED [ 80%]
2025-07-16T01:36:05.2556093Z tests/test_sticky_table_headers.py::test_books_database_section_outside_control_panel PASSED [ 81%]
2025-07-16T01:36:05.2908888Z tests/test_sticky_table_headers.py::test_complete_sticky_ui_integration FAILED [ 81%]
2025-07-16T01:36:06.8330948Z tests/test_verified_display_logic.py::test_verified_column_uses_strict_equality PASSED [ 82%]
2025-07-16T01:36:06.8354433Z tests/test_vision.py::TestVisionProcessor::test_vision_processor_initialization_with_openai PASSED [ 82%]
2025-07-16T01:36:06.8366758Z tests/test_vision.py::TestVisionProcessor::test_vision_processor_initialization_without_openai PASSED [ 83%]
2025-07-16T01:36:06.8379584Z tests/test_vision.py::TestVisionProcessor::test_generate_id PASSED       [ 83%]
2025-07-16T01:36:06.8435109Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_openai_success PASSED [ 84%]
2025-07-16T01:36:06.8466595Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_fallback_to_tesseract PASSED [ 84%]
2025-07-16T01:36:06.8480068Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_nonexistent_file PASSED [ 85%]
2025-07-16T01:36:06.8502939Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_success PASSED [ 86%]
2025-07-16T01:36:06.8537896Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_empty_result PASSED [ 86%]
2025-07-16T01:36:06.8560967Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_error PASSED [ 87%]
2025-07-16T01:36:06.8878359Z tests/test_vision.py::TestVisionProcessor::test_extract_with_openai_vision_no_content PASSED [ 87%]
2025-07-16T01:36:06.8909752Z tests/test_vision.py::TestVisionProcessor::test_extract_with_openai_vision_no_client PASSED [ 88%]
2025-07-16T01:36:06.8959264Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_from_image_success PASSED [ 88%]
2025-07-16T01:36:06.8981117Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_tesseract_fallback PASSED [ 89%]
2025-07-16T01:36:06.8994735Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_nonexistent_file PASSED [ 89%]
2025-07-16T01:36:06.9015752Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_no_isbn_found PASSED [ 90%]
2025-07-16T01:36:06.9045562Z tests/test_vision.py::TestVisionProcessor::test_image_format_conversion PASSED [ 90%]
2025-07-16T01:36:06.9069932Z tests/test_vision.py::TestVisionProcessorIntegration::test_processor_with_real_image_mock_ocr PASSED [ 91%]
2025-07-16T01:36:06.9088753Z tests/test_vision_fixed.py::TestVisionProcessor::test_vision_processor_initialization_with_openai PASSED [ 91%]
2025-07-16T01:36:06.9101253Z tests/test_vision_fixed.py::TestVisionProcessor::test_vision_processor_initialization_without_openai PASSED [ 92%]
2025-07-16T01:36:06.9113590Z tests/test_vision_fixed.py::TestVisionProcessor::test_generate_id PASSED [ 92%]
2025-07-16T01:36:06.9126703Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_from_image_nonexistent_file PASSED [ 93%]
2025-07-16T01:36:06.9169277Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_with_openai_vision_success PASSED [ 93%]
2025-07-16T01:36:06.9198655Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_fallback_to_tesseract PASSED [ 94%]
2025-07-16T01:36:06.9220394Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_success PASSED [ 94%]
2025-07-16T01:36:06.9242462Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_empty_result PASSED [ 95%]
2025-07-16T01:36:06.9264938Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_error PASSED [ 95%]
2025-07-16T01:36:06.9307914Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_openai_vision_no_content PASSED [ 96%]
2025-07-16T01:36:06.9325310Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_openai_vision_no_client PASSED [ 96%]
2025-07-16T01:36:06.9367969Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_from_image_success PASSED [ 97%]
2025-07-16T01:36:06.9389311Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_tesseract_fallback PASSED [ 97%]
2025-07-16T01:36:06.9403243Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_nonexistent_file PASSED [ 98%]
2025-07-16T01:36:06.9425746Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_no_isbn_found PASSED [ 98%]
2025-07-16T01:36:06.9437969Z tests/test_vision_fixed.py::TestVisionProcessor::test_image_format_conversion PASSED [ 99%]
2025-07-16T01:36:06.9483116Z tests/test_vision_fixed.py::TestVisionProcessorIntegration::test_processor_with_real_image_mock_ocr PASSED [100%]
2025-07-16T01:36:06.9483887Z 
2025-07-16T01:36:06.9484085Z =================================== FAILURES ===================================
2025-07-16T01:36:06.9484720Z ____________________ TestBasicLayout.test_sticky_header_css ____________________
2025-07-16T01:36:06.9485392Z tests/test_layout_basic.py:57: in test_sticky_header_css
2025-07-16T01:36:06.9485947Z     assert "position: fixed" in content
2025-07-16T01:36:06.9549781Z E   assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9596810Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9597291Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmphsq_ajhz.csv
2025-07-16T01:36:06.9597741Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9598166Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9598634Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9599108Z ___________________ TestBasicLayout.test_table_container_css ___________________
2025-07-16T01:36:06.9599513Z tests/test_layout_basic.py:67: in test_table_container_css
2025-07-16T01:36:06.9599840Z     assert "overflow-x: auto" in content
2025-07-16T01:36:06.9644491Z E   assert 'overflow-x: auto' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9687787Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9688514Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmpe8ertcq9.csv
2025-07-16T01:36:06.9689265Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9689947Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9690852Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9691674Z __________________ TestValidateFileUpload.test_non_image_file __________________
2025-07-16T01:36:06.9692329Z tests/test_security.py:160: in test_non_image_file
2025-07-16T01:36:06.9692883Z     assert "File must be an image" in exc_info.value.detail
2025-07-16T01:36:06.9693743Z E   AssertionError: assert 'File must be an image' in 'Invalid file format'
2025-07-16T01:36:06.9694634Z E    +  where 'Invalid file format' = HTTPException(status_code=400, detail='Invalid file format').detail
2025-07-16T01:36:06.9695964Z E    +    where HTTPException(status_code=400, detail='Invalid file format') = <ExceptionInfo HTTPException(status_code=400, detail='Invalid file format') tblen=2>.value
2025-07-16T01:36:06.9697166Z _________________________ test_sticky_form_css_present _________________________
2025-07-16T01:36:06.9697851Z tests/test_sticky_form.py:43: in test_sticky_form_css_present
2025-07-16T01:36:06.9698408Z     assert "position: fixed" in html_content
2025-07-16T01:36:06.9757891Z E   assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9800232Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9800944Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmppje4m3ta.csv
2025-07-16T01:36:06.9801419Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9801839Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9802306Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9802753Z _________________________ test_body_padding_adjustment _________________________
2025-07-16T01:36:06.9803139Z tests/test_sticky_form.py:78: in test_body_padding_adjustment
2025-07-16T01:36:06.9803483Z     assert "padding-top: 280px" in html_content
2025-07-16T01:36:06.9845457Z E   assert 'padding-top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9887884Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9888326Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmphaglra17.csv
2025-07-16T01:36:06.9888751Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9889160Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9889620Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9890197Z ____________________ test_sticky_table_headers_css_present _____________________
2025-07-16T01:36:06.9890760Z tests/test_sticky_table_headers.py:44: in test_sticky_table_headers_css_present
2025-07-16T01:36:06.9891252Z     assert "top: 280px" in html_content  # Should align with sticky form height
2025-07-16T01:36:06.9891600Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T01:36:06.9933405Z E   assert 'top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9975849Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9976294Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmps4z3zz_v.csv
2025-07-16T01:36:06.9976712Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9977109Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9977573Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9978012Z _________________________ test_table_header_structure __________________________
2025-07-16T01:36:06.9978425Z tests/test_sticky_table_headers.py:84: in test_table_header_structure
2025-07-16T01:36:06.9978771Z     assert header in html_content
2025-07-16T01:36:07.0020552Z E   assert '<th>V</th>' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0062872Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0063310Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpgz9kc788.csv
2025-07-16T01:36:07.0063724Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0064127Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0064583Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0065033Z ______________________ test_table_header_css_specificity _______________________
2025-07-16T01:36:07.0065462Z tests/test_sticky_table_headers.py:96: in test_table_header_css_specificity
2025-07-16T01:36:07.0065863Z     assert 'background-color: #f2f2f2' in html_content
2025-07-16T01:36:07.0108125Z E   assert 'background-color: #f2f2f2' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0150721Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0151169Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpdlpwy1g5.csv
2025-07-16T01:36:07.0151590Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0151995Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0152450Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0152895Z ________________________ test_sticky_header_positioning ________________________
2025-07-16T01:36:07.0153320Z tests/test_sticky_table_headers.py:113: in test_sticky_header_positioning
2025-07-16T01:36:07.0153719Z     assert 'top: 0' in control_panel_section
2025-07-16T01:36:07.0154797Z E   AssertionError: assert 'top: 0' in '#control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-a'
2025-07-16T01:36:07.0155928Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0156348Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp0kegqkjl.csv
2025-07-16T01:36:07.0156771Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0157176Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0157622Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0158054Z ____________________________ test_z_index_layering _____________________________
2025-07-16T01:36:07.0158438Z tests/test_sticky_table_headers.py:129: in test_z_index_layering
2025-07-16T01:36:07.0158784Z     assert 'z-index: 1000' in html_content
2025-07-16T01:36:07.0200980Z E   assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0243521Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0243962Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp7fedgq3h.csv
2025-07-16T01:36:07.0244381Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0244785Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0245243Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0245687Z _____________________ test_table_headers_visual_separation _____________________
2025-07-16T01:36:07.0246136Z tests/test_sticky_table_headers.py:147: in test_table_headers_visual_separation
2025-07-16T01:36:07.0246710Z     assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in html_content
2025-07-16T01:36:07.0288872Z E   assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0331937Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0332386Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp2smwis7i.csv
2025-07-16T01:36:07.0332817Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0333220Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0333677Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0334129Z _____________________ test_complete_sticky_ui_integration ______________________
2025-07-16T01:36:07.0334572Z tests/test_sticky_table_headers.py:186: in test_complete_sticky_ui_integration
2025-07-16T01:36:07.0334993Z     assert 'z-index: 1000' in html_content  # Control panel
2025-07-16T01:36:07.0335295Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T01:36:07.0377203Z E   assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0419641Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0420080Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp7ids45za.csv
2025-07-16T01:36:07.0420492Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0421112Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0421568Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0421982Z =========================== short test summary info ============================
2025-07-16T01:36:07.0464079Z FAILED tests/test_layout_basic.py::TestBasicLayout::test_sticky_header_css - assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0548363Z FAILED tests/test_layout_basic.py::TestBasicLayout::test_table_container_css - assert 'overflow-x: auto' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0592382Z FAILED tests/test_security.py::TestValidateFileUpload::test_non_image_file - AssertionError: assert 'File must be an image' in 'Invalid file format'
2025-07-16T01:36:07.0593159Z  +  where 'Invalid file format' = HTTPException(status_code=400, detail='Invalid file format').detail
2025-07-16T01:36:07.0593933Z  +    where HTTPException(status_code=400, detail='Invalid file format') = <ExceptionInfo HTTPException(status_code=400, detail='Invalid file format') tblen=2>.value
2025-07-16T01:36:07.0637036Z FAILED tests/test_sticky_form.py::test_sticky_form_css_present - assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0732167Z FAILED tests/test_sticky_form.py::test_body_padding_adjustment - assert 'padding-top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0816798Z FAILED tests/test_sticky_table_headers.py::test_sticky_table_headers_css_present - assert 'top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0901627Z FAILED tests/test_sticky_table_headers.py::test_table_header_structure - assert '<th>V</th>' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0985727Z FAILED tests/test_sticky_table_headers.py::test_table_header_css_specificity - assert 'background-color: #f2f2f2' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.1029525Z FAILED tests/test_sticky_table_headers.py::test_sticky_header_positioning - AssertionError: assert 'top: 0' in '#control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-a'
2025-07-16T01:36:07.1072755Z FAILED tests/test_sticky_table_headers.py::test_z_index_layering - assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.1157274Z FAILED tests/test_sticky_table_headers.py::test_table_headers_visual_separation - assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.1788938Z FAILED tests/test_sticky_table_headers.py::test_complete_sticky_ui_integration - assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.1831950Z ======================== 12 failed, 181 passed in 9.27s ========================
2025-07-16T01:36:07.3800043Z ##[error]Process completed with exit code 1.
