2025-07-16T01:35:14.2665641Z Current runner version: '2.326.0'
2025-07-16T01:35:14.2689993Z ##[group]Runner Image Provisioner
2025-07-16T01:35:14.2691569Z Hosted Compute Agent
2025-07-16T01:35:14.2692400Z Version: 20250711.363
2025-07-16T01:35:14.2693328Z Commit: 6785254374ce925a23743850c1cb91912ce5c14c
2025-07-16T01:35:14.2694409Z Build Date: 2025-07-11T20:04:25Z
2025-07-16T01:35:14.2695386Z ##[endgroup]
2025-07-16T01:35:14.2696270Z ##[group]Operating System
2025-07-16T01:35:14.2697172Z Ubuntu
2025-07-16T01:35:14.2697947Z 24.04.2
2025-07-16T01:35:14.2698630Z LTS
2025-07-16T01:35:14.2699414Z ##[endgroup]
2025-07-16T01:35:14.2700234Z ##[group]Runner Image
2025-07-16T01:35:14.2701444Z Image: ubuntu-24.04
2025-07-16T01:35:14.2702377Z Version: 20250710.1.0
2025-07-16T01:35:14.2704115Z Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250710.1/images/ubuntu/Ubuntu2404-Readme.md
2025-07-16T01:35:14.2706799Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250710.1
2025-07-16T01:35:14.2708615Z ##[endgroup]
2025-07-16T01:35:14.2710549Z ##[group]GITHUB_TOKEN Permissions
2025-07-16T01:35:14.2713711Z Contents: read
2025-07-16T01:35:14.2714551Z Metadata: read
2025-07-16T01:35:14.2715405Z Packages: read
2025-07-16T01:35:14.2716204Z ##[endgroup]
2025-07-16T01:35:14.2719046Z Secret source: Actions
2025-07-16T01:35:14.2720453Z Prepare workflow directory
2025-07-16T01:35:14.3177301Z Prepare all required actions
2025-07-16T01:35:14.3232368Z Getting action download info
2025-07-16T01:35:14.6739829Z ##[group]Download immutable action package 'actions/checkout@v4'
2025-07-16T01:35:14.6740961Z Version: 4.2.2
2025-07-16T01:35:14.6742068Z Digest: sha256:ccb2698953eaebd21c7bf6268a94f9c26518a7e38e27e0b83c1fe1ad049819b1
2025-07-16T01:35:14.6743275Z Source commit SHA: 11bd71901bbe5b1630ceea73d27597364c9af683
2025-07-16T01:35:14.6743956Z ##[endgroup]
2025-07-16T01:35:14.7883096Z ##[group]Download immutable action package 'actions/setup-python@v4'
2025-07-16T01:35:14.7883954Z Version: 4.9.1
2025-07-16T01:35:14.7884731Z Digest: sha256:f03e505388af670b5a108629e0ba26befc08d5c62b41f46146a45fe29ae509a5
2025-07-16T01:35:14.7885696Z Source commit SHA: 7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
2025-07-16T01:35:14.7886384Z ##[endgroup]
2025-07-16T01:35:15.0236468Z ##[group]Download immutable action package 'actions/cache@v4'
2025-07-16T01:35:15.0237291Z Version: 4.2.3
2025-07-16T01:35:15.0238028Z Digest: sha256:c8a3bb963e1f1826d8fcc8d1354f0dd29d8ac1db1d4f6f20247055ae11b81ed9
2025-07-16T01:35:15.0238989Z Source commit SHA: 5a3ec84eff668545956fd18022155c47e93e2684
2025-07-16T01:35:15.0239708Z ##[endgroup]
2025-07-16T01:35:15.1774779Z Download action repository 'codecov/codecov-action@v3' (SHA:ab904c41d6ece82784817410c45d8b8c02684457)
2025-07-16T01:35:15.3938812Z ##[group]Download immutable action package 'actions/upload-artifact@v4'
2025-07-16T01:35:15.3940133Z Version: 4.6.2
2025-07-16T01:35:15.3941582Z Digest: sha256:290722aa3281d5caf23d0acdc3dbeb3424786a1a01a9cc97e72f147225e37c38
2025-07-16T01:35:15.3943370Z Source commit SHA: ea165f8d65b6e75b540449e92b4886f43607fa02
2025-07-16T01:35:15.3944510Z ##[endgroup]
2025-07-16T01:35:15.6398902Z Complete job name: test
2025-07-16T01:35:15.7229251Z ##[group]Run actions/checkout@v4
2025-07-16T01:35:15.7230495Z with:
2025-07-16T01:35:15.7231399Z   repository: fitydo/book_triage_v0.1.0
2025-07-16T01:35:15.7232622Z   token: ***
2025-07-16T01:35:15.7233320Z   ssh-strict: true
2025-07-16T01:35:15.7234040Z   ssh-user: git
2025-07-16T01:35:15.7234773Z   persist-credentials: true
2025-07-16T01:35:15.7235600Z   clean: true
2025-07-16T01:35:15.7236358Z   sparse-checkout-cone-mode: true
2025-07-16T01:35:15.7237255Z   fetch-depth: 1
2025-07-16T01:35:15.7237969Z   fetch-tags: false
2025-07-16T01:35:15.7238702Z   show-progress: true
2025-07-16T01:35:15.7239439Z   lfs: false
2025-07-16T01:35:15.7240112Z   submodules: false
2025-07-16T01:35:15.7240981Z   set-safe-directory: true
2025-07-16T01:35:15.7242040Z ##[endgroup]
2025-07-16T01:35:15.8319202Z Syncing repository: fitydo/book_triage_v0.1.0
2025-07-16T01:35:15.8322213Z ##[group]Getting Git version info
2025-07-16T01:35:15.8323700Z Working directory is '/home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0'
2025-07-16T01:35:15.8325773Z [command]/usr/bin/git version
2025-07-16T01:35:15.8399393Z git version 2.50.1
2025-07-16T01:35:15.8425575Z ##[endgroup]
2025-07-16T01:35:15.8439353Z Temporarily overriding HOME='/home/runner/work/_temp/d0bf4210-8ec9-4640-a25d-0860758b32a7' before making global git config changes
2025-07-16T01:35:15.8442171Z Adding repository directory to the temporary git global config as a safe directory
2025-07-16T01:35:15.8451916Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T01:35:15.8485814Z Deleting the contents of '/home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0'
2025-07-16T01:35:15.8488582Z ##[group]Initializing the repository
2025-07-16T01:35:15.8493051Z [command]/usr/bin/git init /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T01:35:15.8574705Z hint: Using 'master' as the name for the initial branch. This default branch name
2025-07-16T01:35:15.8577349Z hint: is subject to change. To configure the initial branch name to use in all
2025-07-16T01:35:15.8580250Z hint: of your new repositories, which will suppress this warning, call:
2025-07-16T01:35:15.8583136Z hint:
2025-07-16T01:35:15.8584804Z hint: 	git config --global init.defaultBranch <name>
2025-07-16T01:35:15.8586729Z hint:
2025-07-16T01:35:15.8588462Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2025-07-16T01:35:15.8591937Z hint: 'development'. The just-created branch can be renamed via this command:
2025-07-16T01:35:15.8594275Z hint:
2025-07-16T01:35:15.8595480Z hint: 	git branch -m <name>
2025-07-16T01:35:15.8596781Z hint:
2025-07-16T01:35:15.8598499Z hint: Disable this message with "git config set advice.defaultBranchName false"
2025-07-16T01:35:15.8600816Z Initialized empty Git repository in /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0/.git/
2025-07-16T01:35:15.8604606Z [command]/usr/bin/git remote add origin https://github.com/fitydo/book_triage_v0.1.0
2025-07-16T01:35:15.8627855Z ##[endgroup]
2025-07-16T01:35:15.8630068Z ##[group]Disabling automatic garbage collection
2025-07-16T01:35:15.8631991Z [command]/usr/bin/git config --local gc.auto 0
2025-07-16T01:35:15.8660009Z ##[endgroup]
2025-07-16T01:35:15.8661450Z ##[group]Setting up auth
2025-07-16T01:35:15.8666179Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-07-16T01:35:15.8695898Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-07-16T01:35:15.9036008Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-07-16T01:35:15.9065870Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-07-16T01:35:15.9283883Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2025-07-16T01:35:15.9317160Z ##[endgroup]
2025-07-16T01:35:15.9318681Z ##[group]Fetching the repository
2025-07-16T01:35:15.9336288Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +e6ad698a4feeebc8646e035d5c5aa8289e157b92:refs/remotes/origin/main
2025-07-16T01:35:16.1888633Z From https://github.com/fitydo/book_triage_v0.1.0
2025-07-16T01:35:16.1891531Z  * [new ref]         e6ad698a4feeebc8646e035d5c5aa8289e157b92 -> origin/main
2025-07-16T01:35:16.1914962Z ##[endgroup]
2025-07-16T01:35:16.1915942Z ##[group]Determining the checkout info
2025-07-16T01:35:16.1917227Z ##[endgroup]
2025-07-16T01:35:16.1923143Z [command]/usr/bin/git sparse-checkout disable
2025-07-16T01:35:16.1963128Z [command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
2025-07-16T01:35:16.1990997Z ##[group]Checking out the ref
2025-07-16T01:35:16.1995235Z [command]/usr/bin/git checkout --progress --force -B main refs/remotes/origin/main
2025-07-16T01:35:16.2214155Z Switched to a new branch 'main'
2025-07-16T01:35:16.2216248Z branch 'main' set up to track 'origin/main'.
2025-07-16T01:35:16.2223935Z ##[endgroup]
2025-07-16T01:35:16.2258611Z [command]/usr/bin/git log -1 --format=%H
2025-07-16T01:35:16.2279807Z e6ad698a4feeebc8646e035d5c5aa8289e157b92
2025-07-16T01:35:16.2620912Z ##[group]Run actions/setup-python@v4
2025-07-16T01:35:16.2621460Z with:
2025-07-16T01:35:16.2621862Z   python-version: 3.12
2025-07-16T01:35:16.2622304Z   check-latest: false
2025-07-16T01:35:16.2622881Z   token: ***
2025-07-16T01:35:16.2623279Z   update-environment: true
2025-07-16T01:35:16.2623741Z   allow-prereleases: false
2025-07-16T01:35:16.2624176Z ##[endgroup]
2025-07-16T01:35:16.4386909Z ##[group]Installed versions
2025-07-16T01:35:16.4502993Z Successfully set up CPython (3.12.11)
2025-07-16T01:35:16.4504368Z ##[endgroup]
2025-07-16T01:35:16.5513360Z ##[group]Run actions/cache@v4
2025-07-16T01:35:16.5513821Z with:
2025-07-16T01:35:16.5514172Z   path: ~/.cache/pip
2025-07-16T01:35:16.5514729Z   key: Linux-pip-24aa3cd13ec39f3a494a1d2d9a069faafef87f7571215ea7387ed5c669776e80
2025-07-16T01:35:16.5515346Z   restore-keys: Linux-pip-

2025-07-16T01:35:16.5515767Z   enableCrossOsArchive: false
2025-07-16T01:35:16.5516182Z   fail-on-cache-miss: false
2025-07-16T01:35:16.5516570Z   lookup-only: false
2025-07-16T01:35:16.5516937Z   save-always: false
2025-07-16T01:35:16.5517296Z env:
2025-07-16T01:35:16.5517728Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:16.5518358Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T01:35:16.5518964Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:16.5519526Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:16.5520092Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:16.5521110Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T01:35:16.5521630Z ##[endgroup]
2025-07-16T01:35:16.7978145Z Cache hit for: Linux-pip-24aa3cd13ec39f3a494a1d2d9a069faafef87f7571215ea7387ed5c669776e80
2025-07-16T01:35:17.1951872Z Received 54770928 of 54770928 (100.0%), 145.9 MBs/sec
2025-07-16T01:35:17.1953792Z Cache Size: ~52 MB (54770928 B)
2025-07-16T01:35:17.1985199Z [command]/usr/bin/tar -xf /home/runner/work/_temp/994fb4e0-6862-4b68-963b-ad402e6d19ea/cache.tzst -P -C /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0 --use-compress-program unzstd
2025-07-16T01:35:17.3065219Z Cache restored successfully
2025-07-16T01:35:17.3251125Z Cache restored from key: Linux-pip-442476820139d3d76ead4ef2bfa5c3cb8a8e8c0760055ca950ef50017030f500
2025-07-16T01:35:17.3381468Z ##[group]Run sudo apt-get update
2025-07-16T01:35:17.3381983Z [36;1msudo apt-get update[0m
2025-07-16T01:35:17.3382428Z [36;1msudo apt-get install -y libmagic1 tesseract-ocr[0m
2025-07-16T01:35:17.3418754Z shell: /usr/bin/bash -e {0}
2025-07-16T01:35:17.3419154Z env:
2025-07-16T01:35:17.3419550Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:17.3420138Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T01:35:17.3420916Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:17.3421456Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:17.3421986Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:17.3422552Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T01:35:17.3423039Z ##[endgroup]
2025-07-16T01:35:17.4174182Z Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [144 B]
2025-07-16T01:35:17.4508561Z Hit:6 https://packages.microsoft.com/repos/azure-cli noble InRelease
2025-07-16T01:35:17.4513956Z Get:7 https://packages.microsoft.com/ubuntu/24.04/prod noble InRelease [3600 B]
2025-07-16T01:35:17.4551840Z Hit:2 http://azure.archive.ubuntu.com/ubuntu noble InRelease
2025-07-16T01:35:17.4568910Z Get:3 http://azure.archive.ubuntu.com/ubuntu noble-updates InRelease [126 kB]
2025-07-16T01:35:17.4619547Z Get:4 http://azure.archive.ubuntu.com/ubuntu noble-backports InRelease [126 kB]
2025-07-16T01:35:17.4642289Z Get:5 http://azure.archive.ubuntu.com/ubuntu noble-security InRelease [126 kB]
2025-07-16T01:35:17.5650481Z Get:8 https://packages.microsoft.com/ubuntu/24.04/prod noble/main armhf Packages [9349 B]
2025-07-16T01:35:17.5912304Z Get:9 https://packages.microsoft.com/ubuntu/24.04/prod noble/main amd64 Packages [40.4 kB]
2025-07-16T01:35:17.5942949Z Get:10 https://packages.microsoft.com/ubuntu/24.04/prod noble/main arm64 Packages [26.6 kB]
2025-07-16T01:35:17.6771061Z Get:11 http://azure.archive.ubuntu.com/ubuntu noble-updates/main amd64 Packages [1237 kB]
2025-07-16T01:35:17.6916271Z Get:12 http://azure.archive.ubuntu.com/ubuntu noble-updates/main Translation-en [253 kB]
2025-07-16T01:35:17.6935999Z Get:13 http://azure.archive.ubuntu.com/ubuntu noble-updates/main amd64 Components [163 kB]
2025-07-16T01:35:17.6956501Z Get:14 http://azure.archive.ubuntu.com/ubuntu noble-updates/universe amd64 Packages [1106 kB]
2025-07-16T01:35:17.7035947Z Get:15 http://azure.archive.ubuntu.com/ubuntu noble-updates/universe Translation-en [282 kB]
2025-07-16T01:35:17.7090083Z Get:16 http://azure.archive.ubuntu.com/ubuntu noble-updates/universe amd64 Components [376 kB]
2025-07-16T01:35:17.7106641Z Get:17 http://azure.archive.ubuntu.com/ubuntu noble-updates/restricted amd64 Packages [1483 kB]
2025-07-16T01:35:17.7199520Z Get:18 http://azure.archive.ubuntu.com/ubuntu noble-updates/restricted Translation-en [317 kB]
2025-07-16T01:35:17.7229055Z Get:19 http://azure.archive.ubuntu.com/ubuntu noble-updates/restricted amd64 Components [212 B]
2025-07-16T01:35:17.7237338Z Get:20 http://azure.archive.ubuntu.com/ubuntu noble-updates/multiverse amd64 Packages [33.2 kB]
2025-07-16T01:35:17.7682977Z Get:21 http://azure.archive.ubuntu.com/ubuntu noble-updates/multiverse Translation-en [6772 B]
2025-07-16T01:35:17.7692920Z Get:22 http://azure.archive.ubuntu.com/ubuntu noble-updates/multiverse amd64 Components [940 B]
2025-07-16T01:35:17.7701544Z Get:23 http://azure.archive.ubuntu.com/ubuntu noble-backports/main amd64 Components [7084 B]
2025-07-16T01:35:17.7711890Z Get:24 http://azure.archive.ubuntu.com/ubuntu noble-backports/universe amd64 Components [28.4 kB]
2025-07-16T01:35:17.7720362Z Get:25 http://azure.archive.ubuntu.com/ubuntu noble-backports/restricted amd64 Components [212 B]
2025-07-16T01:35:17.7727120Z Get:26 http://azure.archive.ubuntu.com/ubuntu noble-backports/multiverse amd64 Components [212 B]
2025-07-16T01:35:17.7891633Z Get:27 http://azure.archive.ubuntu.com/ubuntu noble-security/main amd64 Packages [986 kB]
2025-07-16T01:35:17.7949788Z Get:28 http://azure.archive.ubuntu.com/ubuntu noble-security/main Translation-en [175 kB]
2025-07-16T01:35:17.7967612Z Get:29 http://azure.archive.ubuntu.com/ubuntu noble-security/main amd64 Components [21.6 kB]
2025-07-16T01:35:17.7978907Z Get:30 http://azure.archive.ubuntu.com/ubuntu noble-security/universe amd64 Packages [872 kB]
2025-07-16T01:35:17.8030224Z Get:31 http://azure.archive.ubuntu.com/ubuntu noble-security/universe Translation-en [192 kB]
2025-07-16T01:35:17.8049707Z Get:32 http://azure.archive.ubuntu.com/ubuntu noble-security/universe amd64 Components [52.2 kB]
2025-07-16T01:35:17.8059969Z Get:33 http://azure.archive.ubuntu.com/ubuntu noble-security/restricted amd64 Packages [1373 kB]
2025-07-16T01:35:17.8136688Z Get:34 http://azure.archive.ubuntu.com/ubuntu noble-security/restricted Translation-en [294 kB]
2025-07-16T01:35:17.8600914Z Get:35 http://azure.archive.ubuntu.com/ubuntu noble-security/restricted amd64 Components [212 B]
2025-07-16T01:35:17.8608655Z Get:36 http://azure.archive.ubuntu.com/ubuntu noble-security/multiverse amd64 Components [212 B]
2025-07-16T01:35:24.1448972Z Fetched 9719 kB in 1s (7783 kB/s)
2025-07-16T01:35:24.8539568Z Reading package lists...
2025-07-16T01:35:24.8874242Z Reading package lists...
2025-07-16T01:35:25.0647531Z Building dependency tree...
2025-07-16T01:35:25.0654699Z Reading state information...
2025-07-16T01:35:25.2199207Z libmagic1t64 is already the newest version (1:5.45-3build1).
2025-07-16T01:35:25.2200205Z libmagic1t64 set to manually installed.
2025-07-16T01:35:25.2201123Z The following additional packages will be installed:
2025-07-16T01:35:25.2205429Z   libgif7 liblept5 libtesseract5 tesseract-ocr-eng tesseract-ocr-osd
2025-07-16T01:35:25.2385315Z The following NEW packages will be installed:
2025-07-16T01:35:25.2391156Z   libgif7 liblept5 libtesseract5 tesseract-ocr tesseract-ocr-eng
2025-07-16T01:35:25.2392026Z   tesseract-ocr-osd
2025-07-16T01:35:25.2582194Z 0 upgraded, 6 newly installed, 0 to remove and 33 not upgraded.
2025-07-16T01:35:25.2582650Z Need to get 8412 kB of archives.
2025-07-16T01:35:25.2583094Z After this operation, 21.9 MB of additional disk space will be used.
2025-07-16T01:35:25.2917648Z Get:1 file:/etc/apt/apt-mirrors.txt Mirrorlist [144 B]
2025-07-16T01:35:25.2918701Z Get:2 http://azure.archive.ubuntu.com/ubuntu noble/main amd64 libgif7 amd64 5.2.2-1ubuntu1 [35.2 kB]
2025-07-16T01:35:25.3098384Z Get:3 http://azure.archive.ubuntu.com/ubuntu noble/universe amd64 liblept5 amd64 1.82.0-3build4 [1099 kB]
2025-07-16T01:35:25.3562019Z Get:4 http://azure.archive.ubuntu.com/ubuntu noble/universe amd64 libtesseract5 amd64 5.3.4-1build5 [1291 kB]
2025-07-16T01:35:25.3944932Z Get:5 http://azure.archive.ubuntu.com/ubuntu noble/universe amd64 tesseract-ocr-eng all 1:4.1.0-2 [1818 kB]
2025-07-16T01:35:25.4424843Z Get:6 http://azure.archive.ubuntu.com/ubuntu noble/universe amd64 tesseract-ocr-osd all 1:4.1.0-2 [3841 kB]
2025-07-16T01:35:25.5220313Z Get:7 http://azure.archive.ubuntu.com/ubuntu noble/universe amd64 tesseract-ocr amd64 5.3.4-1build5 [328 kB]
2025-07-16T01:35:25.7887859Z Fetched 8412 kB in 0s (30.3 MB/s)
2025-07-16T01:35:25.8114671Z Selecting previously unselected package libgif7:amd64.
2025-07-16T01:35:25.8356517Z (Reading database ... 
2025-07-16T01:35:25.8357137Z (Reading database ... 5%
2025-07-16T01:35:25.8357685Z (Reading database ... 10%
2025-07-16T01:35:25.8358254Z (Reading database ... 15%
2025-07-16T01:35:25.8358822Z (Reading database ... 20%
2025-07-16T01:35:25.8359728Z (Reading database ... 25%
2025-07-16T01:35:25.8360335Z (Reading database ... 30%
2025-07-16T01:35:25.8361168Z (Reading database ... 35%
2025-07-16T01:35:25.8361723Z (Reading database ... 40%
2025-07-16T01:35:25.8362293Z (Reading database ... 45%
2025-07-16T01:35:25.8362777Z (Reading database ... 50%
2025-07-16T01:35:25.8464497Z (Reading database ... 55%
2025-07-16T01:35:25.8741304Z (Reading database ... 60%
2025-07-16T01:35:25.8997592Z (Reading database ... 65%
2025-07-16T01:35:25.9371483Z (Reading database ... 70%
2025-07-16T01:35:25.9659512Z (Reading database ... 75%
2025-07-16T01:35:25.9995188Z (Reading database ... 80%
2025-07-16T01:35:26.0334879Z (Reading database ... 85%
2025-07-16T01:35:26.1237269Z (Reading database ... 90%
2025-07-16T01:35:26.1589687Z (Reading database ... 95%
2025-07-16T01:35:26.1590331Z (Reading database ... 100%
2025-07-16T01:35:26.1591381Z (Reading database ... 219506 files and directories currently installed.)
2025-07-16T01:35:26.1639119Z Preparing to unpack .../0-libgif7_5.2.2-1ubuntu1_amd64.deb ...
2025-07-16T01:35:26.1742796Z Unpacking libgif7:amd64 (5.2.2-1ubuntu1) ...
2025-07-16T01:35:26.2017884Z Selecting previously unselected package liblept5:amd64.
2025-07-16T01:35:26.2156764Z Preparing to unpack .../1-liblept5_1.82.0-3build4_amd64.deb ...
2025-07-16T01:35:26.2168305Z Unpacking liblept5:amd64 (1.82.0-3build4) ...
2025-07-16T01:35:26.2535623Z Selecting previously unselected package libtesseract5:amd64.
2025-07-16T01:35:26.2672722Z Preparing to unpack .../2-libtesseract5_5.3.4-1build5_amd64.deb ...
2025-07-16T01:35:26.2686904Z Unpacking libtesseract5:amd64 (5.3.4-1build5) ...
2025-07-16T01:35:26.3102163Z Selecting previously unselected package tesseract-ocr-eng.
2025-07-16T01:35:26.3242921Z Preparing to unpack .../3-tesseract-ocr-eng_1%3a4.1.0-2_all.deb ...
2025-07-16T01:35:26.3257379Z Unpacking tesseract-ocr-eng (1:4.1.0-2) ...
2025-07-16T01:35:26.3662665Z Selecting previously unselected package tesseract-ocr-osd.
2025-07-16T01:35:26.3804460Z Preparing to unpack .../4-tesseract-ocr-osd_1%3a4.1.0-2_all.deb ...
2025-07-16T01:35:26.3817389Z Unpacking tesseract-ocr-osd (1:4.1.0-2) ...
2025-07-16T01:35:26.4461220Z Selecting previously unselected package tesseract-ocr.
2025-07-16T01:35:26.4601009Z Preparing to unpack .../5-tesseract-ocr_5.3.4-1build5_amd64.deb ...
2025-07-16T01:35:26.4616318Z Unpacking tesseract-ocr (5.3.4-1build5) ...
2025-07-16T01:35:26.5233322Z Setting up tesseract-ocr-eng (1:4.1.0-2) ...
2025-07-16T01:35:26.5282942Z Setting up libgif7:amd64 (5.2.2-1ubuntu1) ...
2025-07-16T01:35:26.5320053Z Setting up tesseract-ocr-osd (1:4.1.0-2) ...
2025-07-16T01:35:26.5356604Z Setting up liblept5:amd64 (1.82.0-3build4) ...
2025-07-16T01:35:26.5398091Z Setting up libtesseract5:amd64 (5.3.4-1build5) ...
2025-07-16T01:35:26.5431868Z Setting up tesseract-ocr (5.3.4-1build5) ...
2025-07-16T01:35:26.5473071Z Processing triggers for man-db (2.12.0-4build2) ...
2025-07-16T01:35:34.7031113Z Processing triggers for libc-bin (2.39-0ubuntu8.4) ...
2025-07-16T01:35:36.7407055Z 
2025-07-16T01:35:36.7407514Z Running kernel seems to be up-to-date.
2025-07-16T01:35:36.7407868Z 
2025-07-16T01:35:36.7408013Z Restarting services...
2025-07-16T01:35:36.7479987Z 
2025-07-16T01:35:36.7480461Z Service restarts being deferred:
2025-07-16T01:35:36.7481655Z  systemctl restart hosted-compute-agent.service
2025-07-16T01:35:36.7482055Z 
2025-07-16T01:35:36.7482687Z No containers need to be restarted.
2025-07-16T01:35:36.7482991Z 
2025-07-16T01:35:36.7483177Z No user sessions are running outdated binaries.
2025-07-16T01:35:36.7483505Z 
2025-07-16T01:35:37.7431111Z No VM guests are running outdated hypervisor (qemu) binaries on this host.
2025-07-16T01:35:37.7464323Z ##[group]Run python -m pip install --upgrade pip
2025-07-16T01:35:37.7464722Z [36;1mpython -m pip install --upgrade pip[0m
2025-07-16T01:35:37.7465043Z [36;1mpip install -e .[test][0m
2025-07-16T01:35:37.7465294Z [36;1mpip install codecov[0m
2025-07-16T01:35:37.7493540Z shell: /usr/bin/bash -e {0}
2025-07-16T01:35:37.7493775Z env:
2025-07-16T01:35:37.7494027Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:37.7494438Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T01:35:37.7494877Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:37.7495239Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:37.7495613Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:37.7495980Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T01:35:37.7496283Z ##[endgroup]
2025-07-16T01:35:38.3829673Z Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages (25.1.1)
2025-07-16T01:35:38.8784338Z Obtaining file:///home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T01:35:38.8807649Z   Installing build dependencies: started
2025-07-16T01:35:39.5215616Z   Installing build dependencies: finished with status 'done'
2025-07-16T01:35:39.5224782Z   Checking if build backend supports build_editable: started
2025-07-16T01:35:39.5647118Z   Checking if build backend supports build_editable: finished with status 'done'
2025-07-16T01:35:39.5655115Z   Getting requirements to build editable: started
2025-07-16T01:35:39.6937360Z   Getting requirements to build editable: finished with status 'done'
2025-07-16T01:35:39.6950952Z   Installing backend dependencies: started
2025-07-16T01:35:40.1871327Z   Installing backend dependencies: finished with status 'done'
2025-07-16T01:35:40.1878531Z   Preparing editable metadata (pyproject.toml): started
2025-07-16T01:35:40.3878940Z   Preparing editable metadata (pyproject.toml): finished with status 'done'
2025-07-16T01:35:40.4847796Z Collecting fastapi>=0.104.0 (from book_triage==0.1.0)
2025-07-16T01:35:40.4861794Z   Using cached fastapi-0.116.1-py3-none-any.whl.metadata (28 kB)
2025-07-16T01:35:40.5667727Z Collecting openai>=1.0.0 (from book_triage==0.1.0)
2025-07-16T01:35:40.6198867Z   Downloading openai-1.96.1-py3-none-any.whl.metadata (29 kB)
2025-07-16T01:35:40.7479886Z Collecting pandas>=2.0.0 (from book_triage==0.1.0)
2025-07-16T01:35:40.7493551Z   Using cached pandas-2.3.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (91 kB)
2025-07-16T01:35:40.9603190Z Collecting pillow>=10.0.0 (from book_triage==0.1.0)
2025-07-16T01:35:40.9617229Z   Using cached pillow-11.3.0-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (9.0 kB)
2025-07-16T01:35:40.9778764Z Collecting pytesseract>=0.3.10 (from book_triage==0.1.0)
2025-07-16T01:35:40.9790438Z   Using cached pytesseract-0.3.13-py3-none-any.whl.metadata (11 kB)
2025-07-16T01:35:40.9970959Z Collecting python-dotenv>=1.0.0 (from book_triage==0.1.0)
2025-07-16T01:35:40.9982829Z   Using cached python_dotenv-1.1.1-py3-none-any.whl.metadata (24 kB)
2025-07-16T01:35:41.0139033Z Collecting python-magic>=0.4.27 (from book_triage==0.1.0)
2025-07-16T01:35:41.0150870Z   Using cached python_magic-0.4.27-py2.py3-none-any.whl.metadata (5.8 kB)
2025-07-16T01:35:41.0292352Z Collecting python-multipart>=0.0.6 (from book_triage==0.1.0)
2025-07-16T01:35:41.0304116Z   Using cached python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)
2025-07-16T01:35:41.0425112Z Collecting slowapi>=0.1.8 (from book_triage==0.1.0)
2025-07-16T01:35:41.0436714Z   Using cached slowapi-0.1.9-py3-none-any.whl.metadata (3.0 kB)
2025-07-16T01:35:41.0768136Z Collecting tqdm>=4.65.0 (from book_triage==0.1.0)
2025-07-16T01:35:41.0780117Z   Using cached tqdm-4.67.1-py3-none-any.whl.metadata (57 kB)
2025-07-16T01:35:41.1017040Z Collecting typer>=0.9.0 (from book_triage==0.1.0)
2025-07-16T01:35:41.1028995Z   Using cached typer-0.16.0-py3-none-any.whl.metadata (15 kB)
2025-07-16T01:35:41.1321817Z Collecting uvicorn>=0.24.0 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T01:35:41.1333376Z   Using cached uvicorn-0.35.0-py3-none-any.whl.metadata (6.5 kB)
2025-07-16T01:35:41.1577950Z Collecting beautifulsoup4>=4.12.0 (from book_triage==0.1.0)
2025-07-16T01:35:41.1751082Z   Downloading beautifulsoup4-4.13.4-py3-none-any.whl.metadata (3.8 kB)
2025-07-16T01:35:41.4778491Z Collecting coverage>=7.3.0 (from book_triage==0.1.0)
2025-07-16T01:35:41.4792456Z   Using cached coverage-7.9.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.9 kB)
2025-07-16T01:35:41.5041866Z Collecting pytest-asyncio>=0.21.0 (from book_triage==0.1.0)
2025-07-16T01:35:41.5117675Z   Downloading pytest_asyncio-1.0.0-py3-none-any.whl.metadata (4.0 kB)
2025-07-16T01:35:41.5313055Z Collecting pytest-cov>=4.1.0 (from book_triage==0.1.0)
2025-07-16T01:35:41.5324840Z   Using cached pytest_cov-6.2.1-py3-none-any.whl.metadata (30 kB)
2025-07-16T01:35:41.5696864Z Collecting pytest>=7.4.0 (from book_triage==0.1.0)
2025-07-16T01:35:41.5708933Z   Using cached pytest-8.4.1-py3-none-any.whl.metadata (7.7 kB)
2025-07-16T01:35:41.6001199Z Collecting requests>=2.31.0 (from book_triage==0.1.0)
2025-07-16T01:35:41.6012907Z   Using cached requests-2.32.4-py3-none-any.whl.metadata (4.9 kB)
2025-07-16T01:35:41.6270073Z Collecting soupsieve>1.2 (from beautifulsoup4>=4.12.0->book_triage==0.1.0)
2025-07-16T01:35:41.6361639Z   Downloading soupsieve-2.7-py3-none-any.whl.metadata (4.6 kB)
2025-07-16T01:35:41.6579137Z Collecting typing-extensions>=4.0.0 (from beautifulsoup4>=4.12.0->book_triage==0.1.0)
2025-07-16T01:35:41.6591073Z   Using cached typing_extensions-4.14.1-py3-none-any.whl.metadata (3.0 kB)
2025-07-16T01:35:41.6952818Z Collecting starlette<0.48.0,>=0.40.0 (from fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T01:35:41.6965188Z   Using cached starlette-0.47.1-py3-none-any.whl.metadata (6.2 kB)
2025-07-16T01:35:41.8291288Z Collecting pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4 (from fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T01:35:41.8305450Z   Using cached pydantic-2.11.7-py3-none-any.whl.metadata (67 kB)
2025-07-16T01:35:41.8502426Z Collecting annotated-types>=0.6.0 (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T01:35:41.8514120Z   Using cached annotated_types-0.7.0-py3-none-any.whl.metadata (15 kB)
2025-07-16T01:35:42.4643102Z Collecting pydantic-core==2.33.2 (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T01:35:42.4657058Z   Using cached pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)
2025-07-16T01:35:42.4823188Z Collecting typing-inspection>=0.4.0 (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T01:35:42.4835426Z   Using cached typing_inspection-0.4.1-py3-none-any.whl.metadata (2.6 kB)
2025-07-16T01:35:42.5115909Z Collecting anyio<5,>=3.6.2 (from starlette<0.48.0,>=0.40.0->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T01:35:42.5127728Z   Using cached anyio-4.9.0-py3-none-any.whl.metadata (4.7 kB)
2025-07-16T01:35:42.5372923Z Collecting idna>=2.8 (from anyio<5,>=3.6.2->starlette<0.48.0,>=0.40.0->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T01:35:42.5384716Z   Using cached idna-3.10-py3-none-any.whl.metadata (10 kB)
2025-07-16T01:35:42.5508364Z Collecting sniffio>=1.1 (from anyio<5,>=3.6.2->starlette<0.48.0,>=0.40.0->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T01:35:42.5520007Z   Using cached sniffio-1.3.1-py3-none-any.whl.metadata (3.9 kB)
2025-07-16T01:35:42.5792553Z Collecting distro<2,>=1.7.0 (from openai>=1.0.0->book_triage==0.1.0)
2025-07-16T01:35:42.5804258Z   Using cached distro-1.9.0-py3-none-any.whl.metadata (6.8 kB)
2025-07-16T01:35:42.6020161Z Collecting httpx<1,>=0.23.0 (from openai>=1.0.0->book_triage==0.1.0)
2025-07-16T01:35:42.6032443Z   Using cached httpx-0.28.1-py3-none-any.whl.metadata (7.1 kB)
2025-07-16T01:35:42.6751159Z Collecting jiter<1,>=0.4.0 (from openai>=1.0.0->book_triage==0.1.0)
2025-07-16T01:35:42.6764115Z   Using cached jiter-0.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.2 kB)
2025-07-16T01:35:42.7508100Z Collecting certifi (from httpx<1,>=0.23.0->openai>=1.0.0->book_triage==0.1.0)
2025-07-16T01:35:42.7520105Z   Using cached certifi-2025.7.14-py3-none-any.whl.metadata (2.4 kB)
2025-07-16T01:35:42.7762751Z Collecting httpcore==1.* (from httpx<1,>=0.23.0->openai>=1.0.0->book_triage==0.1.0)
2025-07-16T01:35:42.7776319Z   Using cached httpcore-1.0.9-py3-none-any.whl.metadata (21 kB)
2025-07-16T01:35:42.7927622Z Collecting h11>=0.16 (from httpcore==1.*->httpx<1,>=0.23.0->openai>=1.0.0->book_triage==0.1.0)
2025-07-16T01:35:42.7939476Z   Using cached h11-0.16.0-py3-none-any.whl.metadata (8.3 kB)
2025-07-16T01:35:42.9617377Z Collecting numpy>=1.26.0 (from pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T01:35:42.9631363Z   Using cached numpy-2.3.1-cp312-cp312-manylinux_2_28_x86_64.whl.metadata (62 kB)
2025-07-16T01:35:42.9884142Z Collecting python-dateutil>=2.8.2 (from pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T01:35:42.9902051Z   Using cached python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)
2025-07-16T01:35:43.0275152Z Collecting pytz>=2020.1 (from pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T01:35:43.0287262Z   Using cached pytz-2025.2-py2.py3-none-any.whl.metadata (22 kB)
2025-07-16T01:35:43.0453434Z Collecting tzdata>=2022.7 (from pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T01:35:43.0465154Z   Using cached tzdata-2025.2-py2.py3-none-any.whl.metadata (1.4 kB)
2025-07-16T01:35:43.0684064Z Collecting packaging>=21.3 (from pytesseract>=0.3.10->book_triage==0.1.0)
2025-07-16T01:35:43.0695704Z   Using cached packaging-25.0-py3-none-any.whl.metadata (3.3 kB)
2025-07-16T01:35:43.0905910Z Collecting iniconfig>=1 (from pytest>=7.4.0->book_triage==0.1.0)
2025-07-16T01:35:43.0917590Z   Using cached iniconfig-2.1.0-py3-none-any.whl.metadata (2.7 kB)
2025-07-16T01:35:43.1098597Z Collecting pluggy<2,>=1.5 (from pytest>=7.4.0->book_triage==0.1.0)
2025-07-16T01:35:43.1110253Z   Using cached pluggy-1.6.0-py3-none-any.whl.metadata (4.8 kB)
2025-07-16T01:35:43.1334822Z Collecting pygments>=2.7.2 (from pytest>=7.4.0->book_triage==0.1.0)
2025-07-16T01:35:43.1346942Z   Using cached pygments-2.19.2-py3-none-any.whl.metadata (2.5 kB)
2025-07-16T01:35:43.1903821Z Collecting six>=1.5 (from python-dateutil>=2.8.2->pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T01:35:43.1916210Z   Using cached six-1.17.0-py2.py3-none-any.whl.metadata (1.7 kB)
2025-07-16T01:35:43.2715888Z Collecting charset_normalizer<4,>=2 (from requests>=2.31.0->book_triage==0.1.0)
2025-07-16T01:35:43.2730859Z   Using cached charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (35 kB)
2025-07-16T01:35:43.3093758Z Collecting urllib3<3,>=1.21.1 (from requests>=2.31.0->book_triage==0.1.0)
2025-07-16T01:35:43.3105957Z   Using cached urllib3-2.5.0-py3-none-any.whl.metadata (6.5 kB)
2025-07-16T01:35:43.3523516Z Collecting limits>=2.3 (from slowapi>=0.1.8->book_triage==0.1.0)
2025-07-16T01:35:43.4054706Z   Using cached limits-5.4.0-py3-none-any.whl.metadata (10 kB)
2025-07-16T01:35:43.4287016Z Collecting deprecated>=1.2 (from limits>=2.3->slowapi>=0.1.8->book_triage==0.1.0)
2025-07-16T01:35:43.4299058Z   Using cached Deprecated-1.2.18-py2.py3-none-any.whl.metadata (5.7 kB)
2025-07-16T01:35:43.5230221Z Collecting wrapt<2,>=1.10 (from deprecated>=1.2->limits>=2.3->slowapi>=0.1.8->book_triage==0.1.0)
2025-07-16T01:35:43.5244163Z   Using cached wrapt-1.17.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.4 kB)
2025-07-16T01:35:43.5539849Z Collecting click>=8.0.0 (from typer>=0.9.0->book_triage==0.1.0)
2025-07-16T01:35:43.5551577Z   Using cached click-8.2.1-py3-none-any.whl.metadata (2.5 kB)
2025-07-16T01:35:43.5776131Z Collecting shellingham>=1.3.0 (from typer>=0.9.0->book_triage==0.1.0)
2025-07-16T01:35:43.5787898Z   Using cached shellingham-1.5.4-py2.py3-none-any.whl.metadata (3.5 kB)
2025-07-16T01:35:43.6194753Z Collecting rich>=10.11.0 (from typer>=0.9.0->book_triage==0.1.0)
2025-07-16T01:35:43.6206723Z   Using cached rich-14.0.0-py3-none-any.whl.metadata (18 kB)
2025-07-16T01:35:43.6443550Z Collecting markdown-it-py>=2.2.0 (from rich>=10.11.0->typer>=0.9.0->book_triage==0.1.0)
2025-07-16T01:35:43.6458143Z   Using cached markdown_it_py-3.0.0-py3-none-any.whl.metadata (6.9 kB)
2025-07-16T01:35:43.6698306Z Collecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich>=10.11.0->typer>=0.9.0->book_triage==0.1.0)
2025-07-16T01:35:43.6709934Z   Using cached mdurl-0.1.2-py3-none-any.whl.metadata (1.6 kB)
2025-07-16T01:35:43.7231747Z Collecting httptools>=0.6.3 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T01:35:43.7244819Z   Using cached httptools-0.6.4-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.6 kB)
2025-07-16T01:35:43.7637867Z Collecting pyyaml>=5.1 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T01:35:43.7650571Z   Using cached PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.1 kB)
2025-07-16T01:35:43.8051817Z Collecting uvloop>=0.15.1 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T01:35:43.8065322Z   Using cached uvloop-0.21.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)
2025-07-16T01:35:43.8804605Z Collecting watchfiles>=0.13 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T01:35:43.8818055Z   Using cached watchfiles-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)
2025-07-16T01:35:43.9692092Z Collecting websockets>=10.4 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T01:35:43.9706084Z   Using cached websockets-15.0.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)
2025-07-16T01:35:43.9985009Z Downloading beautifulsoup4-4.13.4-py3-none-any.whl (187 kB)
2025-07-16T01:35:44.0125005Z Using cached coverage-7.9.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (245 kB)
2025-07-16T01:35:44.0137634Z Using cached fastapi-0.116.1-py3-none-any.whl (95 kB)
2025-07-16T01:35:44.0149502Z Using cached pydantic-2.11.7-py3-none-any.whl (444 kB)
2025-07-16T01:35:44.0164615Z Using cached pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)
2025-07-16T01:35:44.0190154Z Using cached starlette-0.47.1-py3-none-any.whl (72 kB)
2025-07-16T01:35:44.0202153Z Using cached anyio-4.9.0-py3-none-any.whl (100 kB)
2025-07-16T01:35:44.0214518Z Using cached annotated_types-0.7.0-py3-none-any.whl (13 kB)
2025-07-16T01:35:44.0225739Z Using cached idna-3.10-py3-none-any.whl (70 kB)
2025-07-16T01:35:44.0300010Z Downloading openai-1.96.1-py3-none-any.whl (757 kB)
2025-07-16T01:35:44.0445375Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 757.5/757.5 kB 60.0 MB/s eta 0:00:00
2025-07-16T01:35:44.0456240Z Using cached distro-1.9.0-py3-none-any.whl (20 kB)
2025-07-16T01:35:44.0467676Z Using cached httpx-0.28.1-py3-none-any.whl (73 kB)
2025-07-16T01:35:44.0479271Z Using cached httpcore-1.0.9-py3-none-any.whl (78 kB)
2025-07-16T01:35:44.0491389Z Using cached jiter-0.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (352 kB)
2025-07-16T01:35:44.0505037Z Using cached typing_extensions-4.14.1-py3-none-any.whl (43 kB)
2025-07-16T01:35:44.0516402Z Using cached h11-0.16.0-py3-none-any.whl (37 kB)
2025-07-16T01:35:44.0528249Z Using cached pandas-2.3.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.0 MB)
2025-07-16T01:35:44.0624401Z Using cached numpy-2.3.1-cp312-cp312-manylinux_2_28_x86_64.whl (16.6 MB)
2025-07-16T01:35:44.0753315Z Using cached pillow-11.3.0-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (6.6 MB)
2025-07-16T01:35:44.0810958Z Using cached pytesseract-0.3.13-py3-none-any.whl (14 kB)
2025-07-16T01:35:44.0822105Z Using cached packaging-25.0-py3-none-any.whl (66 kB)
2025-07-16T01:35:44.0833731Z Using cached pytest-8.4.1-py3-none-any.whl (365 kB)
2025-07-16T01:35:44.0847448Z Using cached pluggy-1.6.0-py3-none-any.whl (20 kB)
2025-07-16T01:35:44.0858688Z Using cached iniconfig-2.1.0-py3-none-any.whl (6.0 kB)
2025-07-16T01:35:44.0869866Z Using cached pygments-2.19.2-py3-none-any.whl (1.2 MB)
2025-07-16T01:35:44.0961393Z Downloading pytest_asyncio-1.0.0-py3-none-any.whl (15 kB)
2025-07-16T01:35:44.0999390Z Using cached pytest_cov-6.2.1-py3-none-any.whl (24 kB)
2025-07-16T01:35:44.1011217Z Using cached python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)
2025-07-16T01:35:44.1024087Z Using cached python_dotenv-1.1.1-py3-none-any.whl (20 kB)
2025-07-16T01:35:44.1035466Z Using cached python_magic-0.4.27-py2.py3-none-any.whl (13 kB)
2025-07-16T01:35:44.1046928Z Using cached python_multipart-0.0.20-py3-none-any.whl (24 kB)
2025-07-16T01:35:44.1058338Z Using cached pytz-2025.2-py2.py3-none-any.whl (509 kB)
2025-07-16T01:35:44.1073210Z Using cached requests-2.32.4-py3-none-any.whl (64 kB)
2025-07-16T01:35:44.1085286Z Using cached charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (148 kB)
2025-07-16T01:35:44.1097280Z Using cached urllib3-2.5.0-py3-none-any.whl (129 kB)
2025-07-16T01:35:44.1109310Z Using cached certifi-2025.7.14-py3-none-any.whl (162 kB)
2025-07-16T01:35:44.1121671Z Using cached six-1.17.0-py2.py3-none-any.whl (11 kB)
2025-07-16T01:35:44.1132768Z Using cached slowapi-0.1.9-py3-none-any.whl (14 kB)
2025-07-16T01:35:44.1143994Z Using cached limits-5.4.0-py3-none-any.whl (60 kB)
2025-07-16T01:35:44.1155636Z Using cached Deprecated-1.2.18-py2.py3-none-any.whl (10.0 kB)
2025-07-16T01:35:44.1167427Z Using cached wrapt-1.17.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (89 kB)
2025-07-16T01:35:44.1179079Z Using cached sniffio-1.3.1-py3-none-any.whl (10 kB)
2025-07-16T01:35:44.1254348Z Downloading soupsieve-2.7-py3-none-any.whl (36 kB)
2025-07-16T01:35:44.1289782Z Using cached tqdm-4.67.1-py3-none-any.whl (78 kB)
2025-07-16T01:35:44.1301490Z Using cached typer-0.16.0-py3-none-any.whl (46 kB)
2025-07-16T01:35:44.1313088Z Using cached click-8.2.1-py3-none-any.whl (102 kB)
2025-07-16T01:35:44.1324891Z Using cached rich-14.0.0-py3-none-any.whl (243 kB)
2025-07-16T01:35:44.1337649Z Using cached markdown_it_py-3.0.0-py3-none-any.whl (87 kB)
2025-07-16T01:35:44.1349605Z Using cached mdurl-0.1.2-py3-none-any.whl (10.0 kB)
2025-07-16T01:35:44.1360996Z Using cached shellingham-1.5.4-py2.py3-none-any.whl (9.8 kB)
2025-07-16T01:35:44.1372432Z Using cached typing_inspection-0.4.1-py3-none-any.whl (14 kB)
2025-07-16T01:35:44.1383719Z Using cached tzdata-2025.2-py2.py3-none-any.whl (347 kB)
2025-07-16T01:35:44.1397326Z Using cached uvicorn-0.35.0-py3-none-any.whl (66 kB)
2025-07-16T01:35:44.1409632Z Using cached httptools-0.6.4-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (510 kB)
2025-07-16T01:35:44.1424649Z Using cached PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (767 kB)
2025-07-16T01:35:44.1441390Z Using cached uvloop-0.21.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.7 MB)
2025-07-16T01:35:44.1485955Z Using cached watchfiles-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (452 kB)
2025-07-16T01:35:44.1501126Z Using cached websockets-15.0.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (182 kB)
2025-07-16T01:35:44.2525266Z Building wheels for collected packages: book_triage
2025-07-16T01:35:44.2535066Z   Building editable for book_triage (pyproject.toml): started
2025-07-16T01:35:44.2905963Z   Building editable for book_triage (pyproject.toml): finished with status 'done'
2025-07-16T01:35:44.2913689Z   Created wheel for book_triage: filename=book_triage-0.1.0-py3-none-any.whl size=10296 sha256=539e4c1255184acd7ec7c2a69df551a4721ec536aa76a12259e4da33ac739828
2025-07-16T01:35:44.2915536Z   Stored in directory: /tmp/pip-ephem-wheel-cache-eyr3htjd/wheels/d3/8c/55/20b7343e2b9725e0ea7cb71535aa1bddd3950a939b56e58f9b
2025-07-16T01:35:44.2948227Z Successfully built book_triage
2025-07-16T01:35:44.4256429Z Installing collected packages: pytz, wrapt, websockets, uvloop, urllib3, tzdata, typing-extensions, tqdm, soupsieve, sniffio, six, shellingham, pyyaml, python-multipart, python-magic, python-dotenv, pygments, pluggy, pillow, packaging, numpy, mdurl, jiter, iniconfig, idna, httptools, h11, distro, coverage, click, charset_normalizer, certifi, annotated-types, uvicorn, typing-inspection, requests, python-dateutil, pytest, pytesseract, pydantic-core, markdown-it-py, httpcore, deprecated, beautifulsoup4, anyio, watchfiles, starlette, rich, pytest-cov, pytest-asyncio, pydantic, pandas, limits, httpx, typer, slowapi, openai, fastapi, book_triage
2025-07-16T01:35:55.4033688Z 
2025-07-16T01:35:55.4092853Z Successfully installed annotated-types-0.7.0 anyio-4.9.0 beautifulsoup4-4.13.4 book_triage-0.1.0 certifi-2025.7.14 charset_normalizer-3.4.2 click-8.2.1 coverage-7.9.2 deprecated-1.2.18 distro-1.9.0 fastapi-0.116.1 h11-0.16.0 httpcore-1.0.9 httptools-0.6.4 httpx-0.28.1 idna-3.10 iniconfig-2.1.0 jiter-0.10.0 limits-5.4.0 markdown-it-py-3.0.0 mdurl-0.1.2 numpy-2.3.1 openai-1.96.1 packaging-25.0 pandas-2.3.1 pillow-11.3.0 pluggy-1.6.0 pydantic-2.11.7 pydantic-core-2.33.2 pygments-2.19.2 pytesseract-0.3.13 pytest-8.4.1 pytest-asyncio-1.0.0 pytest-cov-6.2.1 python-dateutil-2.9.0.post0 python-dotenv-1.1.1 python-magic-0.4.27 python-multipart-0.0.20 pytz-2025.2 pyyaml-6.0.2 requests-2.32.4 rich-14.0.0 shellingham-1.5.4 six-1.17.0 slowapi-0.1.9 sniffio-1.3.1 soupsieve-2.7 starlette-0.47.1 tqdm-4.67.1 typer-0.16.0 typing-extensions-4.14.1 typing-inspection-0.4.1 tzdata-2025.2 urllib3-2.5.0 uvicorn-0.35.0 uvloop-0.21.0 watchfiles-1.1.0 websockets-15.0.1 wrapt-1.17.2
2025-07-16T01:35:56.3900877Z Collecting codecov
2025-07-16T01:35:56.3915530Z   Using cached codecov-2.1.13-py2.py3-none-any.whl.metadata (1.3 kB)
2025-07-16T01:35:56.3944572Z Requirement already satisfied: requests>=2.7.9 in /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages (from codecov) (2.32.4)
2025-07-16T01:35:56.3949681Z Requirement already satisfied: coverage in /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages (from codecov) (7.9.2)
2025-07-16T01:35:56.3963736Z Requirement already satisfied: charset_normalizer<4,>=2 in /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages (from requests>=2.7.9->codecov) (3.4.2)
2025-07-16T01:35:56.3970336Z Requirement already satisfied: idna<4,>=2.5 in /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages (from requests>=2.7.9->codecov) (3.10)
2025-07-16T01:35:56.3977223Z Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages (from requests>=2.7.9->codecov) (2.5.0)
2025-07-16T01:35:56.3983408Z Requirement already satisfied: certifi>=2017.4.17 in /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages (from requests>=2.7.9->codecov) (2025.7.14)
2025-07-16T01:35:56.4049404Z Using cached codecov-2.1.13-py2.py3-none-any.whl (16 kB)
2025-07-16T01:35:56.4838263Z Installing collected packages: codecov
2025-07-16T01:35:56.5023464Z Successfully installed codecov-2.1.13
2025-07-16T01:35:56.5559605Z ##[group]Run echo "id,title,url,F,R,A,V,S,P,decision" > sample_books.csv
2025-07-16T01:35:56.5560112Z [36;1mecho "id,title,url,F,R,A,V,S,P,decision" > sample_books.csv[0m
2025-07-16T01:35:56.5560836Z [36;1mecho "test1,Test Book,https://example.com,3,2,1,4,2,4,unknown" >> sample_books.csv[0m
2025-07-16T01:35:56.5589397Z shell: /usr/bin/bash -e {0}
2025-07-16T01:35:56.5589637Z env:
2025-07-16T01:35:56.5589888Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5590303Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T01:35:56.5590931Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5591296Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5591675Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5592046Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T01:35:56.5592339Z ##[endgroup]
2025-07-16T01:35:56.5662881Z ##[group]Run echo "BOOK_USER=testuser" >> $GITHUB_ENV
2025-07-16T01:35:56.5663261Z [36;1mecho "BOOK_USER=testuser" >> $GITHUB_ENV[0m
2025-07-16T01:35:56.5663566Z [36;1mecho "BOOK_PASS=testpass" >> $GITHUB_ENV[0m
2025-07-16T01:35:56.5663882Z [36;1mecho "OPENAI_API_KEY=test-key" >> $GITHUB_ENV[0m
2025-07-16T01:35:56.5690115Z shell: /usr/bin/bash -e {0}
2025-07-16T01:35:56.5690341Z env:
2025-07-16T01:35:56.5690796Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5691394Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T01:35:56.5691802Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5692155Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5692514Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5692890Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T01:35:56.5693188Z ##[endgroup]
2025-07-16T01:35:56.5759093Z ##[group]Run coverage run -m pytest tests/ -v
2025-07-16T01:35:56.5759458Z [36;1mcoverage run -m pytest tests/ -v[0m
2025-07-16T01:35:56.5759752Z [36;1mcoverage report --show-missing[0m
2025-07-16T01:35:56.5760021Z [36;1mcoverage xml[0m
2025-07-16T01:35:56.5784831Z shell: /usr/bin/bash -e {0}
2025-07-16T01:35:56.5785061Z env:
2025-07-16T01:35:56.5785307Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5785723Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T01:35:56.5786117Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5786477Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5786827Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:35:56.5787361Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T01:35:56.5787663Z   BOOK_USER: testuser
2025-07-16T01:35:56.5787864Z   BOOK_PASS: testpass
2025-07-16T01:35:56.5788091Z   OPENAI_API_KEY: test-key
2025-07-16T01:35:56.5788292Z ##[endgroup]
2025-07-16T01:35:57.6906257Z ============================= test session starts ==============================
2025-07-16T01:35:57.6907280Z platform linux -- Python 3.12.11, pytest-8.4.1, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.12.11/x64/bin/python
2025-07-16T01:35:57.6908054Z cachedir: .pytest_cache
2025-07-16T01:35:57.6908558Z rootdir: /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T01:35:57.6909127Z configfile: pyproject.toml
2025-07-16T01:35:57.6909638Z plugins: cov-6.2.1, asyncio-1.0.0, anyio-4.9.0
2025-07-16T01:35:57.6910454Z asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
2025-07-16T01:36:02.1947744Z collecting ... collected 193 items
2025-07-16T01:36:02.1948182Z 
2025-07-16T01:36:02.3323203Z tests/test_api.py::TestAPIEndpoints::test_root_endpoint PASSED           [  0%]
2025-07-16T01:36:02.3613011Z tests/test_api.py::TestAPIEndpoints::test_health_endpoint PASSED         [  1%]
2025-07-16T01:36:02.3915818Z tests/test_api.py::TestAPIEndpoints::test_get_books_empty PASSED         [  1%]
2025-07-16T01:36:02.4256111Z tests/test_api.py::TestAPIEndpoints::test_get_books_with_data PASSED     [  2%]
2025-07-16T01:36:02.4799017Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_success PASSED    [  2%]
2025-07-16T01:36:02.5075598Z tests/test_api.py::TestAPIEndpoints::test_scan_books_unauthorized PASSED [  3%]
2025-07-16T01:36:02.5346181Z tests/test_api.py::TestAPIEndpoints::test_rate_limiting_books_endpoint PASSED [  3%]
2025-07-16T01:36:02.5882167Z tests/test_api.py::TestAPIEndpoints::test_file_upload_size_limit PASSED  [  4%]
2025-07-16T01:36:02.6160342Z tests/test_api.py::TestAPIEndpoints::test_security_headers_in_response PASSED [  4%]
2025-07-16T01:36:02.6472791Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_no_title_extracted PASSED [  5%]
2025-07-16T01:36:02.6796316Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_vision_processor_exception PASSED [  5%]
2025-07-16T01:36:02.7065108Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_no_file PASSED    [  6%]
2025-07-16T01:36:02.7343881Z tests/test_api.py::TestAPIEndpoints::test_scan_books_success PASSED      [  6%]
2025-07-16T01:36:02.7621095Z tests/test_api.py::TestAPIEndpoints::test_scan_books_exception PASSED    [  7%]
2025-07-16T01:36:02.7918268Z tests/test_api.py::TestAPIEndpoints::test_rescan_title_record_not_found PASSED [  7%]
2025-07-16T01:36:02.8198046Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_success PASSED [  8%]
2025-07-16T01:36:02.8463568Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_missing_isbn PASSED [  8%]
2025-07-16T01:36:02.8739959Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_invalid_isbn PASSED [  9%]
2025-07-16T01:36:02.9124137Z tests/test_api.py::TestAPIEndpoints::test_rescan_title_preserves_values PASSED [  9%]
2025-07-16T01:36:02.9360345Z tests/test_api.py::TestAPIInitialization::test_initialize_app PASSED     [ 10%]
2025-07-16T01:36:02.9425989Z tests/test_api.py::TestAPIInitialization::test_app_without_initialization PASSED [ 10%]
2025-07-16T01:36:02.9672026Z tests/test_cli.py::TestCLICommands::test_cli_help PASSED                 [ 11%]
2025-07-16T01:36:02.9755596Z tests/test_cli.py::TestCLICommands::test_scan_command_success PASSED     [ 11%]
2025-07-16T01:36:02.9820109Z tests/test_cli.py::TestCLICommands::test_scan_command_with_options PASSED [ 12%]
2025-07-16T01:36:02.9876456Z tests/test_cli.py::TestCLICommands::test_scan_command_no_records PASSED  [ 12%]
2025-07-16T01:36:02.9934036Z tests/test_cli.py::TestCLICommands::test_scan_command_nonexistent_file PASSED [ 13%]
2025-07-16T01:36:02.9987943Z tests/test_cli.py::TestCLICommands::test_scan_command_exception PASSED   [ 13%]
2025-07-16T01:36:03.0052264Z tests/test_cli.py::TestCLICommands::test_web_command_success PASSED      [ 14%]
2025-07-16T01:36:03.0116084Z tests/test_cli.py::TestCLICommands::test_web_command_with_options PASSED [ 15%]
2025-07-16T01:36:03.0177743Z tests/test_cli.py::TestCLICommands::test_web_command_nonexistent_file PASSED [ 15%]
2025-07-16T01:36:03.0234373Z tests/test_cli.py::TestCLICommands::test_web_command_exception PASSED    [ 16%]
2025-07-16T01:36:03.0317561Z tests/test_cli.py::TestCLICommands::test_create_csv_command_empty PASSED [ 16%]
2025-07-16T01:36:03.0404745Z tests/test_cli.py::TestCLICommands::test_create_csv_command_with_sample PASSED [ 17%]
2025-07-16T01:36:03.0463995Z tests/test_cli.py::TestCLICommands::test_create_csv_command_creates_directory PASSED [ 17%]
2025-07-16T01:36:03.0521105Z tests/test_cli.py::TestCLICommands::test_create_csv_command_exception PASSED [ 18%]
2025-07-16T01:36:03.0604012Z tests/test_cli.py::TestCLICommands::test_info_command_success PASSED     [ 18%]
2025-07-16T01:36:03.0652136Z tests/test_cli.py::TestCLICommands::test_info_command_nonexistent_file PASSED [ 19%]
2025-07-16T01:36:03.0715448Z tests/test_cli.py::TestCLICommands::test_info_command_exception PASSED   [ 19%]
2025-07-16T01:36:03.0798919Z tests/test_cli.py::TestCLIValidation::test_scan_cost_validation_min PASSED [ 20%]
2025-07-16T01:36:03.0868883Z tests/test_cli.py::TestCLIValidation::test_scan_cost_validation_max PASSED [ 20%]
2025-07-16T01:36:03.0932675Z tests/test_cli.py::TestCLIValidation::test_port_validation PASSED        [ 21%]
2025-07-16T01:36:03.0993458Z tests/test_cli.py::TestCLIIntegration::test_scan_integration_with_core PASSED [ 21%]
2025-07-16T01:36:03.1055882Z tests/test_cli.py::TestCLIIntegration::test_web_integration_with_api PASSED [ 22%]
2025-07-16T01:36:03.1191940Z tests/test_cli.py::TestCLIEnvironment::test_environment_loading PASSED   [ 22%]
2025-07-16T01:36:03.1330462Z tests/test_cli.py::TestCLIEnvironment::test_logging_configuration PASSED [ 23%]
2025-07-16T01:36:03.1391522Z tests/test_cli.py::TestCLIEnvironment::test_verbose_logging PASSED       [ 23%]
2025-07-16T01:36:03.1402841Z tests/test_core.py::TestBookRecord::test_book_record_creation PASSED     [ 24%]
2025-07-16T01:36:03.1414281Z tests/test_core.py::TestBookRecord::test_book_record_to_dict PASSED      [ 24%]
2025-07-16T01:36:03.1426114Z tests/test_core.py::TestBookRecord::test_book_record_with_all_fields PASSED [ 25%]
2025-07-16T01:36:03.1440434Z tests/test_core.py::TestBookTriage::test_book_triage_initialization_nonexistent_file PASSED [ 25%]
2025-07-16T01:36:03.1482862Z tests/test_core.py::TestBookTriage::test_book_triage_initialization_with_data PASSED [ 26%]
2025-07-16T01:36:03.1497141Z tests/test_core.py::TestBookTriage::test_calculate_utilities PASSED      [ 26%]
2025-07-16T01:36:03.1511187Z tests/test_core.py::TestBookTriage::test_calculate_utilities_with_none_values PASSED [ 27%]
2025-07-16T01:36:03.1524812Z tests/test_core.py::TestBookTriage::test_make_decision PASSED            [ 27%]
2025-07-16T01:36:03.1573961Z tests/test_core.py::TestBookTriage::test_add_record PASSED               [ 28%]
2025-07-16T01:36:03.1620219Z tests/test_core.py::TestBookTriage::test_get_record_by_id PASSED         [ 29%]
2025-07-16T01:36:03.1667695Z tests/test_core.py::TestBookTriage::test_price_to_v_calculation PASSED   [ 29%]
2025-07-16T01:36:03.1689942Z tests/test_core.py::TestBookTriage::test_enrich_with_gpt4o_mock PASSED   [ 30%]
2025-07-16T01:36:03.1712367Z tests/test_core.py::TestBookTriage::test_scan_cost_parameter PASSED      [ 30%]
2025-07-16T01:36:03.1730079Z tests/test_core.py::TestDecisionEnum::test_decision_values PASSED        [ 31%]
2025-07-16T01:36:03.1747987Z tests/test_core.py::TestDecisionEnum::test_decision_comparison PASSED    [ 31%]
2025-07-16T01:36:03.1797066Z tests/test_core_coverage.py::TestBookTriageCoverage::test_load_csv_with_invalid_float_values PASSED [ 32%]
2025-07-16T01:36:03.1842202Z tests/test_core_coverage.py::TestBookTriageCoverage::test_load_csv_with_nan_values PASSED [ 32%]
2025-07-16T01:36:03.1886685Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_no_title_no_isbn PASSED [ 33%]
2025-07-16T01:36:03.1931194Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_invalid_isbn PASSED [ 33%]
2025-07-16T01:36:03.1983662Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_json_parsing_error PASSED [ 34%]
2025-07-16T01:36:03.2028239Z tests/test_core_coverage.py::TestBookTriageCoverage::test_calculate_utilities_with_none_values PASSED [ 34%]
2025-07-16T01:36:03.2072184Z tests/test_core_coverage.py::TestBookTriageCoverage::test_make_decision_with_verification_calculation PASSED [ 35%]
2025-07-16T01:36:03.2118242Z tests/test_core_coverage.py::TestBookTriageCoverage::test_save_csv_with_no_records PASSED [ 35%]
2025-07-16T01:36:03.2129852Z tests/test_core_simple.py::TestBookRecord::test_book_record_creation PASSED [ 36%]
2025-07-16T01:36:03.2141559Z tests/test_core_simple.py::TestBookRecord::test_book_record_with_values PASSED [ 36%]
2025-07-16T01:36:03.2154460Z tests/test_core_simple.py::TestBookTriage::test_book_triage_initialization PASSED [ 37%]
2025-07-16T01:36:03.2167584Z tests/test_core_simple.py::TestBookTriage::test_calculate_utilities_simple PASSED [ 37%]
2025-07-16T01:36:03.2181073Z tests/test_core_simple.py::TestBookTriage::test_make_decision_simple PASSED [ 38%]
2025-07-16T01:36:03.2194223Z tests/test_core_simple.py::TestDecision::test_decision_values PASSED     [ 38%]
2025-07-16T01:36:03.2548957Z tests/test_frontend_layout.py::TestFrontendLayout::test_modern_css_styling_present PASSED [ 39%]
2025-07-16T01:36:03.2909632Z tests/test_frontend_layout.py::TestFrontendLayout::test_control_panel_styling PASSED [ 39%]
2025-07-16T01:36:03.3245154Z tests/test_frontend_layout.py::TestFrontendLayout::test_table_container_styling PASSED [ 40%]
2025-07-16T01:36:03.3623189Z tests/test_frontend_layout.py::TestFrontendLayout::test_upload_section_styling PASSED [ 40%]
2025-07-16T01:36:03.3992572Z tests/test_frontend_layout.py::TestFrontendLayout::test_button_styling PASSED [ 41%]
2025-07-16T01:36:03.4343096Z tests/test_frontend_layout.py::TestFrontendLayout::test_form_layout PASSED [ 41%]
2025-07-16T01:36:03.4701101Z tests/test_frontend_layout.py::TestFrontendLayout::test_input_field_styling PASSED [ 42%]
2025-07-16T01:36:03.5053941Z tests/test_frontend_layout.py::TestFrontendLayout::test_responsive_table_headers PASSED [ 43%]
2025-07-16T01:36:03.5413496Z tests/test_frontend_layout.py::TestFrontendLayout::test_decision_row_colors PASSED [ 43%]
2025-07-16T01:36:03.5821166Z tests/test_frontend_layout.py::TestFrontendLayout::test_main_content_wrapper PASSED [ 44%]
2025-07-16T01:36:03.6170387Z tests/test_frontend_layout.py::TestFrontendLayout::test_hover_effects PASSED [ 44%]
2025-07-16T01:36:03.6489589Z tests/test_frontend_layout.py::TestTableFunctionality::test_table_renders_with_data PASSED [ 45%]
2025-07-16T01:36:03.6822730Z tests/test_frontend_layout.py::TestTableFunctionality::test_table_has_all_columns PASSED [ 45%]
2025-07-16T01:36:03.7138528Z tests/test_frontend_layout.py::TestTableFunctionality::test_input_field_classes PASSED [ 46%]
2025-07-16T01:36:03.7476744Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_viewport_meta_tag PASSED [ 46%]
2025-07-16T01:36:03.7811130Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_semantic_html_structure PASSED [ 47%]
2025-07-16T01:36:03.8148392Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_css_organization PASSED [ 47%]
2025-07-16T01:36:03.8741930Z tests/test_indicators_implementation.py::test_v_calculation_from_prices PASSED [ 48%]
2025-07-16T01:36:03.8757066Z tests/test_indicators_implementation.py::test_utility_calculations PASSED [ 48%]
2025-07-16T01:36:03.8773528Z tests/test_indicators_implementation.py::test_decision_making PASSED     [ 49%]
2025-07-16T01:36:03.8786330Z tests/test_indicators_implementation.py::test_human_vs_auto_indicators PASSED [ 49%]
2025-07-16T01:36:03.8808321Z tests/test_indicators_implementation.py::test_scan_cost_impact PASSED    [ 50%]
2025-07-16T01:36:03.9136068Z tests/test_layout_basic.py::TestBasicLayout::test_homepage_loads PASSED  [ 50%]
2025-07-16T01:36:03.9448954Z tests/test_layout_basic.py::TestBasicLayout::test_modern_css_included PASSED [ 51%]
2025-07-16T01:36:04.1059762Z tests/test_layout_basic.py::TestBasicLayout::test_sticky_header_css FAILED [ 51%]
2025-07-16T01:36:04.1448354Z tests/test_layout_basic.py::TestBasicLayout::test_table_container_css FAILED [ 52%]
2025-07-16T01:36:04.1770006Z tests/test_layout_basic.py::TestBasicLayout::test_form_styling PASSED    [ 52%]
2025-07-16T01:36:04.2085863Z tests/test_layout_basic.py::TestBasicLayout::test_button_styling PASSED  [ 53%]
2025-07-16T01:36:04.2396763Z tests/test_layout_basic.py::TestBasicLayout::test_upload_section_present PASSED [ 53%]
2025-07-16T01:36:04.2714364Z tests/test_layout_basic.py::TestBasicLayout::test_manual_input_section PASSED [ 54%]
2025-07-16T01:36:04.3025562Z tests/test_layout_basic.py::TestBasicLayout::test_table_headers_present PASSED [ 54%]
2025-07-16T01:36:04.3336230Z tests/test_layout_basic.py::TestLayoutComponents::test_control_panel_structure PASSED [ 55%]
2025-07-16T01:36:04.3662192Z tests/test_layout_basic.py::TestLayoutComponents::test_main_content_wrapper PASSED [ 55%]
2025-07-16T01:36:04.3983270Z tests/test_layout_basic.py::TestLayoutComponents::test_css_organization PASSED [ 56%]
2025-07-16T01:36:04.4294392Z tests/test_layout_basic.py::TestLayoutComponents::test_decision_colors_css PASSED [ 56%]
2025-07-16T01:36:04.4614521Z tests/test_layout_basic.py::TestAPIEndpoints::test_books_endpoint PASSED [ 57%]
2025-07-16T01:36:04.4945799Z tests/test_layout_basic.py::TestAPIEndpoints::test_health_endpoint PASSED [ 58%]
2025-07-16T01:36:04.4971422Z tests/test_main.py::TestMainModule::test_main_no_args_with_existing_csv PASSED [ 58%]
2025-07-16T01:36:04.4994798Z tests/test_main.py::TestMainModule::test_main_no_args_creates_new_csv PASSED [ 59%]
2025-07-16T01:36:04.5015204Z tests/test_main.py::TestMainModule::test_main_with_args PASSED           [ 59%]
2025-07-16T01:36:04.5036139Z tests/test_main.py::TestMainModule::test_main_finds_alternative_csv_paths PASSED [ 60%]
2025-07-16T01:36:04.5055080Z tests/test_main.py::TestMainModule::test_main_module_entry_point PASSED  [ 60%]
2025-07-16T01:36:04.5338111Z tests/test_scroll_preservation.py::TestScrollPreservation::test_loadbooks_accepts_preserve_scroll_parameter PASSED [ 61%]
2025-07-16T01:36:04.5610557Z tests/test_scroll_preservation.py::TestScrollPreservation::test_savebook_calls_loadbooks_with_true PASSED [ 61%]
2025-07-16T01:36:04.5879621Z tests/test_scroll_preservation.py::TestScrollPreservation::test_scroll_preservation_logic_exists PASSED [ 62%]
2025-07-16T01:36:04.6148630Z tests/test_scroll_preservation.py::TestScrollPreservation::test_scroll_container_selector PASSED [ 62%]
2025-07-16T01:36:04.6435392Z tests/test_scroll_preservation.py::TestScrollPreservation::test_manual_submit_calls_loadbooks_with_target PASSED [ 63%]
2025-07-16T01:36:04.6748623Z tests/test_scroll_preservation.py::TestScrollPreservation::test_integration_save_preserves_scroll PASSED [ 63%]
2025-07-16T01:36:04.6772972Z tests/test_security.py::TestGetCurrentUser::test_valid_credentials_default PASSED [ 64%]
2025-07-16T01:36:04.6797008Z tests/test_security.py::TestGetCurrentUser::test_valid_credentials_custom PASSED [ 64%]
2025-07-16T01:36:04.6821452Z tests/test_security.py::TestGetCurrentUser::test_invalid_username PASSED [ 65%]
2025-07-16T01:36:04.6844335Z tests/test_security.py::TestGetCurrentUser::test_invalid_password PASSED [ 65%]
2025-07-16T01:36:04.6867164Z tests/test_security.py::TestGetCurrentUser::test_both_invalid PASSED     [ 66%]
2025-07-16T01:36:04.6890359Z tests/test_security.py::TestGetCurrentUser::test_empty_credentials PASSED [ 66%]
2025-07-16T01:36:04.6911497Z tests/test_security.py::TestAdminRequired::test_admin_required_with_user PASSED [ 67%]
2025-07-16T01:36:04.6929714Z tests/test_security.py::TestAdminRequired::test_admin_required_without_user PASSED [ 67%]
2025-07-16T01:36:04.6947750Z tests/test_security.py::TestAdminRequired::test_admin_required_with_none_user PASSED [ 68%]
2025-07-16T01:36:04.6967319Z tests/test_security.py::TestValidateFileUpload::test_valid_small_image PASSED [ 68%]
2025-07-16T01:36:04.6988229Z tests/test_security.py::TestValidateFileUpload::test_file_too_large PASSED [ 69%]
2025-07-16T01:36:04.7090249Z tests/test_security.py::TestValidateFileUpload::test_non_image_file FAILED [ 69%]
2025-07-16T01:36:04.7106176Z tests/test_security.py::TestValidateFileUpload::test_magic_exception PASSED [ 70%]
2025-07-16T01:36:04.7129196Z tests/test_security.py::TestValidateFileUpload::test_different_image_types PASSED [ 70%]
2025-07-16T01:36:04.7148583Z tests/test_security.py::TestSanitizeImage::test_sanitize_valid_rgb_image PASSED [ 71%]
2025-07-16T01:36:04.7170420Z tests/test_security.py::TestSanitizeImage::test_sanitize_rgba_image PASSED [ 72%]
2025-07-16T01:36:04.7190261Z tests/test_security.py::TestSanitizeImage::test_sanitize_palette_image PASSED [ 72%]
2025-07-16T01:36:04.7876452Z tests/test_security.py::TestSanitizeImage::test_sanitize_invalid_image_data PASSED [ 73%]
2025-07-16T01:36:04.7891405Z tests/test_security.py::TestSanitizeImage::test_sanitize_corrupted_image PASSED [ 73%]
2025-07-16T01:36:04.7912516Z tests/test_security.py::TestSanitizeImage::test_sanitize_quality_setting PASSED [ 74%]
2025-07-16T01:36:04.7936811Z tests/test_security.py::TestSecurityIntegration::test_full_file_security_pipeline PASSED [ 74%]
2025-07-16T01:36:04.8309643Z tests/test_sticky_form.py::test_sticky_form_css_present FAILED           [ 75%]
2025-07-16T01:36:04.8614106Z tests/test_sticky_form.py::test_sticky_form_html_structure PASSED        [ 75%]
2025-07-16T01:36:04.8967982Z tests/test_sticky_form.py::test_body_padding_adjustment FAILED           [ 76%]
2025-07-16T01:36:04.9277415Z tests/test_sticky_form.py::test_books_database_outside_control_panel PASSED [ 76%]
2025-07-16T01:36:04.9592960Z tests/test_sticky_form.py::test_toast_notifications_position PASSED      [ 77%]
2025-07-16T01:36:04.9898298Z tests/test_sticky_form.py::test_form_functionality_still_works PASSED    [ 77%]
2025-07-16T01:36:05.0267044Z tests/test_sticky_table_headers.py::test_sticky_table_headers_css_present FAILED [ 78%]
2025-07-16T01:36:05.0621344Z tests/test_sticky_table_headers.py::test_table_header_structure FAILED   [ 78%]
2025-07-16T01:36:05.1104291Z tests/test_sticky_table_headers.py::test_table_header_css_specificity FAILED [ 79%]
2025-07-16T01:36:05.1549086Z tests/test_sticky_table_headers.py::test_sticky_header_positioning FAILED [ 79%]
2025-07-16T01:36:05.1901930Z tests/test_sticky_table_headers.py::test_z_index_layering FAILED         [ 80%]
2025-07-16T01:36:05.2252570Z tests/test_sticky_table_headers.py::test_table_headers_visual_separation FAILED [ 80%]
2025-07-16T01:36:05.2556107Z tests/test_sticky_table_headers.py::test_books_database_section_outside_control_panel PASSED [ 81%]
2025-07-16T01:36:05.2908918Z tests/test_sticky_table_headers.py::test_complete_sticky_ui_integration FAILED [ 81%]
2025-07-16T01:36:06.8331002Z tests/test_verified_display_logic.py::test_verified_column_uses_strict_equality PASSED [ 82%]
2025-07-16T01:36:06.8354460Z tests/test_vision.py::TestVisionProcessor::test_vision_processor_initialization_with_openai PASSED [ 82%]
2025-07-16T01:36:06.8367151Z tests/test_vision.py::TestVisionProcessor::test_vision_processor_initialization_without_openai PASSED [ 83%]
2025-07-16T01:36:06.8379601Z tests/test_vision.py::TestVisionProcessor::test_generate_id PASSED       [ 83%]
2025-07-16T01:36:06.8435127Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_openai_success PASSED [ 84%]
2025-07-16T01:36:06.8466613Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_fallback_to_tesseract PASSED [ 84%]
2025-07-16T01:36:06.8480085Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_nonexistent_file PASSED [ 85%]
2025-07-16T01:36:06.8502956Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_success PASSED [ 86%]
2025-07-16T01:36:06.8537913Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_empty_result PASSED [ 86%]
2025-07-16T01:36:06.8560985Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_error PASSED [ 87%]
2025-07-16T01:36:06.8878398Z tests/test_vision.py::TestVisionProcessor::test_extract_with_openai_vision_no_content PASSED [ 87%]
2025-07-16T01:36:06.8909769Z tests/test_vision.py::TestVisionProcessor::test_extract_with_openai_vision_no_client PASSED [ 88%]
2025-07-16T01:36:06.8959281Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_from_image_success PASSED [ 88%]
2025-07-16T01:36:06.8981133Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_tesseract_fallback PASSED [ 89%]
2025-07-16T01:36:06.8994751Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_nonexistent_file PASSED [ 89%]
2025-07-16T01:36:06.9015778Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_no_isbn_found PASSED [ 90%]
2025-07-16T01:36:06.9045578Z tests/test_vision.py::TestVisionProcessor::test_image_format_conversion PASSED [ 90%]
2025-07-16T01:36:06.9069949Z tests/test_vision.py::TestVisionProcessorIntegration::test_processor_with_real_image_mock_ocr PASSED [ 91%]
2025-07-16T01:36:06.9088784Z tests/test_vision_fixed.py::TestVisionProcessor::test_vision_processor_initialization_with_openai PASSED [ 91%]
2025-07-16T01:36:06.9101270Z tests/test_vision_fixed.py::TestVisionProcessor::test_vision_processor_initialization_without_openai PASSED [ 92%]
2025-07-16T01:36:06.9113606Z tests/test_vision_fixed.py::TestVisionProcessor::test_generate_id PASSED [ 92%]
2025-07-16T01:36:06.9126728Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_from_image_nonexistent_file PASSED [ 93%]
2025-07-16T01:36:06.9169293Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_with_openai_vision_success PASSED [ 93%]
2025-07-16T01:36:06.9198671Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_fallback_to_tesseract PASSED [ 94%]
2025-07-16T01:36:06.9220410Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_success PASSED [ 94%]
2025-07-16T01:36:06.9242477Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_empty_result PASSED [ 95%]
2025-07-16T01:36:06.9264967Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_error PASSED [ 95%]
2025-07-16T01:36:06.9307930Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_openai_vision_no_content PASSED [ 96%]
2025-07-16T01:36:06.9325326Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_openai_vision_no_client PASSED [ 96%]
2025-07-16T01:36:06.9367986Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_from_image_success PASSED [ 97%]
2025-07-16T01:36:06.9389327Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_tesseract_fallback PASSED [ 97%]
2025-07-16T01:36:06.9403260Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_nonexistent_file PASSED [ 98%]
2025-07-16T01:36:06.9425762Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_no_isbn_found PASSED [ 98%]
2025-07-16T01:36:06.9438275Z tests/test_vision_fixed.py::TestVisionProcessor::test_image_format_conversion PASSED [ 99%]
2025-07-16T01:36:06.9483143Z tests/test_vision_fixed.py::TestVisionProcessorIntegration::test_processor_with_real_image_mock_ocr PASSED [100%]
2025-07-16T01:36:06.9483892Z 
2025-07-16T01:36:06.9484088Z =================================== FAILURES ===================================
2025-07-16T01:36:06.9484724Z ____________________ TestBasicLayout.test_sticky_header_css ____________________
2025-07-16T01:36:06.9485396Z tests/test_layout_basic.py:57: in test_sticky_header_css
2025-07-16T01:36:06.9485951Z     assert "position: fixed" in content
2025-07-16T01:36:06.9550813Z E   assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9596823Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9597293Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmphsq_ajhz.csv
2025-07-16T01:36:06.9597743Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9598169Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9598643Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9599110Z ___________________ TestBasicLayout.test_table_container_css ___________________
2025-07-16T01:36:06.9599516Z tests/test_layout_basic.py:67: in test_table_container_css
2025-07-16T01:36:06.9599842Z     assert "overflow-x: auto" in content
2025-07-16T01:36:06.9645133Z E   assert 'overflow-x: auto' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9687795Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9688517Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmpe8ertcq9.csv
2025-07-16T01:36:06.9689268Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9689950Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9690857Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9691678Z __________________ TestValidateFileUpload.test_non_image_file __________________
2025-07-16T01:36:06.9692333Z tests/test_security.py:160: in test_non_image_file
2025-07-16T01:36:06.9693068Z     assert "File must be an image" in exc_info.value.detail
2025-07-16T01:36:06.9693747Z E   AssertionError: assert 'File must be an image' in 'Invalid file format'
2025-07-16T01:36:06.9694637Z E    +  where 'Invalid file format' = HTTPException(status_code=400, detail='Invalid file format').detail
2025-07-16T01:36:06.9695969Z E    +    where HTTPException(status_code=400, detail='Invalid file format') = <ExceptionInfo HTTPException(status_code=400, detail='Invalid file format') tblen=2>.value
2025-07-16T01:36:06.9697170Z _________________________ test_sticky_form_css_present _________________________
2025-07-16T01:36:06.9697854Z tests/test_sticky_form.py:43: in test_sticky_form_css_present
2025-07-16T01:36:06.9698414Z     assert "position: fixed" in html_content
2025-07-16T01:36:06.9758551Z E   assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9800237Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9800947Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmppje4m3ta.csv
2025-07-16T01:36:06.9801427Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9801841Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9802308Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9802755Z _________________________ test_body_padding_adjustment _________________________
2025-07-16T01:36:06.9803142Z tests/test_sticky_form.py:78: in test_body_padding_adjustment
2025-07-16T01:36:06.9803486Z     assert "padding-top: 280px" in html_content
2025-07-16T01:36:06.9846046Z E   assert 'padding-top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9887888Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9888328Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmphaglra17.csv
2025-07-16T01:36:06.9888753Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9889162Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9889740Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9890200Z ____________________ test_sticky_table_headers_css_present _____________________
2025-07-16T01:36:06.9890762Z tests/test_sticky_table_headers.py:44: in test_sticky_table_headers_css_present
2025-07-16T01:36:06.9891254Z     assert "top: 280px" in html_content  # Should align with sticky form height
2025-07-16T01:36:06.9891602Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T01:36:06.9933934Z E   assert 'top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:06.9975853Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:06.9976296Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmps4z3zz_v.csv
2025-07-16T01:36:06.9976714Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:06.9977111Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:06.9977576Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:06.9978018Z _________________________ test_table_header_structure __________________________
2025-07-16T01:36:06.9978428Z tests/test_sticky_table_headers.py:84: in test_table_header_structure
2025-07-16T01:36:06.9978773Z     assert header in html_content
2025-07-16T01:36:07.0021161Z E   assert '<th>V</th>' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0062875Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0063311Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpgz9kc788.csv
2025-07-16T01:36:07.0063726Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0064129Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0064585Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0065035Z ______________________ test_table_header_css_specificity _______________________
2025-07-16T01:36:07.0065464Z tests/test_sticky_table_headers.py:96: in test_table_header_css_specificity
2025-07-16T01:36:07.0065865Z     assert 'background-color: #f2f2f2' in html_content
2025-07-16T01:36:07.0108721Z E   assert 'background-color: #f2f2f2' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0150733Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0151171Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpdlpwy1g5.csv
2025-07-16T01:36:07.0151592Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0151997Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0152452Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0152897Z ________________________ test_sticky_header_positioning ________________________
2025-07-16T01:36:07.0153321Z tests/test_sticky_table_headers.py:113: in test_sticky_header_positioning
2025-07-16T01:36:07.0153721Z     assert 'top: 0' in control_panel_section
2025-07-16T01:36:07.0154808Z E   AssertionError: assert 'top: 0' in '#control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-a'
2025-07-16T01:36:07.0155929Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0156356Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp0kegqkjl.csv
2025-07-16T01:36:07.0156773Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0157178Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0157624Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0158056Z ____________________________ test_z_index_layering _____________________________
2025-07-16T01:36:07.0158443Z tests/test_sticky_table_headers.py:129: in test_z_index_layering
2025-07-16T01:36:07.0158786Z     assert 'z-index: 1000' in html_content
2025-07-16T01:36:07.0201606Z E   assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0243530Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0243964Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp7fedgq3h.csv
2025-07-16T01:36:07.0244382Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0244787Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0245245Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0245689Z _____________________ test_table_headers_visual_separation _____________________
2025-07-16T01:36:07.0246138Z tests/test_sticky_table_headers.py:147: in test_table_headers_visual_separation
2025-07-16T01:36:07.0246712Z     assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in html_content
2025-07-16T01:36:07.0289477Z E   assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0331944Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0332397Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp2smwis7i.csv
2025-07-16T01:36:07.0332819Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0333223Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0333679Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0334131Z _____________________ test_complete_sticky_ui_integration ______________________
2025-07-16T01:36:07.0334574Z tests/test_sticky_table_headers.py:186: in test_complete_sticky_ui_integration
2025-07-16T01:36:07.0334995Z     assert 'z-index: 1000' in html_content  # Control panel
2025-07-16T01:36:07.0335297Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T01:36:07.0377846Z E   assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0419645Z ------------------------------ Captured log setup ------------------------------
2025-07-16T01:36:07.0420082Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp7ids45za.csv
2025-07-16T01:36:07.0420701Z ------------------------------ Captured log call -------------------------------
2025-07-16T01:36:07.0421114Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T01:36:07.0421570Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T01:36:07.0421984Z =========================== short test summary info ============================
2025-07-16T01:36:07.0464625Z FAILED tests/test_layout_basic.py::TestBasicLayout::test_sticky_header_css - assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0548913Z FAILED tests/test_layout_basic.py::TestBasicLayout::test_table_container_css - assert 'overflow-x: auto' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0592392Z FAILED tests/test_security.py::TestValidateFileUpload::test_non_image_file - AssertionError: assert 'File must be an image' in 'Invalid file format'
2025-07-16T01:36:07.0593162Z  +  where 'Invalid file format' = HTTPException(status_code=400, detail='Invalid file format').detail
2025-07-16T01:36:07.0593935Z  +    where HTTPException(status_code=400, detail='Invalid file format') = <ExceptionInfo HTTPException(status_code=400, detail='Invalid file format') tblen=2>.value
2025-07-16T01:36:07.0637692Z FAILED tests/test_sticky_form.py::test_sticky_form_css_present - assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0732932Z FAILED tests/test_sticky_form.py::test_body_padding_adjustment - assert 'padding-top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0817387Z FAILED tests/test_sticky_table_headers.py::test_sticky_table_headers_css_present - assert 'top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0902263Z FAILED tests/test_sticky_table_headers.py::test_table_header_structure - assert '<th>V</th>' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.0986345Z FAILED tests/test_sticky_table_headers.py::test_table_header_css_specificity - assert 'background-color: #f2f2f2' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.1029534Z FAILED tests/test_sticky_table_headers.py::test_sticky_header_positioning - AssertionError: assert 'top: 0' in '#control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-a'
2025-07-16T01:36:07.1073339Z FAILED tests/test_sticky_table_headers.py::test_z_index_layering - assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.1157839Z FAILED tests/test_sticky_table_headers.py::test_table_headers_visual_separation - assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.1789751Z FAILED tests/test_sticky_table_headers.py::test_complete_sticky_ui_integration - assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T01:36:07.1831960Z ======================== 12 failed, 181 passed in 9.27s ========================
2025-07-16T01:36:07.3800066Z ##[error]Process completed with exit code 1.
2025-07-16T01:36:07.3906726Z ##[group]Run codecov/codecov-action@v3
2025-07-16T01:36:07.3906994Z with:
2025-07-16T01:36:07.3907171Z   file: ./coverage.xml
2025-07-16T01:36:07.3907370Z   flags: unittests
2025-07-16T01:36:07.3907559Z   name: codecov-umbrella
2025-07-16T01:36:07.3907764Z   fail_ci_if_error: false
2025-07-16T01:36:07.3907963Z   verbose: true
2025-07-16T01:36:07.3908143Z env:
2025-07-16T01:36:07.3908382Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:36:07.3908797Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T01:36:07.3909193Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:36:07.3909546Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:36:07.3909902Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:36:07.3910432Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T01:36:07.3910923Z   BOOK_USER: testuser
2025-07-16T01:36:07.3911159Z   BOOK_PASS: testpass
2025-07-16T01:36:07.3911361Z   OPENAI_API_KEY: test-key
2025-07-16T01:36:07.3911880Z   CODECOV_TOKEN: ***
2025-07-16T01:36:07.3912084Z ##[endgroup]
2025-07-16T01:36:07.5004064Z {
2025-07-16T01:36:07.5004466Z   execArgs: [
2025-07-16T01:36:07.5004810Z     '-n',
2025-07-16T01:36:07.5005147Z     'codecov-umbrella',
2025-07-16T01:36:07.5005520Z     '-Q',
2025-07-16T01:36:07.5005857Z     'github-action-3.1.6',
2025-07-16T01:36:07.5006250Z     '-f',
2025-07-16T01:36:07.5006563Z     './coverage.xml',
2025-07-16T01:36:07.5006896Z     '-F',
2025-07-16T01:36:07.5007198Z     'unittests',
2025-07-16T01:36:07.5007520Z     '-v'
2025-07-16T01:36:07.5007801Z   ]
2025-07-16T01:36:07.5008087Z }
2025-07-16T01:36:07.5009605Z ==> linux OS detected
2025-07-16T01:36:07.9313237Z https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
2025-07-16T01:36:07.9497041Z Received SHA256SUM b37359013b48fbc3b0790d59fc474a52a260fb96e28e1b2c2ae001dc9b9cc996  codecov
2025-07-16T01:36:07.9885205Z Received SHA256SUM signature -----BEGIN PGP SIGNATURE-----
2025-07-16T01:36:07.9885703Z 
2025-07-16T01:36:07.9886073Z iQIzBAABCgAdFiEEJwNOf9uFDgu8LGL/gGuyiu13mGkFAmas/x0ACgkQgGuyiu13
2025-07-16T01:36:07.9886949Z mGnuYxAAhL4nufMHTUEJVbG790Tkshg/NwRAQ1I2FmpPOy1HwZnlX0arTb2Fk6r5
2025-07-16T01:36:07.9898701Z jTUIVHTARwbsQc/gEnaety1RULuMhyn4TlkkTm4rrCENlMvrbkmrT55lbLzx7FzG
2025-07-16T01:36:07.9899674Z qMS1oEUUZaRDNT/AqrhtUnCtq8UsR4eBgdgKgkxsgSUKjfkumYqfsBp3QBerLcqB
2025-07-16T01:36:07.9900806Z xeXP2y9qxZ95rVVepMWY+7pdywAhUAyKgA6sO6ejPdwSybSHZeySAFS6MGDhRhcM
2025-07-16T01:36:07.9901722Z +WTr/2WhRjjOfmJGODTDFmMjUrtnlU5FSqhA8zJ2zv7ZInw7yzelA05tEVz0HT/Q
2025-07-16T01:36:07.9902647Z HnIvyJZzXtX81hHDgBzXG7Vw8ElQMTyAiySpKF4KcMWaTc+mIm5LG+yhgJXhUqFL
2025-07-16T01:36:07.9903567Z R1NXxuyh0050+T7zhsFLadw7706Q8QCQKDpBDYgRbjUr+rkRgZBGLcWcoFiqAzNF
2025-07-16T01:36:07.9904480Z 7lx6W9lxF9M97wKNJezhWvvzR9kI04l676BvVLTX9yPG6MUakLqKgsbR0NuOz7xA
2025-07-16T01:36:07.9905396Z yCDKCEXfjXr53h1TP3oqmC5wguSurjmIOcVCK77iiv1Sy63RnK+SUXAyIeNsJwME
2025-07-16T01:36:07.9906341Z KdfVS6l1enI4s35IQzmmd0QxhfiHFTUYHuFPgE78z2Ik93KcSkVc7AZg2C76PCfZ
2025-07-16T01:36:07.9907086Z fWy10hSbRM0BS5hjauyrSrA4++8ku/KoJhXwkGu49N8GylTcySk=
2025-07-16T01:36:07.9907614Z =n6lq
2025-07-16T01:36:07.9907937Z -----END PGP SIGNATURE-----
2025-07-16T01:36:07.9908198Z 
2025-07-16T01:36:08.0037403Z ==> SHASUM file signed by key id 806bb28aed779869
2025-07-16T01:36:08.0808501Z ==> Uploader SHASUM verified (b37359013b48fbc3b0790d59fc474a52a260fb96e28e1b2c2ae001dc9b9cc996  codecov)
2025-07-16T01:36:08.0809345Z ==> Running version latest
2025-07-16T01:36:08.1871942Z ==> Running version v0.8.0
2025-07-16T01:36:08.1888697Z [command]/home/runner/work/_actions/codecov/codecov-action/v3/dist/codecov -n codecov-umbrella -Q github-action-3.1.6 -f ./coverage.xml -F unittests -v
2025-07-16T01:36:08.3965401Z [2025-07-16T01:36:08.395Z] ['verbose'] Start of uploader: 1752629768395...
2025-07-16T01:36:08.3969433Z [2025-07-16T01:36:08.396Z] ['info'] 
2025-07-16T01:36:08.3969961Z      _____          _
2025-07-16T01:36:08.3971002Z     / ____|        | |
2025-07-16T01:36:08.3971314Z    | |     ___   __| | ___  ___ _____   __
2025-07-16T01:36:08.3971667Z    | |    / _ \ / _` |/ _ \/ __/ _ \ \ / /
2025-07-16T01:36:08.3972004Z    | |___| (_) | (_| |  __/ (_| (_) \ V /
2025-07-16T01:36:08.3972343Z     \_____\___/ \__,_|\___|\___\___/ \_/
2025-07-16T01:36:08.3972568Z 
2025-07-16T01:36:08.3972698Z   Codecov report uploader 0.8.0
2025-07-16T01:36:08.4024139Z [2025-07-16T01:36:08.402Z] ['info'] => Project root located at: /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T01:36:08.4028218Z [2025-07-16T01:36:08.402Z] ['info'] ->  Token found by environment variables
2025-07-16T01:36:08.4036086Z [2025-07-16T01:36:08.403Z] ['verbose'] Start of network processing...
2025-07-16T01:36:08.4036996Z [2025-07-16T01:36:08.403Z] ['verbose'] Searching for files in /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T01:36:08.5042021Z [2025-07-16T01:36:08.503Z] ['verbose'] Skipping coveragepy, files already specified
2025-07-16T01:36:08.5042864Z [2025-07-16T01:36:08.503Z] ['info'] Searching for coverage files...
2025-07-16T01:36:08.5426220Z [2025-07-16T01:36:08.542Z] ['verbose'] Preparing to clean the following coverage paths: ./coverage.xml
2025-07-16T01:36:08.5429607Z [2025-07-16T01:36:08.542Z] ['error'] None of the following appear to exist as files: ./coverage.xml
2025-07-16T01:36:08.5431074Z [2025-07-16T01:36:08.542Z] ['error'] There was an error running the uploader: Error while cleaning paths. No paths matched existing files!
2025-07-16T01:36:08.5433289Z [2025-07-16T01:36:08.542Z] ['verbose'] The error stack is: Error: Error while cleaning paths. No paths matched existing files!
2025-07-16T01:36:08.5434349Z     at cleanCoverageFilePaths (/snapshot/repo/dist/src/helpers/files.js)
2025-07-16T01:36:08.5434997Z     at main (/snapshot/repo/dist/src/index.js)
2025-07-16T01:36:08.5435641Z [2025-07-16T01:36:08.543Z] ['verbose'] End of uploader: 148 milliseconds
2025-07-16T01:36:08.5436315Z [2025-07-16T01:36:08.543Z] ['info'] Codecov will exit with status code 0. If you are expecting a non-zero exit code, please pass in the `-Z` flag
2025-07-16T01:36:08.5729461Z ##[group]Run actions/upload-artifact@v4
2025-07-16T01:36:08.5729745Z with:
2025-07-16T01:36:08.5729941Z   name: test-failure-artifacts
2025-07-16T01:36:08.5730194Z   path: coverage.xml
*.log
htmlcov/

2025-07-16T01:36:08.5730456Z   if-no-files-found: warn
2025-07-16T01:36:08.5731128Z   compression-level: 6
2025-07-16T01:36:08.5731350Z   overwrite: false
2025-07-16T01:36:08.5731570Z   include-hidden-files: false
2025-07-16T01:36:08.5731799Z env:
2025-07-16T01:36:08.5732047Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:36:08.5732480Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T01:36:08.5732890Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:36:08.5733271Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:36:08.5733634Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T01:36:08.5734032Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T01:36:08.5734345Z   BOOK_USER: testuser
2025-07-16T01:36:08.5734545Z   BOOK_PASS: testpass
2025-07-16T01:36:08.5734756Z   OPENAI_API_KEY: test-key
2025-07-16T01:36:08.5734981Z ##[endgroup]
2025-07-16T01:36:08.7900286Z ##[warning]No files were found with the provided path: coverage.xml
*.log
htmlcov/. No artifacts will be uploaded.
2025-07-16T01:36:08.8011251Z Post job cleanup.
2025-07-16T01:36:08.8952866Z [command]/usr/bin/git version
2025-07-16T01:36:08.8989616Z git version 2.50.1
2025-07-16T01:36:08.9035349Z Temporarily overriding HOME='/home/runner/work/_temp/d47f892f-7a84-4934-b452-4df0d69151cb' before making global git config changes
2025-07-16T01:36:08.9036660Z Adding repository directory to the temporary git global config as a safe directory
2025-07-16T01:36:08.9051935Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T01:36:08.9087015Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-07-16T01:36:08.9119416Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-07-16T01:36:08.9345773Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-07-16T01:36:08.9366733Z http.https://github.com/.extraheader
2025-07-16T01:36:08.9379575Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2025-07-16T01:36:08.9410324Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-07-16T01:36:08.9752921Z Cleaning up orphan processes
