2025-07-16T00:19:53.8094902Z ##[group]Run python -m pytest tests/ -v --cov=book_triage --cov-report=term-missing
2025-07-16T00:19:53.8095479Z [36;1mpython -m pytest tests/ -v --cov=book_triage --cov-report=term-missing[0m
2025-07-16T00:19:53.8125934Z shell: /usr/bin/bash -e {0}
2025-07-16T00:19:53.8126173Z env:
2025-07-16T00:19:53.8126422Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:53.8126865Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T00:19:53.8127259Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:53.8127606Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:53.8127937Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:53.8128278Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T00:19:53.8128569Z ##[endgroup]
2025-07-16T00:19:54.4940778Z ============================= test session starts ==============================
2025-07-16T00:19:54.4942169Z platform linux -- Python 3.12.11, pytest-8.4.1, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.12.11/x64/bin/python
2025-07-16T00:19:54.4943246Z cachedir: .pytest_cache
2025-07-16T00:19:54.4943853Z rootdir: /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T00:19:54.4944525Z configfile: pyproject.toml
2025-07-16T00:19:54.4945404Z plugins: cov-6.2.1, asyncio-1.0.0, anyio-4.9.0
2025-07-16T00:19:54.4946711Z asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
2025-07-16T00:19:58.9300991Z collecting ... collected 193 items
2025-07-16T00:19:58.9301430Z 
2025-07-16T00:19:59.0110789Z tests/test_api.py::TestAPIEndpoints::test_root_endpoint PASSED           [  0%]
2025-07-16T00:19:59.0164409Z tests/test_api.py::TestAPIEndpoints::test_health_endpoint PASSED         [  1%]
2025-07-16T00:19:59.0210184Z tests/test_api.py::TestAPIEndpoints::test_get_books_empty PASSED         [  1%]
2025-07-16T00:19:59.0311372Z tests/test_api.py::TestAPIEndpoints::test_get_books_with_data PASSED     [  2%]
2025-07-16T00:19:59.0615965Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_success PASSED    [  2%]
2025-07-16T00:19:59.0660207Z tests/test_api.py::TestAPIEndpoints::test_scan_books_unauthorized PASSED [  3%]
2025-07-16T00:19:59.0702038Z tests/test_api.py::TestAPIEndpoints::test_rate_limiting_books_endpoint PASSED [  3%]
2025-07-16T00:19:59.1020082Z tests/test_api.py::TestAPIEndpoints::test_file_upload_size_limit PASSED  [  4%]
2025-07-16T00:19:59.1065616Z tests/test_api.py::TestAPIEndpoints::test_security_headers_in_response PASSED [  4%]
2025-07-16T00:19:59.1151751Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_no_title_extracted PASSED [  5%]
2025-07-16T00:19:59.1235669Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_vision_processor_exception PASSED [  5%]
2025-07-16T00:19:59.1281424Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_no_file PASSED    [  6%]
2025-07-16T00:19:59.1338788Z tests/test_api.py::TestAPIEndpoints::test_scan_books_success PASSED      [  6%]
2025-07-16T00:19:59.1393985Z tests/test_api.py::TestAPIEndpoints::test_scan_books_exception PASSED    [  7%]
2025-07-16T00:19:59.1445339Z tests/test_api.py::TestAPIEndpoints::test_rescan_title_record_not_found PASSED [  7%]
2025-07-16T00:19:59.1516294Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_success PASSED [  8%]
2025-07-16T00:19:59.1559898Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_missing_isbn PASSED [  8%]
2025-07-16T00:19:59.1611930Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_invalid_isbn PASSED [  9%]
2025-07-16T00:19:59.1777434Z tests/test_api.py::TestAPIEndpoints::test_rescan_title_preserves_values PASSED [  9%]
2025-07-16T00:19:59.1792197Z tests/test_api.py::TestAPIInitialization::test_initialize_app PASSED     [ 10%]
2025-07-16T00:19:59.1851553Z tests/test_api.py::TestAPIInitialization::test_app_without_initialization PASSED [ 10%]
2025-07-16T00:19:59.2089328Z tests/test_cli.py::TestCLICommands::test_cli_help PASSED                 [ 11%]
2025-07-16T00:19:59.2150902Z tests/test_cli.py::TestCLICommands::test_scan_command_success PASSED     [ 11%]
2025-07-16T00:19:59.2214937Z tests/test_cli.py::TestCLICommands::test_scan_command_with_options PASSED [ 12%]
2025-07-16T00:19:59.2272216Z tests/test_cli.py::TestCLICommands::test_scan_command_no_records PASSED  [ 12%]
2025-07-16T00:19:59.2331651Z tests/test_cli.py::TestCLICommands::test_scan_command_nonexistent_file PASSED [ 13%]
2025-07-16T00:19:59.2386840Z tests/test_cli.py::TestCLICommands::test_scan_command_exception PASSED   [ 13%]
2025-07-16T00:19:59.2453671Z tests/test_cli.py::TestCLICommands::test_web_command_success PASSED      [ 14%]
2025-07-16T00:19:59.2519380Z tests/test_cli.py::TestCLICommands::test_web_command_with_options PASSED [ 15%]
2025-07-16T00:19:59.2582849Z tests/test_cli.py::TestCLICommands::test_web_command_nonexistent_file PASSED [ 15%]
2025-07-16T00:19:59.2641370Z tests/test_cli.py::TestCLICommands::test_web_command_exception PASSED    [ 16%]
2025-07-16T00:19:59.2728601Z tests/test_cli.py::TestCLICommands::test_create_csv_command_empty PASSED [ 16%]
2025-07-16T00:19:59.2826389Z tests/test_cli.py::TestCLICommands::test_create_csv_command_with_sample PASSED [ 17%]
2025-07-16T00:19:59.2890155Z tests/test_cli.py::TestCLICommands::test_create_csv_command_creates_directory PASSED [ 17%]
2025-07-16T00:19:59.2951350Z tests/test_cli.py::TestCLICommands::test_create_csv_command_exception PASSED [ 18%]
2025-07-16T00:19:59.3037965Z tests/test_cli.py::TestCLICommands::test_info_command_success PASSED     [ 18%]
2025-07-16T00:19:59.3088673Z tests/test_cli.py::TestCLICommands::test_info_command_nonexistent_file PASSED [ 19%]
2025-07-16T00:19:59.3149849Z tests/test_cli.py::TestCLICommands::test_info_command_exception PASSED   [ 19%]
2025-07-16T00:19:59.3232354Z tests/test_cli.py::TestCLIValidation::test_scan_cost_validation_min PASSED [ 20%]
2025-07-16T00:19:59.3315390Z tests/test_cli.py::TestCLIValidation::test_scan_cost_validation_max PASSED [ 20%]
2025-07-16T00:19:59.3386374Z tests/test_cli.py::TestCLIValidation::test_port_validation PASSED        [ 21%]
2025-07-16T00:19:59.3462571Z tests/test_cli.py::TestCLIIntegration::test_scan_integration_with_core PASSED [ 21%]
2025-07-16T00:19:59.3531443Z tests/test_cli.py::TestCLIIntegration::test_web_integration_with_api PASSED [ 22%]
2025-07-16T00:19:59.3674698Z tests/test_cli.py::TestCLIEnvironment::test_environment_loading PASSED   [ 22%]
2025-07-16T00:19:59.3815309Z tests/test_cli.py::TestCLIEnvironment::test_logging_configuration PASSED [ 23%]
2025-07-16T00:19:59.3883609Z tests/test_cli.py::TestCLIEnvironment::test_verbose_logging PASSED       [ 23%]
2025-07-16T00:19:59.3896525Z tests/test_core.py::TestBookRecord::test_book_record_creation PASSED     [ 24%]
2025-07-16T00:19:59.3909287Z tests/test_core.py::TestBookRecord::test_book_record_to_dict PASSED      [ 24%]
2025-07-16T00:19:59.3922118Z tests/test_core.py::TestBookRecord::test_book_record_with_all_fields PASSED [ 25%]
2025-07-16T00:19:59.3938016Z tests/test_core.py::TestBookTriage::test_book_triage_initialization_nonexistent_file PASSED [ 25%]
2025-07-16T00:19:59.3984948Z tests/test_core.py::TestBookTriage::test_book_triage_initialization_with_data PASSED [ 26%]
2025-07-16T00:19:59.4000566Z tests/test_core.py::TestBookTriage::test_calculate_utilities PASSED      [ 26%]
2025-07-16T00:19:59.4015268Z tests/test_core.py::TestBookTriage::test_calculate_utilities_with_none_values PASSED [ 27%]
2025-07-16T00:19:59.4030341Z tests/test_core.py::TestBookTriage::test_make_decision PASSED            [ 27%]
2025-07-16T00:19:59.4083554Z tests/test_core.py::TestBookTriage::test_add_record PASSED               [ 28%]
2025-07-16T00:19:59.4134264Z tests/test_core.py::TestBookTriage::test_get_record_by_id PASSED         [ 29%]
2025-07-16T00:19:59.4183987Z tests/test_core.py::TestBookTriage::test_price_to_v_calculation PASSED   [ 29%]
2025-07-16T00:19:59.4206727Z tests/test_core.py::TestBookTriage::test_enrich_with_gpt4o_mock PASSED   [ 30%]
2025-07-16T00:19:59.4221776Z tests/test_core.py::TestBookTriage::test_scan_cost_parameter PASSED      [ 30%]
2025-07-16T00:19:59.4234021Z tests/test_core.py::TestDecisionEnum::test_decision_values PASSED        [ 31%]
2025-07-16T00:19:59.4248598Z tests/test_core.py::TestDecisionEnum::test_decision_comparison PASSED    [ 31%]
2025-07-16T00:19:59.4301115Z tests/test_core_coverage.py::TestBookTriageCoverage::test_load_csv_with_invalid_float_values PASSED [ 32%]
2025-07-16T00:19:59.4347528Z tests/test_core_coverage.py::TestBookTriageCoverage::test_load_csv_with_nan_values PASSED [ 32%]
2025-07-16T00:19:59.4393698Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_no_title_no_isbn PASSED [ 33%]
2025-07-16T00:19:59.4439803Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_invalid_isbn PASSED [ 33%]
2025-07-16T00:19:59.4496962Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_json_parsing_error PASSED [ 34%]
2025-07-16T00:19:59.4544390Z tests/test_core_coverage.py::TestBookTriageCoverage::test_calculate_utilities_with_none_values PASSED [ 34%]
2025-07-16T00:19:59.4591993Z tests/test_core_coverage.py::TestBookTriageCoverage::test_make_decision_with_verification_calculation PASSED [ 35%]
2025-07-16T00:19:59.4640862Z tests/test_core_coverage.py::TestBookTriageCoverage::test_save_csv_with_no_records PASSED [ 35%]
2025-07-16T00:19:59.4653798Z tests/test_core_simple.py::TestBookRecord::test_book_record_creation PASSED [ 36%]
2025-07-16T00:19:59.4666204Z tests/test_core_simple.py::TestBookRecord::test_book_record_with_values PASSED [ 36%]
2025-07-16T00:19:59.4680475Z tests/test_core_simple.py::TestBookTriage::test_book_triage_initialization PASSED [ 37%]
2025-07-16T00:19:59.4694639Z tests/test_core_simple.py::TestBookTriage::test_calculate_utilities_simple PASSED [ 37%]
2025-07-16T00:19:59.4709106Z tests/test_core_simple.py::TestBookTriage::test_make_decision_simple PASSED [ 38%]
2025-07-16T00:19:59.4723446Z tests/test_core_simple.py::TestDecision::test_decision_values PASSED     [ 38%]
2025-07-16T00:19:59.6301680Z tests/test_frontend_layout.py::TestFrontendLayout::test_modern_css_styling_present ERROR [ 39%]
2025-07-16T00:19:59.6818267Z tests/test_frontend_layout.py::TestFrontendLayout::test_control_panel_styling ERROR [ 39%]
2025-07-16T00:19:59.7323696Z tests/test_frontend_layout.py::TestFrontendLayout::test_table_container_styling ERROR [ 40%]
2025-07-16T00:19:59.7846251Z tests/test_frontend_layout.py::TestFrontendLayout::test_upload_section_styling ERROR [ 40%]
2025-07-16T00:19:59.8362105Z tests/test_frontend_layout.py::TestFrontendLayout::test_button_styling ERROR [ 41%]
2025-07-16T00:19:59.8880058Z tests/test_frontend_layout.py::TestFrontendLayout::test_form_layout ERROR [ 41%]
2025-07-16T00:19:59.9398019Z tests/test_frontend_layout.py::TestFrontendLayout::test_input_field_styling ERROR [ 42%]
2025-07-16T00:19:59.9908085Z tests/test_frontend_layout.py::TestFrontendLayout::test_responsive_table_headers ERROR [ 43%]
2025-07-16T00:20:00.0425060Z tests/test_frontend_layout.py::TestFrontendLayout::test_decision_row_colors ERROR [ 43%]
2025-07-16T00:20:00.0925555Z tests/test_frontend_layout.py::TestFrontendLayout::test_main_content_wrapper ERROR [ 44%]
2025-07-16T00:20:00.1439607Z tests/test_frontend_layout.py::TestFrontendLayout::test_hover_effects ERROR [ 44%]
2025-07-16T00:20:00.1939886Z tests/test_frontend_layout.py::TestTableFunctionality::test_table_renders_with_data ERROR [ 45%]
2025-07-16T00:20:00.2435154Z tests/test_frontend_layout.py::TestTableFunctionality::test_table_has_all_columns ERROR [ 45%]
2025-07-16T00:20:00.2937926Z tests/test_frontend_layout.py::TestTableFunctionality::test_input_field_classes ERROR [ 46%]
2025-07-16T00:20:00.3437228Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_viewport_meta_tag ERROR [ 46%]
2025-07-16T00:20:00.4461111Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_semantic_html_structure ERROR [ 47%]
2025-07-16T00:20:00.4962725Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_css_organization ERROR [ 47%]
2025-07-16T00:20:00.5586953Z tests/test_indicators_implementation.py::test_v_calculation_from_prices PASSED [ 48%]
2025-07-16T00:20:00.5601459Z tests/test_indicators_implementation.py::test_utility_calculations PASSED [ 48%]
2025-07-16T00:20:00.5617514Z tests/test_indicators_implementation.py::test_decision_making PASSED     [ 49%]
2025-07-16T00:20:00.5630077Z tests/test_indicators_implementation.py::test_human_vs_auto_indicators PASSED [ 49%]
2025-07-16T00:20:00.5652089Z tests/test_indicators_implementation.py::test_scan_cost_impact PASSED    [ 50%]
2025-07-16T00:20:00.5746552Z tests/test_layout_basic.py::TestBasicLayout::test_homepage_loads PASSED  [ 50%]
2025-07-16T00:20:00.5830651Z tests/test_layout_basic.py::TestBasicLayout::test_modern_css_included PASSED [ 51%]
2025-07-16T00:20:00.5974777Z tests/test_layout_basic.py::TestBasicLayout::test_sticky_header_css FAILED [ 51%]
2025-07-16T00:20:00.6115309Z tests/test_layout_basic.py::TestBasicLayout::test_table_container_css FAILED [ 52%]
2025-07-16T00:20:00.6204049Z tests/test_layout_basic.py::TestBasicLayout::test_form_styling PASSED    [ 52%]
2025-07-16T00:20:00.6288444Z tests/test_layout_basic.py::TestBasicLayout::test_button_styling PASSED  [ 53%]
2025-07-16T00:20:00.6372282Z tests/test_layout_basic.py::TestBasicLayout::test_upload_section_present PASSED [ 53%]
2025-07-16T00:20:00.6462442Z tests/test_layout_basic.py::TestBasicLayout::test_manual_input_section PASSED [ 54%]
2025-07-16T00:20:00.6554697Z tests/test_layout_basic.py::TestBasicLayout::test_table_headers_present PASSED [ 54%]
2025-07-16T00:20:00.6647446Z tests/test_layout_basic.py::TestLayoutComponents::test_control_panel_structure PASSED [ 55%]
2025-07-16T00:20:00.6734445Z tests/test_layout_basic.py::TestLayoutComponents::test_main_content_wrapper PASSED [ 55%]
2025-07-16T00:20:00.6826236Z tests/test_layout_basic.py::TestLayoutComponents::test_css_organization PASSED [ 56%]
2025-07-16T00:20:00.6915657Z tests/test_layout_basic.py::TestLayoutComponents::test_decision_colors_css PASSED [ 56%]
2025-07-16T00:20:00.7009233Z tests/test_layout_basic.py::TestAPIEndpoints::test_books_endpoint PASSED [ 57%]
2025-07-16T00:20:00.7099043Z tests/test_layout_basic.py::TestAPIEndpoints::test_health_endpoint PASSED [ 58%]
2025-07-16T00:20:00.7123839Z tests/test_main.py::TestMainModule::test_main_no_args_with_existing_csv PASSED [ 58%]
2025-07-16T00:20:00.7146458Z tests/test_main.py::TestMainModule::test_main_no_args_creates_new_csv PASSED [ 59%]
2025-07-16T00:20:00.7167335Z tests/test_main.py::TestMainModule::test_main_with_args PASSED           [ 59%]
2025-07-16T00:20:00.7188371Z tests/test_main.py::TestMainModule::test_main_finds_alternative_csv_paths PASSED [ 60%]
2025-07-16T00:20:00.7207120Z tests/test_main.py::TestMainModule::test_main_module_entry_point PASSED  [ 60%]
2025-07-16T00:20:00.7257404Z tests/test_scroll_preservation.py::TestScrollPreservation::test_loadbooks_accepts_preserve_scroll_parameter PASSED [ 61%]
2025-07-16T00:20:00.7301012Z tests/test_scroll_preservation.py::TestScrollPreservation::test_savebook_calls_loadbooks_with_true PASSED [ 61%]
2025-07-16T00:20:00.7344578Z tests/test_scroll_preservation.py::TestScrollPreservation::test_scroll_preservation_logic_exists PASSED [ 62%]
2025-07-16T00:20:00.7387505Z tests/test_scroll_preservation.py::TestScrollPreservation::test_scroll_container_selector PASSED [ 62%]
2025-07-16T00:20:00.7432925Z tests/test_scroll_preservation.py::TestScrollPreservation::test_manual_submit_calls_loadbooks_with_target PASSED [ 63%]
2025-07-16T00:20:00.7502204Z tests/test_scroll_preservation.py::TestScrollPreservation::test_integration_save_preserves_scroll PASSED [ 63%]
2025-07-16T00:20:00.7526799Z tests/test_security.py::TestGetCurrentUser::test_valid_credentials_default PASSED [ 64%]
2025-07-16T00:20:00.7550021Z tests/test_security.py::TestGetCurrentUser::test_valid_credentials_custom PASSED [ 64%]
2025-07-16T00:20:00.7575150Z tests/test_security.py::TestGetCurrentUser::test_invalid_username PASSED [ 65%]
2025-07-16T00:20:00.7598478Z tests/test_security.py::TestGetCurrentUser::test_invalid_password PASSED [ 65%]
2025-07-16T00:20:00.7621737Z tests/test_security.py::TestGetCurrentUser::test_both_invalid PASSED     [ 66%]
2025-07-16T00:20:00.7644661Z tests/test_security.py::TestGetCurrentUser::test_empty_credentials PASSED [ 66%]
2025-07-16T00:20:00.7669825Z tests/test_security.py::TestAdminRequired::test_admin_required_with_user PASSED [ 67%]
2025-07-16T00:20:00.7687962Z tests/test_security.py::TestAdminRequired::test_admin_required_without_user PASSED [ 67%]
2025-07-16T00:20:00.7705381Z tests/test_security.py::TestAdminRequired::test_admin_required_with_none_user PASSED [ 68%]
2025-07-16T00:20:00.7723456Z tests/test_security.py::TestValidateFileUpload::test_valid_small_image PASSED [ 68%]
2025-07-16T00:20:00.7743326Z tests/test_security.py::TestValidateFileUpload::test_file_too_large PASSED [ 69%]
2025-07-16T00:20:00.7847850Z tests/test_security.py::TestValidateFileUpload::test_non_image_file FAILED [ 69%]
2025-07-16T00:20:00.7863876Z tests/test_security.py::TestValidateFileUpload::test_magic_exception PASSED [ 70%]
2025-07-16T00:20:00.7886912Z tests/test_security.py::TestValidateFileUpload::test_different_image_types PASSED [ 70%]
2025-07-16T00:20:00.7906182Z tests/test_security.py::TestSanitizeImage::test_sanitize_valid_rgb_image PASSED [ 71%]
2025-07-16T00:20:00.7928580Z tests/test_security.py::TestSanitizeImage::test_sanitize_rgba_image PASSED [ 72%]
2025-07-16T00:20:00.7948033Z tests/test_security.py::TestSanitizeImage::test_sanitize_palette_image PASSED [ 72%]
2025-07-16T00:20:00.8659187Z tests/test_security.py::TestSanitizeImage::test_sanitize_invalid_image_data PASSED [ 73%]
2025-07-16T00:20:00.8674332Z tests/test_security.py::TestSanitizeImage::test_sanitize_corrupted_image PASSED [ 73%]
2025-07-16T00:20:00.8695621Z tests/test_security.py::TestSanitizeImage::test_sanitize_quality_setting PASSED [ 74%]
2025-07-16T00:20:00.8721394Z tests/test_security.py::TestSecurityIntegration::test_full_file_security_pipeline PASSED [ 74%]
2025-07-16T00:20:00.8857934Z tests/test_sticky_form.py::test_sticky_form_css_present FAILED           [ 75%]
2025-07-16T00:20:00.8944270Z tests/test_sticky_form.py::test_sticky_form_html_structure PASSED        [ 75%]
2025-07-16T00:20:00.9069547Z tests/test_sticky_form.py::test_body_padding_adjustment FAILED           [ 76%]
2025-07-16T00:20:00.9156888Z tests/test_sticky_form.py::test_books_database_outside_control_panel PASSED [ 76%]
2025-07-16T00:20:00.9245317Z tests/test_sticky_form.py::test_toast_notifications_position PASSED      [ 77%]
2025-07-16T00:20:00.9334070Z tests/test_sticky_form.py::test_form_functionality_still_works PASSED    [ 77%]
2025-07-16T00:20:00.9472778Z tests/test_sticky_table_headers.py::test_sticky_table_headers_css_present FAILED [ 78%]
2025-07-16T00:20:00.9617520Z tests/test_sticky_table_headers.py::test_table_header_structure FAILED   [ 78%]
2025-07-16T00:20:00.9757581Z tests/test_sticky_table_headers.py::test_table_header_css_specificity FAILED [ 79%]
2025-07-16T00:20:00.9899309Z tests/test_sticky_table_headers.py::test_sticky_header_positioning FAILED [ 79%]
2025-07-16T00:20:01.0040594Z tests/test_sticky_table_headers.py::test_z_index_layering FAILED         [ 80%]
2025-07-16T00:20:01.0179381Z tests/test_sticky_table_headers.py::test_table_headers_visual_separation FAILED [ 80%]
2025-07-16T00:20:01.0270643Z tests/test_sticky_table_headers.py::test_books_database_section_outside_control_panel PASSED [ 81%]
2025-07-16T00:20:01.0410810Z tests/test_sticky_table_headers.py::test_complete_sticky_ui_integration FAILED [ 81%]
2025-07-16T00:20:02.5864951Z tests/test_verified_display_logic.py::test_verified_column_uses_strict_equality PASSED [ 82%]
2025-07-16T00:20:02.5888468Z tests/test_vision.py::TestVisionProcessor::test_vision_processor_initialization_with_openai PASSED [ 82%]
2025-07-16T00:20:02.5900473Z tests/test_vision.py::TestVisionProcessor::test_vision_processor_initialization_without_openai PASSED [ 83%]
2025-07-16T00:20:02.5913225Z tests/test_vision.py::TestVisionProcessor::test_generate_id PASSED       [ 83%]
2025-07-16T00:20:02.5968652Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_openai_success PASSED [ 84%]
2025-07-16T00:20:02.6004791Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_fallback_to_tesseract PASSED [ 84%]
2025-07-16T00:20:02.6026870Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_nonexistent_file PASSED [ 85%]
2025-07-16T00:20:02.6048220Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_success PASSED [ 86%]
2025-07-16T00:20:02.6073037Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_empty_result PASSED [ 86%]
2025-07-16T00:20:02.6096729Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_error PASSED [ 87%]
2025-07-16T00:20:02.6139709Z tests/test_vision.py::TestVisionProcessor::test_extract_with_openai_vision_no_content PASSED [ 87%]
2025-07-16T00:20:02.6170572Z tests/test_vision.py::TestVisionProcessor::test_extract_with_openai_vision_no_client PASSED [ 88%]
2025-07-16T00:20:02.6218979Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_from_image_success PASSED [ 88%]
2025-07-16T00:20:02.6240297Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_tesseract_fallback PASSED [ 89%]
2025-07-16T00:20:02.6253534Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_nonexistent_file PASSED [ 89%]
2025-07-16T00:20:02.6274071Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_no_isbn_found PASSED [ 90%]
2025-07-16T00:20:02.6304491Z tests/test_vision.py::TestVisionProcessor::test_image_format_conversion PASSED [ 90%]
2025-07-16T00:20:02.6330854Z tests/test_vision.py::TestVisionProcessorIntegration::test_processor_with_real_image_mock_ocr PASSED [ 91%]
2025-07-16T00:20:02.6347175Z tests/test_vision_fixed.py::TestVisionProcessor::test_vision_processor_initialization_with_openai PASSED [ 91%]
2025-07-16T00:20:02.6358826Z tests/test_vision_fixed.py::TestVisionProcessor::test_vision_processor_initialization_without_openai PASSED [ 92%]
2025-07-16T00:20:02.6370550Z tests/test_vision_fixed.py::TestVisionProcessor::test_generate_id PASSED [ 92%]
2025-07-16T00:20:02.6383496Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_from_image_nonexistent_file PASSED [ 93%]
2025-07-16T00:20:02.6428009Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_with_openai_vision_success PASSED [ 93%]
2025-07-16T00:20:02.6471159Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_fallback_to_tesseract PASSED [ 94%]
2025-07-16T00:20:02.6492220Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_success PASSED [ 94%]
2025-07-16T00:20:02.6513523Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_empty_result PASSED [ 95%]
2025-07-16T00:20:02.6535654Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_error PASSED [ 95%]
2025-07-16T00:20:02.6578897Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_openai_vision_no_content PASSED [ 96%]
2025-07-16T00:20:02.6597718Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_openai_vision_no_client PASSED [ 96%]
2025-07-16T00:20:02.6639310Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_from_image_success PASSED [ 97%]
2025-07-16T00:20:02.6662272Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_tesseract_fallback PASSED [ 97%]
2025-07-16T00:20:02.6676069Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_nonexistent_file PASSED [ 98%]
2025-07-16T00:20:02.6697957Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_no_isbn_found PASSED [ 98%]
2025-07-16T00:20:02.6710351Z tests/test_vision_fixed.py::TestVisionProcessor::test_image_format_conversion PASSED [ 99%]
2025-07-16T00:20:02.7294293Z tests/test_vision_fixed.py::TestVisionProcessorIntegration::test_processor_with_real_image_mock_ocr PASSED [100%]
2025-07-16T00:20:02.7295397Z 
2025-07-16T00:20:02.7295611Z ==================================== ERRORS ====================================
2025-07-16T00:20:02.7297162Z _____ ERROR at setup of TestFrontendLayout.test_modern_css_styling_present _____
2025-07-16T00:20:02.7297947Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7298704Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7299245Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7299639Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7300012Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7300445Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7301015Z     self._load_csv()
2025-07-16T00:20:02.7301456Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7302371Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7303394Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7304043Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7304631Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7304956Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7305475Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7306226Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7306879Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7307747Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7308628Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7309410Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7310163Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7311039Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7311681Z _______ ERROR at setup of TestFrontendLayout.test_control_panel_styling ________
2025-07-16T00:20:02.7312089Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7312406Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7312653Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7312946Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7313394Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7313799Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7314185Z     self._load_csv()
2025-07-16T00:20:02.7314512Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7315192Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7316046Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7316721Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7317430Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7317858Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7318519Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7319278Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7319748Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7320456Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7321343Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7322132Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7322943Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7323826Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7324356Z ______ ERROR at setup of TestFrontendLayout.test_table_container_styling _______
2025-07-16T00:20:02.7325009Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7325325Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7325581Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7326155Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7326648Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7326960Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7327186Z     self._load_csv()
2025-07-16T00:20:02.7327383Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7327754Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7328132Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7328730Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7329126Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7329344Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7329718Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7330189Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7330488Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7331233Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7331720Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7332144Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7332561Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7333020Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7333511Z _______ ERROR at setup of TestFrontendLayout.test_upload_section_styling _______
2025-07-16T00:20:02.7333912Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7334223Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7334476Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7334734Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7334987Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7335225Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7335726Z     self._load_csv()
2025-07-16T00:20:02.7336271Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7337002Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7337724Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7338105Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7338497Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7338718Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7339067Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7339474Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7339727Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7340289Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7341176Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7341961Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7342716Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7343558Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7344474Z ___________ ERROR at setup of TestFrontendLayout.test_button_styling ___________
2025-07-16T00:20:02.7345243Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7346060Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7346848Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7347383Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7347856Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7348313Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7348729Z     self._load_csv()
2025-07-16T00:20:02.7349086Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7349791Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7350497Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7351187Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7351923Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7352335Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7352987Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7353764Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7354250Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7354972Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7356061Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7357087Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7357855Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7358688Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7359621Z ____________ ERROR at setup of TestFrontendLayout.test_form_layout _____________
2025-07-16T00:20:02.7360370Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7360936Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7361409Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7361906Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7362358Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7362826Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7363138Z     self._load_csv()
2025-07-16T00:20:02.7363334Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7363712Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7364089Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7364452Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7364847Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7365064Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7365406Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7366025Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7366319Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7366706Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7367167Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7367588Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7368004Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7368466Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7368954Z ________ ERROR at setup of TestFrontendLayout.test_input_field_styling _________
2025-07-16T00:20:02.7369423Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7369737Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7369981Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7370249Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7370698Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7370927Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7371146Z     self._load_csv()
2025-07-16T00:20:02.7371332Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7371700Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7372073Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7372433Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7372803Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7373022Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7373365Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7373754Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7374005Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7374380Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7374841Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7375250Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7375989Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7376455Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7376943Z ______ ERROR at setup of TestFrontendLayout.test_responsive_table_headers ______
2025-07-16T00:20:02.7377345Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7377643Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7377889Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7378153Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7378398Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7378639Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7378849Z     self._load_csv()
2025-07-16T00:20:02.7379036Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7379391Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7379762Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7380126Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7380494Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7380710Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7381040Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7381430Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7381679Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7382044Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7382508Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7382914Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7383359Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7383806Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7384287Z ________ ERROR at setup of TestFrontendLayout.test_decision_row_colors _________
2025-07-16T00:20:02.7384683Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7384979Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7385228Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7385479Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7385873Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7386140Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7386491Z     self._load_csv()
2025-07-16T00:20:02.7386678Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7387046Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7387431Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7387799Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7388170Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7388392Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7388722Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7389117Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7389366Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7389733Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7390192Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7390607Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7391019Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7391464Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7392068Z ________ ERROR at setup of TestFrontendLayout.test_main_content_wrapper ________
2025-07-16T00:20:02.7392469Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7392770Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7393021Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7393280Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7393531Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7393759Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7393974Z     self._load_csv()
2025-07-16T00:20:02.7394169Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7394527Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7394899Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7395246Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7395622Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7395994Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7396340Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7396731Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7396976Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7397351Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7397801Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7398212Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7398620Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7399069Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7399547Z ___________ ERROR at setup of TestFrontendLayout.test_hover_effects ____________
2025-07-16T00:20:02.7399932Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7400242Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7400486Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7400749Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7400992Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7401223Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7401436Z     self._load_csv()
2025-07-16T00:20:02.7401615Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7401978Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7402946Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7403640Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7404382Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7404821Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7405501Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7406231Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7406502Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7406899Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7407385Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7407804Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7408232Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7408692Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7409186Z ____ ERROR at setup of TestTableFunctionality.test_table_renders_with_data _____
2025-07-16T00:20:02.7409787Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7410090Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7410345Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7410603Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7410859Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7411091Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7411303Z     self._load_csv()
2025-07-16T00:20:02.7411494Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7411857Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7412237Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7412599Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7412977Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7413195Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7413537Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7413932Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7414178Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7414550Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7415008Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7415422Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7416021Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7416480Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7416977Z _____ ERROR at setup of TestTableFunctionality.test_table_has_all_columns ______
2025-07-16T00:20:02.7417388Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7417700Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7417947Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7418206Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7418456Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7418682Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7418901Z     self._load_csv()
2025-07-16T00:20:02.7419089Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7419455Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7419824Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7420305Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7420682Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7420892Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7421235Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7421633Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7421894Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7422271Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7422748Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7423161Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7423563Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7424018Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7424509Z ______ ERROR at setup of TestTableFunctionality.test_input_field_classes _______
2025-07-16T00:20:02.7424914Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7425213Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7425580Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7426020Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7426269Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7426502Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7426712Z     self._load_csv()
2025-07-16T00:20:02.7426898Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7427259Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7427635Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7427983Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7428372Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7428590Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7428925Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7429324Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7429568Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7429938Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7430396Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7430808Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7431215Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7431664Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7432161Z ______ ERROR at setup of TestLayoutResponsiveness.test_viewport_meta_tag _______
2025-07-16T00:20:02.7432561Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7432866Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7433116Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7433382Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7433635Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7433864Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7434078Z     self._load_csv()
2025-07-16T00:20:02.7434259Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7434628Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7434992Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7435346Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7435880Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7436272Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7436637Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7437040Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7437304Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7437673Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7438137Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7438546Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7438943Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7439390Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7439880Z ___ ERROR at setup of TestLayoutResponsiveness.test_semantic_html_structure ____
2025-07-16T00:20:02.7440298Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7440599Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7440841Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7441100Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7441518Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7441749Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7441955Z     self._load_csv()
2025-07-16T00:20:02.7442140Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7442496Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7442863Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7443215Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7443583Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7443801Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7444135Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7444522Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7444762Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7445140Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7445596Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7446209Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7446617Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7447060Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7447549Z _______ ERROR at setup of TestLayoutResponsiveness.test_css_organization _______
2025-07-16T00:20:02.7447946Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7448254Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7448502Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7448756Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7449008Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7449237Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7449448Z     self._load_csv()
2025-07-16T00:20:02.7449638Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7449998Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7450363Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7450994Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7451451Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7471090Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7471613Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7472270Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7472545Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7472948Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7473449Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7473880Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7474316Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7474798Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7475215Z =================================== FAILURES ===================================
2025-07-16T00:20:02.7475561Z ____________________ TestBasicLayout.test_sticky_header_css ____________________
2025-07-16T00:20:02.7476085Z tests/test_layout_basic.py:57: in test_sticky_header_css
2025-07-16T00:20:02.7476392Z     assert "position: fixed" in content
2025-07-16T00:20:02.7518366Z E   assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7560929Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7561357Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmp7_nx3emf.csv
2025-07-16T00:20:02.7562178Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7562959Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7563343Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7563810Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7564255Z ___________________ TestBasicLayout.test_table_container_css ___________________
2025-07-16T00:20:02.7564642Z tests/test_layout_basic.py:67: in test_table_container_css
2025-07-16T00:20:02.7564959Z     assert "overflow-x: auto" in content
2025-07-16T00:20:02.7606832Z E   assert 'overflow-x: auto' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7649045Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7649477Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmppv93rpi1.csv
2025-07-16T00:20:02.7650295Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7651083Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7651467Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7652179Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7652909Z __________________ TestValidateFileUpload.test_non_image_file __________________
2025-07-16T00:20:02.7653528Z tests/test_security.py:160: in test_non_image_file
2025-07-16T00:20:02.7654078Z     assert "File must be an image" in exc_info.value.detail
2025-07-16T00:20:02.7654738Z E   AssertionError: assert 'File must be an image' in 'Invalid file format'
2025-07-16T00:20:02.7655603Z E    +  where 'Invalid file format' = HTTPException(status_code=400, detail='Invalid file format').detail
2025-07-16T00:20:02.7657502Z E    +    where HTTPException(status_code=400, detail='Invalid file format') = <ExceptionInfo HTTPException(status_code=400, detail='Invalid file format') tblen=2>.value
2025-07-16T00:20:02.7658719Z _________________________ test_sticky_form_css_present _________________________
2025-07-16T00:20:02.7659149Z tests/test_sticky_form.py:43: in test_sticky_form_css_present
2025-07-16T00:20:02.7659500Z     assert "position: fixed" in html_content
2025-07-16T00:20:02.7700953Z E   assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7743380Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7743818Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmpcossh_z2.csv
2025-07-16T00:20:02.7744652Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7745409Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7745921Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7746376Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7746808Z _________________________ test_body_padding_adjustment _________________________
2025-07-16T00:20:02.7747183Z tests/test_sticky_form.py:78: in test_body_padding_adjustment
2025-07-16T00:20:02.7747511Z     assert "padding-top: 280px" in html_content
2025-07-16T00:20:02.7788894Z E   assert 'padding-top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7831154Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7831589Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmp1g2877hg.csv
2025-07-16T00:20:02.7832391Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7833143Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7833717Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7834173Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7834615Z ____________________ test_sticky_table_headers_css_present _____________________
2025-07-16T00:20:02.7835042Z tests/test_sticky_table_headers.py:44: in test_sticky_table_headers_css_present
2025-07-16T00:20:02.7835487Z     assert "top: 280px" in html_content  # Should align with sticky form height
2025-07-16T00:20:02.7835907Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7877217Z E   assert 'top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7919118Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7919553Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpldpr4600.csv
2025-07-16T00:20:02.7920348Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7921109Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7921490Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7921929Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7922351Z _________________________ test_table_header_structure __________________________
2025-07-16T00:20:02.7922740Z tests/test_sticky_table_headers.py:84: in test_table_header_structure
2025-07-16T00:20:02.7923072Z     assert header in html_content
2025-07-16T00:20:02.7964464Z E   assert '<th>V</th>' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8006748Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8007161Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpu15sbc4l.csv
2025-07-16T00:20:02.8007961Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8008845Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8009229Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8009670Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8010578Z ______________________ test_table_header_css_specificity _______________________
2025-07-16T00:20:02.8011268Z tests/test_sticky_table_headers.py:96: in test_table_header_css_specificity
2025-07-16T00:20:02.8011908Z     assert 'background-color: #f2f2f2' in html_content
2025-07-16T00:20:02.8054994Z E   assert 'background-color: #f2f2f2' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8098075Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8098534Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp_bg1_q0i.csv
2025-07-16T00:20:02.8099348Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8100119Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8100506Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8100956Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8101387Z ________________________ test_sticky_header_positioning ________________________
2025-07-16T00:20:02.8101794Z tests/test_sticky_table_headers.py:113: in test_sticky_header_positioning
2025-07-16T00:20:02.8102148Z     assert 'top: 0' in control_panel_section
2025-07-16T00:20:02.8103198Z E   AssertionError: assert 'top: 0' in '#control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-a'
2025-07-16T00:20:02.8104464Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8104867Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpkzqk87a2.csv
2025-07-16T00:20:02.8105667Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8106569Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8106960Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8107403Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8107814Z ____________________________ test_z_index_layering _____________________________
2025-07-16T00:20:02.8108314Z tests/test_sticky_table_headers.py:129: in test_z_index_layering
2025-07-16T00:20:02.8108648Z     assert 'z-index: 1000' in html_content
2025-07-16T00:20:02.8149919Z E   assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8191867Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8192283Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp4x1e7eil.csv
2025-07-16T00:20:02.8193083Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8193822Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8194211Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8194645Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8195073Z _____________________ test_table_headers_visual_separation _____________________
2025-07-16T00:20:02.8195506Z tests/test_sticky_table_headers.py:147: in test_table_headers_visual_separation
2025-07-16T00:20:02.8196003Z     assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in html_content
2025-07-16T00:20:02.8237577Z E   assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8279627Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8280053Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp06lobd4q.csv
2025-07-16T00:20:02.8280844Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8281603Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8281984Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8282425Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8282986Z _____________________ test_complete_sticky_ui_integration ______________________
2025-07-16T00:20:02.8283429Z tests/test_sticky_table_headers.py:186: in test_complete_sticky_ui_integration
2025-07-16T00:20:02.8283832Z     assert 'z-index: 1000' in html_content  # Control panel
2025-07-16T00:20:02.8284111Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.8325362Z E   assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8367443Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8367866Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpkd1krj7w.csv
2025-07-16T00:20:02.8368658Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8369425Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8369802Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8370245Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8370635Z ================================ tests coverage ================================
2025-07-16T00:20:02.8370980Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-07-16T00:20:02.8371227Z 
2025-07-16T00:20:02.8371337Z Name                      Stmts   Miss  Cover   Missing
2025-07-16T00:20:02.8371607Z -------------------------------------------------------
2025-07-16T00:20:02.8371882Z book_triage/__init__.py       3      0   100%
2025-07-16T00:20:02.8372144Z book_triage/__main__.py      21      0   100%
2025-07-16T00:20:02.8372516Z book_triage/api.py          178     27    85%   41, 66, 684, 753, 778-779, 782-783, 791, 810, 812, 814, 817-829, 835, 851, 853
2025-07-16T00:20:02.8373085Z book_triage/cli.py          117      8    93%   229, 231, 233, 235, 237, 239, 241, 250
2025-07-16T00:20:02.8373488Z book_triage/core.py         195     22    89%   121, 240-242, 276-279, 287, 289, 299-300, 304, 313-328
2025-07-16T00:20:02.8373845Z book_triage/security.py      45      0   100%
2025-07-16T00:20:02.8374153Z book_triage/vision.py       100      7    93%   164-165, 171, 173-174, 176-177
2025-07-16T00:20:02.8374480Z -------------------------------------------------------
2025-07-16T00:20:02.8374737Z TOTAL                       659     64    90%
2025-07-16T00:20:02.8375037Z Required test coverage of 85.0% reached. Total coverage: 90.29%
2025-07-16T00:20:02.8375382Z =========================== short test summary info ============================
2025-07-16T00:20:02.8417022Z FAILED tests/test_layout_basic.py::TestBasicLayout::test_sticky_header_css - assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8500191Z FAILED tests/test_layout_basic.py::TestBasicLayout::test_table_container_css - assert 'overflow-x: auto' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8543309Z FAILED tests/test_security.py::TestValidateFileUpload::test_non_image_file - AssertionError: assert 'File must be an image' in 'Invalid file format'
2025-07-16T00:20:02.8544065Z  +  where 'Invalid file format' = HTTPException(status_code=400, detail='Invalid file format').detail
2025-07-16T00:20:02.8544819Z  +    where HTTPException(status_code=400, detail='Invalid file format') = <ExceptionInfo HTTPException(status_code=400, detail='Invalid file format') tblen=2>.value
2025-07-16T00:20:02.8586579Z FAILED tests/test_sticky_form.py::test_sticky_form_css_present - assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8669603Z FAILED tests/test_sticky_form.py::test_body_padding_adjustment - assert 'padding-top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8752503Z FAILED tests/test_sticky_table_headers.py::test_sticky_table_headers_css_present - assert 'top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8835266Z FAILED tests/test_sticky_table_headers.py::test_table_header_structure - assert '<th>V</th>' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8918248Z FAILED tests/test_sticky_table_headers.py::test_table_header_css_specificity - assert 'background-color: #f2f2f2' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8961239Z FAILED tests/test_sticky_table_headers.py::test_sticky_header_positioning - AssertionError: assert 'top: 0' in '#control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-a'
2025-07-16T00:20:02.9003557Z FAILED tests/test_sticky_table_headers.py::test_z_index_layering - assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.9087323Z FAILED tests/test_sticky_table_headers.py::test_table_headers_visual_separation - assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:03.0340020Z FAILED tests/test_sticky_table_headers.py::test_complete_sticky_ui_integration - assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:03.0382972Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_modern_css_styling_present - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0383962Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_control_panel_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0384910Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_table_container_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0385965Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_upload_section_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0386930Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_button_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0387818Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_form_layout - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0388887Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_input_field_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0389834Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_responsive_table_headers - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0390814Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_decision_row_colors - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0391742Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_main_content_wrapper - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0392659Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_hover_effects - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0393601Z ERROR tests/test_frontend_layout.py::TestTableFunctionality::test_table_renders_with_data - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0394580Z ERROR tests/test_frontend_layout.py::TestTableFunctionality::test_table_has_all_columns - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0395539Z ERROR tests/test_frontend_layout.py::TestTableFunctionality::test_input_field_classes - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0396645Z ERROR tests/test_frontend_layout.py::TestLayoutResponsiveness::test_viewport_meta_tag - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0397638Z ERROR tests/test_frontend_layout.py::TestLayoutResponsiveness::test_semantic_html_structure - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0398619Z ERROR tests/test_frontend_layout.py::TestLayoutResponsiveness::test_css_organization - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0399287Z ================== 12 failed, 164 passed, 17 errors in 8.25s ===================
2025-07-16T00:20:03.3059561Z ##[error]Process completed with exit code 1.
