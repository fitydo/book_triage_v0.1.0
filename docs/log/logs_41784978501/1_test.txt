2025-07-16T00:19:32.1498511Z Current runner version: '2.326.0'
2025-07-16T00:19:32.1532699Z ##[group]Runner Image Provisioner
2025-07-16T00:19:32.1533622Z Hosted Compute Agent
2025-07-16T00:19:32.1534184Z Version: 20250711.363
2025-07-16T00:19:32.1534743Z Commit: 6785254374ce925a23743850c1cb91912ce5c14c
2025-07-16T00:19:32.1535489Z Build Date: 2025-07-11T20:04:25Z
2025-07-16T00:19:32.1536321Z ##[endgroup]
2025-07-16T00:19:32.1536903Z ##[group]Operating System
2025-07-16T00:19:32.1537551Z Ubuntu
2025-07-16T00:19:32.1538006Z 24.04.2
2025-07-16T00:19:32.1538478Z LTS
2025-07-16T00:19:32.1538953Z ##[endgroup]
2025-07-16T00:19:32.1539466Z ##[group]Runner Image
2025-07-16T00:19:32.1540011Z Image: ubuntu-24.04
2025-07-16T00:19:32.1540565Z Version: 20250710.1.0
2025-07-16T00:19:32.1541546Z Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250710.1/images/ubuntu/Ubuntu2404-Readme.md
2025-07-16T00:19:32.1543064Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250710.1
2025-07-16T00:19:32.1544097Z ##[endgroup]
2025-07-16T00:19:32.1545167Z ##[group]GITHUB_TOKEN Permissions
2025-07-16T00:19:32.1547533Z Contents: read
2025-07-16T00:19:32.1548098Z Metadata: read
2025-07-16T00:19:32.1548559Z Packages: read
2025-07-16T00:19:32.1549168Z ##[endgroup]
2025-07-16T00:19:32.1551218Z Secret source: Actions
2025-07-16T00:19:32.1551915Z Prepare workflow directory
2025-07-16T00:19:32.1991407Z Prepare all required actions
2025-07-16T00:19:32.2048501Z Getting action download info
2025-07-16T00:19:32.5022563Z ##[group]Download immutable action package 'actions/checkout@v4'
2025-07-16T00:19:32.5023725Z Version: 4.2.2
2025-07-16T00:19:32.5024692Z Digest: sha256:ccb2698953eaebd21c7bf6268a94f9c26518a7e38e27e0b83c1fe1ad049819b1
2025-07-16T00:19:32.5025977Z Source commit SHA: 11bd71901bbe5b1630ceea73d27597364c9af683
2025-07-16T00:19:32.5026773Z ##[endgroup]
2025-07-16T00:19:32.6201732Z ##[group]Download immutable action package 'actions/setup-python@v4'
2025-07-16T00:19:32.6203065Z Version: 4.9.1
2025-07-16T00:19:32.6204517Z Digest: sha256:f03e505388af670b5a108629e0ba26befc08d5c62b41f46146a45fe29ae509a5
2025-07-16T00:19:32.6205986Z Source commit SHA: 7f4fc3e22c37d6ff65e88745f38bd3157c663f7c
2025-07-16T00:19:32.6206801Z ##[endgroup]
2025-07-16T00:19:32.9589912Z Complete job name: test
2025-07-16T00:19:33.0257583Z ##[group]Run actions/checkout@v4
2025-07-16T00:19:33.0258451Z with:
2025-07-16T00:19:33.0258924Z   repository: fitydo/book_triage_v0.1.0
2025-07-16T00:19:33.0259623Z   token: ***
2025-07-16T00:19:33.0260012Z   ssh-strict: true
2025-07-16T00:19:33.0260421Z   ssh-user: git
2025-07-16T00:19:33.0260821Z   persist-credentials: true
2025-07-16T00:19:33.0261283Z   clean: true
2025-07-16T00:19:33.0261685Z   sparse-checkout-cone-mode: true
2025-07-16T00:19:33.0262171Z   fetch-depth: 1
2025-07-16T00:19:33.0262565Z   fetch-tags: false
2025-07-16T00:19:33.0262957Z   show-progress: true
2025-07-16T00:19:33.0263363Z   lfs: false
2025-07-16T00:19:33.0263728Z   submodules: false
2025-07-16T00:19:33.0264135Z   set-safe-directory: true
2025-07-16T00:19:33.0264798Z ##[endgroup]
2025-07-16T00:19:33.1356996Z Syncing repository: fitydo/book_triage_v0.1.0
2025-07-16T00:19:33.1359035Z ##[group]Getting Git version info
2025-07-16T00:19:33.1359918Z Working directory is '/home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0'
2025-07-16T00:19:33.1360967Z [command]/usr/bin/git version
2025-07-16T00:19:33.1477492Z git version 2.50.1
2025-07-16T00:19:33.1504981Z ##[endgroup]
2025-07-16T00:19:33.1521186Z Temporarily overriding HOME='/home/runner/work/_temp/b0c00ee9-defd-49bc-a264-0a675a8a1c3a' before making global git config changes
2025-07-16T00:19:33.1535386Z Adding repository directory to the temporary git global config as a safe directory
2025-07-16T00:19:33.1537698Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T00:19:33.1578740Z Deleting the contents of '/home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0'
2025-07-16T00:19:33.1582443Z ##[group]Initializing the repository
2025-07-16T00:19:33.1586943Z [command]/usr/bin/git init /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T00:19:33.1680111Z hint: Using 'master' as the name for the initial branch. This default branch name
2025-07-16T00:19:33.1681866Z hint: is subject to change. To configure the initial branch name to use in all
2025-07-16T00:19:33.1683414Z hint: of your new repositories, which will suppress this warning, call:
2025-07-16T00:19:33.1684630Z hint:
2025-07-16T00:19:33.1685491Z hint: 	git config --global init.defaultBranch <name>
2025-07-16T00:19:33.1686747Z hint:
2025-07-16T00:19:33.1687722Z hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
2025-07-16T00:19:33.1689336Z hint: 'development'. The just-created branch can be renamed via this command:
2025-07-16T00:19:33.1690612Z hint:
2025-07-16T00:19:33.1691275Z hint: 	git branch -m <name>
2025-07-16T00:19:33.1692027Z hint:
2025-07-16T00:19:33.1693016Z hint: Disable this message with "git config set advice.defaultBranchName false"
2025-07-16T00:19:33.1694929Z Initialized empty Git repository in /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0/.git/
2025-07-16T00:19:33.1698332Z [command]/usr/bin/git remote add origin https://github.com/fitydo/book_triage_v0.1.0
2025-07-16T00:19:33.1740455Z ##[endgroup]
2025-07-16T00:19:33.1741748Z ##[group]Disabling automatic garbage collection
2025-07-16T00:19:33.1744709Z [command]/usr/bin/git config --local gc.auto 0
2025-07-16T00:19:33.1780769Z ##[endgroup]
2025-07-16T00:19:33.1781922Z ##[group]Setting up auth
2025-07-16T00:19:33.1788837Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-07-16T00:19:33.1825702Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-07-16T00:19:33.2182485Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-07-16T00:19:33.2214557Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-07-16T00:19:33.2449200Z [command]/usr/bin/git config --local http.https://github.com/.extraheader AUTHORIZATION: basic ***
2025-07-16T00:19:33.2486682Z ##[endgroup]
2025-07-16T00:19:33.2487558Z ##[group]Fetching the repository
2025-07-16T00:19:33.2495365Z [command]/usr/bin/git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin +52234c8316ffaec1d2c6454c64dffb7addd22b56:refs/remotes/origin/main
2025-07-16T00:19:33.6006898Z From https://github.com/fitydo/book_triage_v0.1.0
2025-07-16T00:19:33.6008538Z  * [new ref]         52234c8316ffaec1d2c6454c64dffb7addd22b56 -> origin/main
2025-07-16T00:19:33.6033819Z ##[endgroup]
2025-07-16T00:19:33.6034524Z ##[group]Determining the checkout info
2025-07-16T00:19:33.6035906Z ##[endgroup]
2025-07-16T00:19:33.6040849Z [command]/usr/bin/git sparse-checkout disable
2025-07-16T00:19:33.6081350Z [command]/usr/bin/git config --local --unset-all extensions.worktreeConfig
2025-07-16T00:19:33.6111027Z ##[group]Checking out the ref
2025-07-16T00:19:33.6114666Z [command]/usr/bin/git checkout --progress --force -B main refs/remotes/origin/main
2025-07-16T00:19:33.6317471Z Switched to a new branch 'main'
2025-07-16T00:19:33.6318414Z branch 'main' set up to track 'origin/main'.
2025-07-16T00:19:33.6326166Z ##[endgroup]
2025-07-16T00:19:33.6442294Z [command]/usr/bin/git log -1 --format=%H
2025-07-16T00:19:33.6444874Z 52234c8316ffaec1d2c6454c64dffb7addd22b56
2025-07-16T00:19:33.6645167Z ##[group]Run actions/setup-python@v4
2025-07-16T00:19:33.6646037Z with:
2025-07-16T00:19:33.6646524Z   python-version: 3.12
2025-07-16T00:19:33.6647058Z   check-latest: false
2025-07-16T00:19:33.6647751Z   token: ***
2025-07-16T00:19:33.6648238Z   update-environment: true
2025-07-16T00:19:33.6648781Z   allow-prereleases: false
2025-07-16T00:19:33.6649535Z ##[endgroup]
2025-07-16T00:19:33.8393086Z ##[group]Installed versions
2025-07-16T00:19:33.8500678Z Successfully set up CPython (3.12.11)
2025-07-16T00:19:33.8502590Z ##[endgroup]
2025-07-16T00:19:33.8637716Z ##[group]Run python -m pip install --upgrade pip
2025-07-16T00:19:33.8638802Z [36;1mpython -m pip install --upgrade pip[0m
2025-07-16T00:19:33.8639710Z [36;1mpip install -e .[test][0m
2025-07-16T00:19:33.8683778Z shell: /usr/bin/bash -e {0}
2025-07-16T00:19:33.8684601Z env:
2025-07-16T00:19:33.8685391Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:33.8686807Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T00:19:33.8687919Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:33.8688964Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:33.8690002Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:33.8691039Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T00:19:33.8691985Z ##[endgroup]
2025-07-16T00:19:34.5782223Z Requirement already satisfied: pip in /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages (25.1.1)
2025-07-16T00:19:35.2091840Z Obtaining file:///home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T00:19:35.2117576Z   Installing build dependencies: started
2025-07-16T00:19:35.9810682Z   Installing build dependencies: finished with status 'done'
2025-07-16T00:19:35.9820458Z   Checking if build backend supports build_editable: started
2025-07-16T00:19:36.0297156Z   Checking if build backend supports build_editable: finished with status 'done'
2025-07-16T00:19:36.0307666Z   Getting requirements to build editable: started
2025-07-16T00:19:36.1640277Z   Getting requirements to build editable: finished with status 'done'
2025-07-16T00:19:36.1660846Z   Installing backend dependencies: started
2025-07-16T00:19:36.7158088Z   Installing backend dependencies: finished with status 'done'
2025-07-16T00:19:36.7166586Z   Preparing editable metadata (pyproject.toml): started
2025-07-16T00:19:36.9122912Z   Preparing editable metadata (pyproject.toml): finished with status 'done'
2025-07-16T00:19:37.0117790Z Collecting fastapi>=0.104.0 (from book_triage==0.1.0)
2025-07-16T00:19:37.0507507Z   Downloading fastapi-0.116.1-py3-none-any.whl.metadata (28 kB)
2025-07-16T00:19:37.1281739Z Collecting openai>=1.0.0 (from book_triage==0.1.0)
2025-07-16T00:19:37.1327930Z   Downloading openai-1.96.1-py3-none-any.whl.metadata (29 kB)
2025-07-16T00:19:37.2696091Z Collecting pandas>=2.0.0 (from book_triage==0.1.0)
2025-07-16T00:19:37.2742783Z   Downloading pandas-2.3.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (91 kB)
2025-07-16T00:19:37.4858254Z Collecting pillow>=10.0.0 (from book_triage==0.1.0)
2025-07-16T00:19:37.4903513Z   Downloading pillow-11.3.0-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl.metadata (9.0 kB)
2025-07-16T00:19:37.5081018Z Collecting pytesseract>=0.3.10 (from book_triage==0.1.0)
2025-07-16T00:19:37.5136277Z   Downloading pytesseract-0.3.13-py3-none-any.whl.metadata (11 kB)
2025-07-16T00:19:37.5346797Z Collecting python-dotenv>=1.0.0 (from book_triage==0.1.0)
2025-07-16T00:19:37.5390966Z   Downloading python_dotenv-1.1.1-py3-none-any.whl.metadata (24 kB)
2025-07-16T00:19:37.5555464Z Collecting python-magic>=0.4.27 (from book_triage==0.1.0)
2025-07-16T00:19:37.5598275Z   Downloading python_magic-0.4.27-py2.py3-none-any.whl.metadata (5.8 kB)
2025-07-16T00:19:37.5745582Z Collecting python-multipart>=0.0.6 (from book_triage==0.1.0)
2025-07-16T00:19:37.5787583Z   Downloading python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)
2025-07-16T00:19:37.5925308Z Collecting slowapi>=0.1.8 (from book_triage==0.1.0)
2025-07-16T00:19:37.6002474Z   Downloading slowapi-0.1.9-py3-none-any.whl.metadata (3.0 kB)
2025-07-16T00:19:37.6349919Z Collecting tqdm>=4.65.0 (from book_triage==0.1.0)
2025-07-16T00:19:37.6401555Z   Downloading tqdm-4.67.1-py3-none-any.whl.metadata (57 kB)
2025-07-16T00:19:37.6657617Z Collecting typer>=0.9.0 (from book_triage==0.1.0)
2025-07-16T00:19:37.6702605Z   Downloading typer-0.16.0-py3-none-any.whl.metadata (15 kB)
2025-07-16T00:19:37.7035354Z Collecting uvicorn>=0.24.0 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T00:19:37.7079359Z   Downloading uvicorn-0.35.0-py3-none-any.whl.metadata (6.5 kB)
2025-07-16T00:19:37.7328509Z Collecting beautifulsoup4>=4.12.0 (from book_triage==0.1.0)
2025-07-16T00:19:37.7380389Z   Downloading beautifulsoup4-4.13.4-py3-none-any.whl.metadata (3.8 kB)
2025-07-16T00:19:38.0769857Z Collecting coverage>=7.3.0 (from book_triage==0.1.0)
2025-07-16T00:19:38.0824855Z   Downloading coverage-7.9.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (8.9 kB)
2025-07-16T00:19:38.1059368Z Collecting pytest-asyncio>=0.21.0 (from book_triage==0.1.0)
2025-07-16T00:19:38.1109731Z   Downloading pytest_asyncio-1.0.0-py3-none-any.whl.metadata (4.0 kB)
2025-07-16T00:19:38.1300616Z Collecting pytest-cov>=4.1.0 (from book_triage==0.1.0)
2025-07-16T00:19:38.1346131Z   Downloading pytest_cov-6.2.1-py3-none-any.whl.metadata (30 kB)
2025-07-16T00:19:38.1751983Z Collecting pytest>=7.4.0 (from book_triage==0.1.0)
2025-07-16T00:19:38.1794995Z   Downloading pytest-8.4.1-py3-none-any.whl.metadata (7.7 kB)
2025-07-16T00:19:38.2108645Z Collecting requests>=2.31.0 (from book_triage==0.1.0)
2025-07-16T00:19:38.2161535Z   Downloading requests-2.32.4-py3-none-any.whl.metadata (4.9 kB)
2025-07-16T00:19:38.2374837Z Collecting soupsieve>1.2 (from beautifulsoup4>=4.12.0->book_triage==0.1.0)
2025-07-16T00:19:38.2416999Z   Downloading soupsieve-2.7-py3-none-any.whl.metadata (4.6 kB)
2025-07-16T00:19:38.2616930Z Collecting typing-extensions>=4.0.0 (from beautifulsoup4>=4.12.0->book_triage==0.1.0)
2025-07-16T00:19:38.2678511Z   Downloading typing_extensions-4.14.1-py3-none-any.whl.metadata (3.0 kB)
2025-07-16T00:19:38.3024039Z Collecting starlette<0.48.0,>=0.40.0 (from fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T00:19:38.3080734Z   Downloading starlette-0.47.1-py3-none-any.whl.metadata (6.2 kB)
2025-07-16T00:19:38.4392545Z Collecting pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4 (from fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T00:19:38.4441406Z   Downloading pydantic-2.11.7-py3-none-any.whl.metadata (67 kB)
2025-07-16T00:19:38.4655164Z Collecting annotated-types>=0.6.0 (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T00:19:38.4712465Z   Downloading annotated_types-0.7.0-py3-none-any.whl.metadata (15 kB)
2025-07-16T00:19:39.1065305Z Collecting pydantic-core==2.33.2 (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T00:19:39.1164374Z   Downloading pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)
2025-07-16T00:19:39.1332428Z Collecting typing-inspection>=0.4.0 (from pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T00:19:39.1401216Z   Downloading typing_inspection-0.4.1-py3-none-any.whl.metadata (2.6 kB)
2025-07-16T00:19:39.1706575Z Collecting anyio<5,>=3.6.2 (from starlette<0.48.0,>=0.40.0->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T00:19:39.1751672Z   Downloading anyio-4.9.0-py3-none-any.whl.metadata (4.7 kB)
2025-07-16T00:19:39.2070541Z Collecting idna>=2.8 (from anyio<5,>=3.6.2->starlette<0.48.0,>=0.40.0->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T00:19:39.2113751Z   Downloading idna-3.10-py3-none-any.whl.metadata (10 kB)
2025-07-16T00:19:39.2248566Z Collecting sniffio>=1.1 (from anyio<5,>=3.6.2->starlette<0.48.0,>=0.40.0->fastapi>=0.104.0->book_triage==0.1.0)
2025-07-16T00:19:39.2292933Z   Downloading sniffio-1.3.1-py3-none-any.whl.metadata (3.9 kB)
2025-07-16T00:19:39.2560445Z Collecting distro<2,>=1.7.0 (from openai>=1.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.2614849Z   Downloading distro-1.9.0-py3-none-any.whl.metadata (6.8 kB)
2025-07-16T00:19:39.2869026Z Collecting httpx<1,>=0.23.0 (from openai>=1.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.2913177Z   Downloading httpx-0.28.1-py3-none-any.whl.metadata (7.1 kB)
2025-07-16T00:19:39.3609707Z Collecting jiter<1,>=0.4.0 (from openai>=1.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.3656803Z   Downloading jiter-0.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.2 kB)
2025-07-16T00:19:39.4461199Z Collecting certifi (from httpx<1,>=0.23.0->openai>=1.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.4506352Z   Downloading certifi-2025.7.14-py3-none-any.whl.metadata (2.4 kB)
2025-07-16T00:19:39.4732077Z Collecting httpcore==1.* (from httpx<1,>=0.23.0->openai>=1.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.4778075Z   Downloading httpcore-1.0.9-py3-none-any.whl.metadata (21 kB)
2025-07-16T00:19:39.4933796Z Collecting h11>=0.16 (from httpcore==1.*->httpx<1,>=0.23.0->openai>=1.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.4976013Z   Downloading h11-0.16.0-py3-none-any.whl.metadata (8.3 kB)
2025-07-16T00:19:39.6784527Z Collecting numpy>=1.26.0 (from pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.6836877Z   Downloading numpy-2.3.1-cp312-cp312-manylinux_2_28_x86_64.whl.metadata (62 kB)
2025-07-16T00:19:39.7126536Z Collecting python-dateutil>=2.8.2 (from pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.7172977Z   Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl.metadata (8.4 kB)
2025-07-16T00:19:39.7559744Z Collecting pytz>=2020.1 (from pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.7613671Z   Downloading pytz-2025.2-py2.py3-none-any.whl.metadata (22 kB)
2025-07-16T00:19:39.7793555Z Collecting tzdata>=2022.7 (from pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.7835211Z   Downloading tzdata-2025.2-py2.py3-none-any.whl.metadata (1.4 kB)
2025-07-16T00:19:39.8053743Z Collecting packaging>=21.3 (from pytesseract>=0.3.10->book_triage==0.1.0)
2025-07-16T00:19:39.8068561Z   Using cached packaging-25.0-py3-none-any.whl.metadata (3.3 kB)
2025-07-16T00:19:39.8260120Z Collecting iniconfig>=1 (from pytest>=7.4.0->book_triage==0.1.0)
2025-07-16T00:19:39.8305590Z   Downloading iniconfig-2.1.0-py3-none-any.whl.metadata (2.7 kB)
2025-07-16T00:19:39.8482026Z Collecting pluggy<2,>=1.5 (from pytest>=7.4.0->book_triage==0.1.0)
2025-07-16T00:19:39.8496155Z   Using cached pluggy-1.6.0-py3-none-any.whl.metadata (4.8 kB)
2025-07-16T00:19:39.8719123Z Collecting pygments>=2.7.2 (from pytest>=7.4.0->book_triage==0.1.0)
2025-07-16T00:19:39.8769980Z   Downloading pygments-2.19.2-py3-none-any.whl.metadata (2.5 kB)
2025-07-16T00:19:39.9464048Z Collecting six>=1.5 (from python-dateutil>=2.8.2->pandas>=2.0.0->book_triage==0.1.0)
2025-07-16T00:19:39.9518946Z   Downloading six-1.17.0-py2.py3-none-any.whl.metadata (1.7 kB)
2025-07-16T00:19:40.0434992Z Collecting charset_normalizer<4,>=2 (from requests>=2.31.0->book_triage==0.1.0)
2025-07-16T00:19:40.0479489Z   Downloading charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (35 kB)
2025-07-16T00:19:40.0862998Z Collecting urllib3<3,>=1.21.1 (from requests>=2.31.0->book_triage==0.1.0)
2025-07-16T00:19:40.0910541Z   Downloading urllib3-2.5.0-py3-none-any.whl.metadata (6.5 kB)
2025-07-16T00:19:40.2126942Z Collecting limits>=2.3 (from slowapi>=0.1.8->book_triage==0.1.0)
2025-07-16T00:19:40.2206001Z   Downloading limits-5.4.0-py3-none-any.whl.metadata (10 kB)
2025-07-16T00:19:40.2458049Z Collecting deprecated>=1.2 (from limits>=2.3->slowapi>=0.1.8->book_triage==0.1.0)
2025-07-16T00:19:40.2501371Z   Downloading Deprecated-1.2.18-py2.py3-none-any.whl.metadata (5.7 kB)
2025-07-16T00:19:40.3473997Z Collecting wrapt<2,>=1.10 (from deprecated>=1.2->limits>=2.3->slowapi>=0.1.8->book_triage==0.1.0)
2025-07-16T00:19:40.3521926Z   Downloading wrapt-1.17.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.4 kB)
2025-07-16T00:19:40.3841386Z Collecting click>=8.0.0 (from typer>=0.9.0->book_triage==0.1.0)
2025-07-16T00:19:40.3883540Z   Downloading click-8.2.1-py3-none-any.whl.metadata (2.5 kB)
2025-07-16T00:19:40.4110997Z Collecting shellingham>=1.3.0 (from typer>=0.9.0->book_triage==0.1.0)
2025-07-16T00:19:40.4155198Z   Downloading shellingham-1.5.4-py2.py3-none-any.whl.metadata (3.5 kB)
2025-07-16T00:19:40.4577865Z Collecting rich>=10.11.0 (from typer>=0.9.0->book_triage==0.1.0)
2025-07-16T00:19:40.4622740Z   Downloading rich-14.0.0-py3-none-any.whl.metadata (18 kB)
2025-07-16T00:19:40.4850696Z Collecting markdown-it-py>=2.2.0 (from rich>=10.11.0->typer>=0.9.0->book_triage==0.1.0)
2025-07-16T00:19:40.4891583Z   Downloading markdown_it_py-3.0.0-py3-none-any.whl.metadata (6.9 kB)
2025-07-16T00:19:40.5150702Z Collecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich>=10.11.0->typer>=0.9.0->book_triage==0.1.0)
2025-07-16T00:19:40.5191117Z   Downloading mdurl-0.1.2-py3-none-any.whl.metadata (1.6 kB)
2025-07-16T00:19:40.5787035Z Collecting httptools>=0.6.3 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T00:19:40.5841627Z   Downloading httptools-0.6.4-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.6 kB)
2025-07-16T00:19:40.6768755Z Collecting pyyaml>=5.1 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T00:19:40.6816959Z   Downloading PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.1 kB)
2025-07-16T00:19:40.7223964Z Collecting uvloop>=0.15.1 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T00:19:40.7279149Z   Downloading uvloop-0.21.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)
2025-07-16T00:19:40.8042842Z Collecting watchfiles>=0.13 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T00:19:40.8094373Z   Downloading watchfiles-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (4.9 kB)
2025-07-16T00:19:40.9026479Z Collecting websockets>=10.4 (from uvicorn[standard]>=0.24.0->book_triage==0.1.0)
2025-07-16T00:19:40.9072903Z   Downloading websockets-15.0.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.8 kB)
2025-07-16T00:19:40.9354934Z Downloading beautifulsoup4-4.13.4-py3-none-any.whl (187 kB)
2025-07-16T00:19:40.9481327Z Downloading coverage-7.9.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (245 kB)
2025-07-16T00:19:40.9610347Z Downloading fastapi-0.116.1-py3-none-any.whl (95 kB)
2025-07-16T00:19:40.9690342Z Downloading pydantic-2.11.7-py3-none-any.whl (444 kB)
2025-07-16T00:19:40.9849338Z Downloading pydantic_core-2.33.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.0 MB)
2025-07-16T00:19:41.0231635Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.0/2.0 MB 55.0 MB/s eta 0:00:00
2025-07-16T00:19:41.0276297Z Downloading starlette-0.47.1-py3-none-any.whl (72 kB)
2025-07-16T00:19:41.0344361Z Downloading anyio-4.9.0-py3-none-any.whl (100 kB)
2025-07-16T00:19:41.0409031Z Downloading annotated_types-0.7.0-py3-none-any.whl (13 kB)
2025-07-16T00:19:41.0466206Z Downloading idna-3.10-py3-none-any.whl (70 kB)
2025-07-16T00:19:41.0537636Z Downloading openai-1.96.1-py3-none-any.whl (757 kB)
2025-07-16T00:19:41.0682452Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 757.5/757.5 kB 52.7 MB/s eta 0:00:00
2025-07-16T00:19:41.0728025Z Downloading distro-1.9.0-py3-none-any.whl (20 kB)
2025-07-16T00:19:41.0792445Z Downloading httpx-0.28.1-py3-none-any.whl (73 kB)
2025-07-16T00:19:41.0863754Z Downloading httpcore-1.0.9-py3-none-any.whl (78 kB)
2025-07-16T00:19:41.0930588Z Downloading jiter-0.10.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (352 kB)
2025-07-16T00:19:41.1034377Z Downloading typing_extensions-4.14.1-py3-none-any.whl (43 kB)
2025-07-16T00:19:41.1100730Z Downloading h11-0.16.0-py3-none-any.whl (37 kB)
2025-07-16T00:19:41.1171987Z Downloading pandas-2.3.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.0 MB)
2025-07-16T00:19:41.1979177Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 12.0/12.0 MB 150.9 MB/s eta 0:00:00
2025-07-16T00:19:41.2023353Z Downloading numpy-2.3.1-cp312-cp312-manylinux_2_28_x86_64.whl (16.6 MB)
2025-07-16T00:19:41.2794185Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 16.6/16.6 MB 224.7 MB/s eta 0:00:00
2025-07-16T00:19:41.2846900Z Downloading pillow-11.3.0-cp312-cp312-manylinux_2_27_x86_64.manylinux_2_28_x86_64.whl (6.6 MB)
2025-07-16T00:19:41.3173312Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 6.6/6.6 MB 216.8 MB/s eta 0:00:00
2025-07-16T00:19:41.3226267Z Downloading pytesseract-0.3.13-py3-none-any.whl (14 kB)
2025-07-16T00:19:41.3260566Z Using cached packaging-25.0-py3-none-any.whl (66 kB)
2025-07-16T00:19:41.3322023Z Downloading pytest-8.4.1-py3-none-any.whl (365 kB)
2025-07-16T00:19:41.3373939Z Using cached pluggy-1.6.0-py3-none-any.whl (20 kB)
2025-07-16T00:19:41.3416295Z Downloading iniconfig-2.1.0-py3-none-any.whl (6.0 kB)
2025-07-16T00:19:41.3513416Z Downloading pygments-2.19.2-py3-none-any.whl (1.2 MB)
2025-07-16T00:19:41.3612764Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.2/1.2 MB 143.6 MB/s eta 0:00:00
2025-07-16T00:19:41.3658523Z Downloading pytest_asyncio-1.0.0-py3-none-any.whl (15 kB)
2025-07-16T00:19:41.3740470Z Downloading pytest_cov-6.2.1-py3-none-any.whl (24 kB)
2025-07-16T00:19:41.3809096Z Downloading python_dateutil-2.9.0.post0-py2.py3-none-any.whl (229 kB)
2025-07-16T00:19:41.3881445Z Downloading python_dotenv-1.1.1-py3-none-any.whl (20 kB)
2025-07-16T00:19:41.3953820Z Downloading python_magic-0.4.27-py2.py3-none-any.whl (13 kB)
2025-07-16T00:19:41.4021634Z Downloading python_multipart-0.0.20-py3-none-any.whl (24 kB)
2025-07-16T00:19:41.4095600Z Downloading pytz-2025.2-py2.py3-none-any.whl (509 kB)
2025-07-16T00:19:41.4188739Z Downloading requests-2.32.4-py3-none-any.whl (64 kB)
2025-07-16T00:19:41.4254076Z Downloading charset_normalizer-3.4.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (148 kB)
2025-07-16T00:19:41.4327068Z Downloading urllib3-2.5.0-py3-none-any.whl (129 kB)
2025-07-16T00:19:41.4406165Z Downloading certifi-2025.7.14-py3-none-any.whl (162 kB)
2025-07-16T00:19:41.4474233Z Downloading six-1.17.0-py2.py3-none-any.whl (11 kB)
2025-07-16T00:19:41.4536258Z Downloading slowapi-0.1.9-py3-none-any.whl (14 kB)
2025-07-16T00:19:41.4596573Z Downloading limits-5.4.0-py3-none-any.whl (60 kB)
2025-07-16T00:19:41.4658619Z Downloading Deprecated-1.2.18-py2.py3-none-any.whl (10.0 kB)
2025-07-16T00:19:41.4720381Z Downloading wrapt-1.17.2-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (89 kB)
2025-07-16T00:19:41.4786609Z Downloading sniffio-1.3.1-py3-none-any.whl (10 kB)
2025-07-16T00:19:41.4858135Z Downloading soupsieve-2.7-py3-none-any.whl (36 kB)
2025-07-16T00:19:41.4923980Z Downloading tqdm-4.67.1-py3-none-any.whl (78 kB)
2025-07-16T00:19:41.4989255Z Downloading typer-0.16.0-py3-none-any.whl (46 kB)
2025-07-16T00:19:41.5054789Z Downloading click-8.2.1-py3-none-any.whl (102 kB)
2025-07-16T00:19:41.5134442Z Downloading rich-14.0.0-py3-none-any.whl (243 kB)
2025-07-16T00:19:41.5211474Z Downloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)
2025-07-16T00:19:41.5277472Z Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)
2025-07-16T00:19:41.5339514Z Downloading shellingham-1.5.4-py2.py3-none-any.whl (9.8 kB)
2025-07-16T00:19:41.5404036Z Downloading typing_inspection-0.4.1-py3-none-any.whl (14 kB)
2025-07-16T00:19:41.5489218Z Downloading tzdata-2025.2-py2.py3-none-any.whl (347 kB)
2025-07-16T00:19:41.5585671Z Downloading uvicorn-0.35.0-py3-none-any.whl (66 kB)
2025-07-16T00:19:41.5653820Z Downloading httptools-0.6.4-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (510 kB)
2025-07-16T00:19:41.5753119Z Downloading PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (767 kB)
2025-07-16T00:19:41.5823781Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 767.5/767.5 kB 117.3 MB/s eta 0:00:00
2025-07-16T00:19:41.5866988Z Downloading uvloop-0.21.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (4.7 MB)
2025-07-16T00:19:41.6148990Z    ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 4.7/4.7 MB 178.9 MB/s eta 0:00:00
2025-07-16T00:19:41.6195450Z Downloading watchfiles-1.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (452 kB)
2025-07-16T00:19:41.6284726Z Downloading websockets-15.0.1-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (182 kB)
2025-07-16T00:19:41.7356334Z Building wheels for collected packages: book_triage
2025-07-16T00:19:41.7365259Z   Building editable for book_triage (pyproject.toml): started
2025-07-16T00:19:41.7734776Z   Building editable for book_triage (pyproject.toml): finished with status 'done'
2025-07-16T00:19:41.7741197Z   Created wheel for book_triage: filename=book_triage-0.1.0-py3-none-any.whl size=10296 sha256=539e4c1255184acd7ec7c2a69df551a4721ec536aa76a12259e4da33ac739828
2025-07-16T00:19:41.7743052Z   Stored in directory: /tmp/pip-ephem-wheel-cache-414zwzt8/wheels/d3/8c/55/20b7343e2b9725e0ea7cb71535aa1bddd3950a939b56e58f9b
2025-07-16T00:19:41.7776069Z Successfully built book_triage
2025-07-16T00:19:41.9090211Z Installing collected packages: pytz, wrapt, websockets, uvloop, urllib3, tzdata, typing-extensions, tqdm, soupsieve, sniffio, six, shellingham, pyyaml, python-multipart, python-magic, python-dotenv, pygments, pluggy, pillow, packaging, numpy, mdurl, jiter, iniconfig, idna, httptools, h11, distro, coverage, click, charset_normalizer, certifi, annotated-types, uvicorn, typing-inspection, requests, python-dateutil, pytest, pytesseract, pydantic-core, markdown-it-py, httpcore, deprecated, beautifulsoup4, anyio, watchfiles, starlette, rich, pytest-cov, pytest-asyncio, pydantic, pandas, limits, httpx, typer, slowapi, openai, fastapi, book_triage
2025-07-16T00:19:53.2176567Z 
2025-07-16T00:19:53.2235701Z Successfully installed annotated-types-0.7.0 anyio-4.9.0 beautifulsoup4-4.13.4 book_triage-0.1.0 certifi-2025.7.14 charset_normalizer-3.4.2 click-8.2.1 coverage-7.9.2 deprecated-1.2.18 distro-1.9.0 fastapi-0.116.1 h11-0.16.0 httpcore-1.0.9 httptools-0.6.4 httpx-0.28.1 idna-3.10 iniconfig-2.1.0 jiter-0.10.0 limits-5.4.0 markdown-it-py-3.0.0 mdurl-0.1.2 numpy-2.3.1 openai-1.96.1 packaging-25.0 pandas-2.3.1 pillow-11.3.0 pluggy-1.6.0 pydantic-2.11.7 pydantic-core-2.33.2 pygments-2.19.2 pytesseract-0.3.13 pytest-8.4.1 pytest-asyncio-1.0.0 pytest-cov-6.2.1 python-dateutil-2.9.0.post0 python-dotenv-1.1.1 python-magic-0.4.27 python-multipart-0.0.20 pytz-2025.2 pyyaml-6.0.2 requests-2.32.4 rich-14.0.0 shellingham-1.5.4 six-1.17.0 slowapi-0.1.9 sniffio-1.3.1 soupsieve-2.7 starlette-0.47.1 tqdm-4.67.1 typer-0.16.0 typing-extensions-4.14.1 typing-inspection-0.4.1 tzdata-2025.2 urllib3-2.5.0 uvicorn-0.35.0 uvloop-0.21.0 watchfiles-1.1.0 websockets-15.0.1 wrapt-1.17.2
2025-07-16T00:19:53.8094915Z ##[group]Run python -m pytest tests/ -v --cov=book_triage --cov-report=term-missing
2025-07-16T00:19:53.8095483Z [36;1mpython -m pytest tests/ -v --cov=book_triage --cov-report=term-missing[0m
2025-07-16T00:19:53.8125941Z shell: /usr/bin/bash -e {0}
2025-07-16T00:19:53.8126176Z env:
2025-07-16T00:19:53.8126424Z   pythonLocation: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:53.8126867Z   PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib/pkgconfig
2025-07-16T00:19:53.8127261Z   Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:53.8127608Z   Python2_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:53.8127939Z   Python3_ROOT_DIR: /opt/hostedtoolcache/Python/3.12.11/x64
2025-07-16T00:19:53.8128280Z   LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.12.11/x64/lib
2025-07-16T00:19:53.8128572Z ##[endgroup]
2025-07-16T00:19:54.4940819Z ============================= test session starts ==============================
2025-07-16T00:19:54.4942288Z platform linux -- Python 3.12.11, pytest-8.4.1, pluggy-1.6.0 -- /opt/hostedtoolcache/Python/3.12.11/x64/bin/python
2025-07-16T00:19:54.4943255Z cachedir: .pytest_cache
2025-07-16T00:19:54.4943858Z rootdir: /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T00:19:54.4944529Z configfile: pyproject.toml
2025-07-16T00:19:54.4945409Z plugins: cov-6.2.1, asyncio-1.0.0, anyio-4.9.0
2025-07-16T00:19:54.4946718Z asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
2025-07-16T00:19:58.9301036Z collecting ... collected 193 items
2025-07-16T00:19:58.9301437Z 
2025-07-16T00:19:59.0110836Z tests/test_api.py::TestAPIEndpoints::test_root_endpoint PASSED           [  0%]
2025-07-16T00:19:59.0164443Z tests/test_api.py::TestAPIEndpoints::test_health_endpoint PASSED         [  1%]
2025-07-16T00:19:59.0210211Z tests/test_api.py::TestAPIEndpoints::test_get_books_empty PASSED         [  1%]
2025-07-16T00:19:59.0311455Z tests/test_api.py::TestAPIEndpoints::test_get_books_with_data PASSED     [  2%]
2025-07-16T00:19:59.0616009Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_success PASSED    [  2%]
2025-07-16T00:19:59.0660235Z tests/test_api.py::TestAPIEndpoints::test_scan_books_unauthorized PASSED [  3%]
2025-07-16T00:19:59.0702060Z tests/test_api.py::TestAPIEndpoints::test_rate_limiting_books_endpoint PASSED [  3%]
2025-07-16T00:19:59.1020124Z tests/test_api.py::TestAPIEndpoints::test_file_upload_size_limit PASSED  [  4%]
2025-07-16T00:19:59.1065644Z tests/test_api.py::TestAPIEndpoints::test_security_headers_in_response PASSED [  4%]
2025-07-16T00:19:59.1151777Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_no_title_extracted PASSED [  5%]
2025-07-16T00:19:59.1235694Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_vision_processor_exception PASSED [  5%]
2025-07-16T00:19:59.1281448Z tests/test_api.py::TestAPIEndpoints::test_upload_photo_no_file PASSED    [  6%]
2025-07-16T00:19:59.1338829Z tests/test_api.py::TestAPIEndpoints::test_scan_books_success PASSED      [  6%]
2025-07-16T00:19:59.1393999Z tests/test_api.py::TestAPIEndpoints::test_scan_books_exception PASSED    [  7%]
2025-07-16T00:19:59.1445354Z tests/test_api.py::TestAPIEndpoints::test_rescan_title_record_not_found PASSED [  7%]
2025-07-16T00:19:59.1516310Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_success PASSED [  8%]
2025-07-16T00:19:59.1559916Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_missing_isbn PASSED [  8%]
2025-07-16T00:19:59.1611945Z tests/test_api.py::TestAPIEndpoints::test_add_manual_title_invalid_isbn PASSED [  9%]
2025-07-16T00:19:59.1777462Z tests/test_api.py::TestAPIEndpoints::test_rescan_title_preserves_values PASSED [  9%]
2025-07-16T00:19:59.1792204Z tests/test_api.py::TestAPIInitialization::test_initialize_app PASSED     [ 10%]
2025-07-16T00:19:59.1851566Z tests/test_api.py::TestAPIInitialization::test_app_without_initialization PASSED [ 10%]
2025-07-16T00:19:59.2089722Z tests/test_cli.py::TestCLICommands::test_cli_help PASSED                 [ 11%]
2025-07-16T00:19:59.2150909Z tests/test_cli.py::TestCLICommands::test_scan_command_success PASSED     [ 11%]
2025-07-16T00:19:59.2214948Z tests/test_cli.py::TestCLICommands::test_scan_command_with_options PASSED [ 12%]
2025-07-16T00:19:59.2272232Z tests/test_cli.py::TestCLICommands::test_scan_command_no_records PASSED  [ 12%]
2025-07-16T00:19:59.2331661Z tests/test_cli.py::TestCLICommands::test_scan_command_nonexistent_file PASSED [ 13%]
2025-07-16T00:19:59.2386849Z tests/test_cli.py::TestCLICommands::test_scan_command_exception PASSED   [ 13%]
2025-07-16T00:19:59.2453692Z tests/test_cli.py::TestCLICommands::test_web_command_success PASSED      [ 14%]
2025-07-16T00:19:59.2519411Z tests/test_cli.py::TestCLICommands::test_web_command_with_options PASSED [ 15%]
2025-07-16T00:19:59.2582867Z tests/test_cli.py::TestCLICommands::test_web_command_nonexistent_file PASSED [ 15%]
2025-07-16T00:19:59.2641416Z tests/test_cli.py::TestCLICommands::test_web_command_exception PASSED    [ 16%]
2025-07-16T00:19:59.2728624Z tests/test_cli.py::TestCLICommands::test_create_csv_command_empty PASSED [ 16%]
2025-07-16T00:19:59.2826428Z tests/test_cli.py::TestCLICommands::test_create_csv_command_with_sample PASSED [ 17%]
2025-07-16T00:19:59.2890181Z tests/test_cli.py::TestCLICommands::test_create_csv_command_creates_directory PASSED [ 17%]
2025-07-16T00:19:59.2951376Z tests/test_cli.py::TestCLICommands::test_create_csv_command_exception PASSED [ 18%]
2025-07-16T00:19:59.3037995Z tests/test_cli.py::TestCLICommands::test_info_command_success PASSED     [ 18%]
2025-07-16T00:19:59.3088698Z tests/test_cli.py::TestCLICommands::test_info_command_nonexistent_file PASSED [ 19%]
2025-07-16T00:19:59.3149894Z tests/test_cli.py::TestCLICommands::test_info_command_exception PASSED   [ 19%]
2025-07-16T00:19:59.3232397Z tests/test_cli.py::TestCLIValidation::test_scan_cost_validation_min PASSED [ 20%]
2025-07-16T00:19:59.3315434Z tests/test_cli.py::TestCLIValidation::test_scan_cost_validation_max PASSED [ 20%]
2025-07-16T00:19:59.3386454Z tests/test_cli.py::TestCLIValidation::test_port_validation PASSED        [ 21%]
2025-07-16T00:19:59.3462614Z tests/test_cli.py::TestCLIIntegration::test_scan_integration_with_core PASSED [ 21%]
2025-07-16T00:19:59.3531479Z tests/test_cli.py::TestCLIIntegration::test_web_integration_with_api PASSED [ 22%]
2025-07-16T00:19:59.3674736Z tests/test_cli.py::TestCLIEnvironment::test_environment_loading PASSED   [ 22%]
2025-07-16T00:19:59.3815359Z tests/test_cli.py::TestCLIEnvironment::test_logging_configuration PASSED [ 23%]
2025-07-16T00:19:59.3883639Z tests/test_cli.py::TestCLIEnvironment::test_verbose_logging PASSED       [ 23%]
2025-07-16T00:19:59.3896549Z tests/test_core.py::TestBookRecord::test_book_record_creation PASSED     [ 24%]
2025-07-16T00:19:59.3909304Z tests/test_core.py::TestBookRecord::test_book_record_to_dict PASSED      [ 24%]
2025-07-16T00:19:59.3922134Z tests/test_core.py::TestBookRecord::test_book_record_with_all_fields PASSED [ 25%]
2025-07-16T00:19:59.3938059Z tests/test_core.py::TestBookTriage::test_book_triage_initialization_nonexistent_file PASSED [ 25%]
2025-07-16T00:19:59.3984967Z tests/test_core.py::TestBookTriage::test_book_triage_initialization_with_data PASSED [ 26%]
2025-07-16T00:19:59.4000581Z tests/test_core.py::TestBookTriage::test_calculate_utilities PASSED      [ 26%]
2025-07-16T00:19:59.4015294Z tests/test_core.py::TestBookTriage::test_calculate_utilities_with_none_values PASSED [ 27%]
2025-07-16T00:19:59.4030356Z tests/test_core.py::TestBookTriage::test_make_decision PASSED            [ 27%]
2025-07-16T00:19:59.4083572Z tests/test_core.py::TestBookTriage::test_add_record PASSED               [ 28%]
2025-07-16T00:19:59.4134283Z tests/test_core.py::TestBookTriage::test_get_record_by_id PASSED         [ 29%]
2025-07-16T00:19:59.4184005Z tests/test_core.py::TestBookTriage::test_price_to_v_calculation PASSED   [ 29%]
2025-07-16T00:19:59.4206744Z tests/test_core.py::TestBookTriage::test_enrich_with_gpt4o_mock PASSED   [ 30%]
2025-07-16T00:19:59.4222110Z tests/test_core.py::TestBookTriage::test_scan_cost_parameter PASSED      [ 30%]
2025-07-16T00:19:59.4234035Z tests/test_core.py::TestDecisionEnum::test_decision_values PASSED        [ 31%]
2025-07-16T00:19:59.4248612Z tests/test_core.py::TestDecisionEnum::test_decision_comparison PASSED    [ 31%]
2025-07-16T00:19:59.4301130Z tests/test_core_coverage.py::TestBookTriageCoverage::test_load_csv_with_invalid_float_values PASSED [ 32%]
2025-07-16T00:19:59.4347544Z tests/test_core_coverage.py::TestBookTriageCoverage::test_load_csv_with_nan_values PASSED [ 32%]
2025-07-16T00:19:59.4393713Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_no_title_no_isbn PASSED [ 33%]
2025-07-16T00:19:59.4439821Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_invalid_isbn PASSED [ 33%]
2025-07-16T00:19:59.4496981Z tests/test_core_coverage.py::TestBookTriageCoverage::test_enrich_with_gpt4o_json_parsing_error PASSED [ 34%]
2025-07-16T00:19:59.4544436Z tests/test_core_coverage.py::TestBookTriageCoverage::test_calculate_utilities_with_none_values PASSED [ 34%]
2025-07-16T00:19:59.4592011Z tests/test_core_coverage.py::TestBookTriageCoverage::test_make_decision_with_verification_calculation PASSED [ 35%]
2025-07-16T00:19:59.4640881Z tests/test_core_coverage.py::TestBookTriageCoverage::test_save_csv_with_no_records PASSED [ 35%]
2025-07-16T00:19:59.4653813Z tests/test_core_simple.py::TestBookRecord::test_book_record_creation PASSED [ 36%]
2025-07-16T00:19:59.4666219Z tests/test_core_simple.py::TestBookRecord::test_book_record_with_values PASSED [ 36%]
2025-07-16T00:19:59.4680489Z tests/test_core_simple.py::TestBookTriage::test_book_triage_initialization PASSED [ 37%]
2025-07-16T00:19:59.4694654Z tests/test_core_simple.py::TestBookTriage::test_calculate_utilities_simple PASSED [ 37%]
2025-07-16T00:19:59.4709121Z tests/test_core_simple.py::TestBookTriage::test_make_decision_simple PASSED [ 38%]
2025-07-16T00:19:59.4723482Z tests/test_core_simple.py::TestDecision::test_decision_values PASSED     [ 38%]
2025-07-16T00:19:59.6301717Z tests/test_frontend_layout.py::TestFrontendLayout::test_modern_css_styling_present ERROR [ 39%]
2025-07-16T00:19:59.6818307Z tests/test_frontend_layout.py::TestFrontendLayout::test_control_panel_styling ERROR [ 39%]
2025-07-16T00:19:59.7323713Z tests/test_frontend_layout.py::TestFrontendLayout::test_table_container_styling ERROR [ 40%]
2025-07-16T00:19:59.7846290Z tests/test_frontend_layout.py::TestFrontendLayout::test_upload_section_styling ERROR [ 40%]
2025-07-16T00:19:59.8362146Z tests/test_frontend_layout.py::TestFrontendLayout::test_button_styling ERROR [ 41%]
2025-07-16T00:19:59.8880103Z tests/test_frontend_layout.py::TestFrontendLayout::test_form_layout ERROR [ 41%]
2025-07-16T00:19:59.9398064Z tests/test_frontend_layout.py::TestFrontendLayout::test_input_field_styling ERROR [ 42%]
2025-07-16T00:19:59.9908131Z tests/test_frontend_layout.py::TestFrontendLayout::test_responsive_table_headers ERROR [ 43%]
2025-07-16T00:20:00.0425153Z tests/test_frontend_layout.py::TestFrontendLayout::test_decision_row_colors ERROR [ 43%]
2025-07-16T00:20:00.0925599Z tests/test_frontend_layout.py::TestFrontendLayout::test_main_content_wrapper ERROR [ 44%]
2025-07-16T00:20:00.1439644Z tests/test_frontend_layout.py::TestFrontendLayout::test_hover_effects ERROR [ 44%]
2025-07-16T00:20:00.1939915Z tests/test_frontend_layout.py::TestTableFunctionality::test_table_renders_with_data ERROR [ 45%]
2025-07-16T00:20:00.2435187Z tests/test_frontend_layout.py::TestTableFunctionality::test_table_has_all_columns ERROR [ 45%]
2025-07-16T00:20:00.2937969Z tests/test_frontend_layout.py::TestTableFunctionality::test_input_field_classes ERROR [ 46%]
2025-07-16T00:20:00.3437259Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_viewport_meta_tag ERROR [ 46%]
2025-07-16T00:20:00.4461146Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_semantic_html_structure ERROR [ 47%]
2025-07-16T00:20:00.4962763Z tests/test_frontend_layout.py::TestLayoutResponsiveness::test_css_organization ERROR [ 47%]
2025-07-16T00:20:00.5587249Z tests/test_indicators_implementation.py::test_v_calculation_from_prices PASSED [ 48%]
2025-07-16T00:20:00.5601474Z tests/test_indicators_implementation.py::test_utility_calculations PASSED [ 48%]
2025-07-16T00:20:00.5617528Z tests/test_indicators_implementation.py::test_decision_making PASSED     [ 49%]
2025-07-16T00:20:00.5630083Z tests/test_indicators_implementation.py::test_human_vs_auto_indicators PASSED [ 49%]
2025-07-16T00:20:00.5652097Z tests/test_indicators_implementation.py::test_scan_cost_impact PASSED    [ 50%]
2025-07-16T00:20:00.5746565Z tests/test_layout_basic.py::TestBasicLayout::test_homepage_loads PASSED  [ 50%]
2025-07-16T00:20:00.5830666Z tests/test_layout_basic.py::TestBasicLayout::test_modern_css_included PASSED [ 51%]
2025-07-16T00:20:00.5974798Z tests/test_layout_basic.py::TestBasicLayout::test_sticky_header_css FAILED [ 51%]
2025-07-16T00:20:00.6115328Z tests/test_layout_basic.py::TestBasicLayout::test_table_container_css FAILED [ 52%]
2025-07-16T00:20:00.6204093Z tests/test_layout_basic.py::TestBasicLayout::test_form_styling PASSED    [ 52%]
2025-07-16T00:20:00.6288460Z tests/test_layout_basic.py::TestBasicLayout::test_button_styling PASSED  [ 53%]
2025-07-16T00:20:00.6372296Z tests/test_layout_basic.py::TestBasicLayout::test_upload_section_present PASSED [ 53%]
2025-07-16T00:20:00.6462457Z tests/test_layout_basic.py::TestBasicLayout::test_manual_input_section PASSED [ 54%]
2025-07-16T00:20:00.6554723Z tests/test_layout_basic.py::TestBasicLayout::test_table_headers_present PASSED [ 54%]
2025-07-16T00:20:00.6647462Z tests/test_layout_basic.py::TestLayoutComponents::test_control_panel_structure PASSED [ 55%]
2025-07-16T00:20:00.6734462Z tests/test_layout_basic.py::TestLayoutComponents::test_main_content_wrapper PASSED [ 55%]
2025-07-16T00:20:00.6826261Z tests/test_layout_basic.py::TestLayoutComponents::test_css_organization PASSED [ 56%]
2025-07-16T00:20:00.6915684Z tests/test_layout_basic.py::TestLayoutComponents::test_decision_colors_css PASSED [ 56%]
2025-07-16T00:20:00.7009287Z tests/test_layout_basic.py::TestAPIEndpoints::test_books_endpoint PASSED [ 57%]
2025-07-16T00:20:00.7099065Z tests/test_layout_basic.py::TestAPIEndpoints::test_health_endpoint PASSED [ 58%]
2025-07-16T00:20:00.7123846Z tests/test_main.py::TestMainModule::test_main_no_args_with_existing_csv PASSED [ 58%]
2025-07-16T00:20:00.7146467Z tests/test_main.py::TestMainModule::test_main_no_args_creates_new_csv PASSED [ 59%]
2025-07-16T00:20:00.7167342Z tests/test_main.py::TestMainModule::test_main_with_args PASSED           [ 59%]
2025-07-16T00:20:00.7188377Z tests/test_main.py::TestMainModule::test_main_finds_alternative_csv_paths PASSED [ 60%]
2025-07-16T00:20:00.7207128Z tests/test_main.py::TestMainModule::test_main_module_entry_point PASSED  [ 60%]
2025-07-16T00:20:00.7257424Z tests/test_scroll_preservation.py::TestScrollPreservation::test_loadbooks_accepts_preserve_scroll_parameter PASSED [ 61%]
2025-07-16T00:20:00.7301058Z tests/test_scroll_preservation.py::TestScrollPreservation::test_savebook_calls_loadbooks_with_true PASSED [ 61%]
2025-07-16T00:20:00.7344594Z tests/test_scroll_preservation.py::TestScrollPreservation::test_scroll_preservation_logic_exists PASSED [ 62%]
2025-07-16T00:20:00.7387531Z tests/test_scroll_preservation.py::TestScrollPreservation::test_scroll_container_selector PASSED [ 62%]
2025-07-16T00:20:00.7432946Z tests/test_scroll_preservation.py::TestScrollPreservation::test_manual_submit_calls_loadbooks_with_target PASSED [ 63%]
2025-07-16T00:20:00.7502227Z tests/test_scroll_preservation.py::TestScrollPreservation::test_integration_save_preserves_scroll PASSED [ 63%]
2025-07-16T00:20:00.7526810Z tests/test_security.py::TestGetCurrentUser::test_valid_credentials_default PASSED [ 64%]
2025-07-16T00:20:00.7550027Z tests/test_security.py::TestGetCurrentUser::test_valid_credentials_custom PASSED [ 64%]
2025-07-16T00:20:00.7575156Z tests/test_security.py::TestGetCurrentUser::test_invalid_username PASSED [ 65%]
2025-07-16T00:20:00.7599090Z tests/test_security.py::TestGetCurrentUser::test_invalid_password PASSED [ 65%]
2025-07-16T00:20:00.7621746Z tests/test_security.py::TestGetCurrentUser::test_both_invalid PASSED     [ 66%]
2025-07-16T00:20:00.7644668Z tests/test_security.py::TestGetCurrentUser::test_empty_credentials PASSED [ 66%]
2025-07-16T00:20:00.7669832Z tests/test_security.py::TestAdminRequired::test_admin_required_with_user PASSED [ 67%]
2025-07-16T00:20:00.7687968Z tests/test_security.py::TestAdminRequired::test_admin_required_without_user PASSED [ 67%]
2025-07-16T00:20:00.7705386Z tests/test_security.py::TestAdminRequired::test_admin_required_with_none_user PASSED [ 68%]
2025-07-16T00:20:00.7723466Z tests/test_security.py::TestValidateFileUpload::test_valid_small_image PASSED [ 68%]
2025-07-16T00:20:00.7743334Z tests/test_security.py::TestValidateFileUpload::test_file_too_large PASSED [ 69%]
2025-07-16T00:20:00.7847866Z tests/test_security.py::TestValidateFileUpload::test_non_image_file FAILED [ 69%]
2025-07-16T00:20:00.7863908Z tests/test_security.py::TestValidateFileUpload::test_magic_exception PASSED [ 70%]
2025-07-16T00:20:00.7886918Z tests/test_security.py::TestValidateFileUpload::test_different_image_types PASSED [ 70%]
2025-07-16T00:20:00.7906195Z tests/test_security.py::TestSanitizeImage::test_sanitize_valid_rgb_image PASSED [ 71%]
2025-07-16T00:20:00.7928587Z tests/test_security.py::TestSanitizeImage::test_sanitize_rgba_image PASSED [ 72%]
2025-07-16T00:20:00.7948040Z tests/test_security.py::TestSanitizeImage::test_sanitize_palette_image PASSED [ 72%]
2025-07-16T00:20:00.8659221Z tests/test_security.py::TestSanitizeImage::test_sanitize_invalid_image_data PASSED [ 73%]
2025-07-16T00:20:00.8674340Z tests/test_security.py::TestSanitizeImage::test_sanitize_corrupted_image PASSED [ 73%]
2025-07-16T00:20:00.8695626Z tests/test_security.py::TestSanitizeImage::test_sanitize_quality_setting PASSED [ 74%]
2025-07-16T00:20:00.8721403Z tests/test_security.py::TestSecurityIntegration::test_full_file_security_pipeline PASSED [ 74%]
2025-07-16T00:20:00.8857990Z tests/test_sticky_form.py::test_sticky_form_css_present FAILED           [ 75%]
2025-07-16T00:20:00.8944298Z tests/test_sticky_form.py::test_sticky_form_html_structure PASSED        [ 75%]
2025-07-16T00:20:00.9069576Z tests/test_sticky_form.py::test_body_padding_adjustment FAILED           [ 76%]
2025-07-16T00:20:00.9156913Z tests/test_sticky_form.py::test_books_database_outside_control_panel PASSED [ 76%]
2025-07-16T00:20:00.9245352Z tests/test_sticky_form.py::test_toast_notifications_position PASSED      [ 77%]
2025-07-16T00:20:00.9334109Z tests/test_sticky_form.py::test_form_functionality_still_works PASSED    [ 77%]
2025-07-16T00:20:00.9472819Z tests/test_sticky_table_headers.py::test_sticky_table_headers_css_present FAILED [ 78%]
2025-07-16T00:20:00.9617560Z tests/test_sticky_table_headers.py::test_table_header_structure FAILED   [ 78%]
2025-07-16T00:20:00.9757623Z tests/test_sticky_table_headers.py::test_table_header_css_specificity FAILED [ 79%]
2025-07-16T00:20:00.9899382Z tests/test_sticky_table_headers.py::test_sticky_header_positioning FAILED [ 79%]
2025-07-16T00:20:01.0040648Z tests/test_sticky_table_headers.py::test_z_index_layering FAILED         [ 80%]
2025-07-16T00:20:01.0179422Z tests/test_sticky_table_headers.py::test_table_headers_visual_separation FAILED [ 80%]
2025-07-16T00:20:01.0270679Z tests/test_sticky_table_headers.py::test_books_database_section_outside_control_panel PASSED [ 81%]
2025-07-16T00:20:01.0410855Z tests/test_sticky_table_headers.py::test_complete_sticky_ui_integration FAILED [ 81%]
2025-07-16T00:20:02.5864988Z tests/test_verified_display_logic.py::test_verified_column_uses_strict_equality PASSED [ 82%]
2025-07-16T00:20:02.5888484Z tests/test_vision.py::TestVisionProcessor::test_vision_processor_initialization_with_openai PASSED [ 82%]
2025-07-16T00:20:02.5900479Z tests/test_vision.py::TestVisionProcessor::test_vision_processor_initialization_without_openai PASSED [ 83%]
2025-07-16T00:20:02.5913231Z tests/test_vision.py::TestVisionProcessor::test_generate_id PASSED       [ 83%]
2025-07-16T00:20:02.5968928Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_openai_success PASSED [ 84%]
2025-07-16T00:20:02.6004810Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_fallback_to_tesseract PASSED [ 84%]
2025-07-16T00:20:02.6026885Z tests/test_vision.py::TestVisionProcessor::test_extract_title_from_image_nonexistent_file PASSED [ 85%]
2025-07-16T00:20:02.6048233Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_success PASSED [ 86%]
2025-07-16T00:20:02.6073045Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_empty_result PASSED [ 86%]
2025-07-16T00:20:02.6096742Z tests/test_vision.py::TestVisionProcessor::test_extract_with_tesseract_error PASSED [ 87%]
2025-07-16T00:20:02.6139720Z tests/test_vision.py::TestVisionProcessor::test_extract_with_openai_vision_no_content PASSED [ 87%]
2025-07-16T00:20:02.6170580Z tests/test_vision.py::TestVisionProcessor::test_extract_with_openai_vision_no_client PASSED [ 88%]
2025-07-16T00:20:02.6219013Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_from_image_success PASSED [ 88%]
2025-07-16T00:20:02.6240303Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_tesseract_fallback PASSED [ 89%]
2025-07-16T00:20:02.6253541Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_nonexistent_file PASSED [ 89%]
2025-07-16T00:20:02.6274092Z tests/test_vision.py::TestVisionProcessor::test_extract_title_and_isbn_no_isbn_found PASSED [ 90%]
2025-07-16T00:20:02.6304500Z tests/test_vision.py::TestVisionProcessor::test_image_format_conversion PASSED [ 90%]
2025-07-16T00:20:02.6330861Z tests/test_vision.py::TestVisionProcessorIntegration::test_processor_with_real_image_mock_ocr PASSED [ 91%]
2025-07-16T00:20:02.6347181Z tests/test_vision_fixed.py::TestVisionProcessor::test_vision_processor_initialization_with_openai PASSED [ 91%]
2025-07-16T00:20:02.6358843Z tests/test_vision_fixed.py::TestVisionProcessor::test_vision_processor_initialization_without_openai PASSED [ 92%]
2025-07-16T00:20:02.6370556Z tests/test_vision_fixed.py::TestVisionProcessor::test_generate_id PASSED [ 92%]
2025-07-16T00:20:02.6383501Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_from_image_nonexistent_file PASSED [ 93%]
2025-07-16T00:20:02.6428023Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_with_openai_vision_success PASSED [ 93%]
2025-07-16T00:20:02.6471166Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_fallback_to_tesseract PASSED [ 94%]
2025-07-16T00:20:02.6492226Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_success PASSED [ 94%]
2025-07-16T00:20:02.6513529Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_empty_result PASSED [ 95%]
2025-07-16T00:20:02.6535659Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_tesseract_error PASSED [ 95%]
2025-07-16T00:20:02.6578919Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_openai_vision_no_content PASSED [ 96%]
2025-07-16T00:20:02.6597724Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_with_openai_vision_no_client PASSED [ 96%]
2025-07-16T00:20:02.6639328Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_from_image_success PASSED [ 97%]
2025-07-16T00:20:02.6662288Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_tesseract_fallback PASSED [ 97%]
2025-07-16T00:20:02.6676084Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_nonexistent_file PASSED [ 98%]
2025-07-16T00:20:02.6697972Z tests/test_vision_fixed.py::TestVisionProcessor::test_extract_title_and_isbn_no_isbn_found PASSED [ 98%]
2025-07-16T00:20:02.6710364Z tests/test_vision_fixed.py::TestVisionProcessor::test_image_format_conversion PASSED [ 99%]
2025-07-16T00:20:02.7294339Z tests/test_vision_fixed.py::TestVisionProcessorIntegration::test_processor_with_real_image_mock_ocr PASSED [100%]
2025-07-16T00:20:02.7295405Z 
2025-07-16T00:20:02.7296245Z ==================================== ERRORS ====================================
2025-07-16T00:20:02.7297168Z _____ ERROR at setup of TestFrontendLayout.test_modern_css_styling_present _____
2025-07-16T00:20:02.7297953Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7298708Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7299248Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7299641Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7300014Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7300450Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7301020Z     self._load_csv()
2025-07-16T00:20:02.7301459Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7302377Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7303404Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7304057Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7304634Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7304958Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7305477Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7306235Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7306884Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7307753Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7308634Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7309416Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7310167Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7311055Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7311684Z _______ ERROR at setup of TestFrontendLayout.test_control_panel_styling ________
2025-07-16T00:20:02.7312092Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7312408Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7312655Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7312950Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7313397Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7313802Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7314191Z     self._load_csv()
2025-07-16T00:20:02.7314518Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7315197Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7316053Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7316727Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7317447Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7317865Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7318535Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7319282Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7319752Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7320460Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7321348Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7322136Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7322952Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7323831Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7324566Z ______ ERROR at setup of TestFrontendLayout.test_table_container_styling _______
2025-07-16T00:20:02.7325012Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7325327Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7325583Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7326159Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7326653Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7326963Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7327189Z     self._load_csv()
2025-07-16T00:20:02.7327385Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7327757Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7328134Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7328734Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7329128Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7329360Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7329720Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7330191Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7330500Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7331237Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7331722Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7332146Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7332563Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7333022Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7333513Z _______ ERROR at setup of TestFrontendLayout.test_upload_section_styling _______
2025-07-16T00:20:02.7333919Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7334225Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7334478Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7334737Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7334989Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7335227Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7335899Z     self._load_csv()
2025-07-16T00:20:02.7336276Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7337007Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7337729Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7338107Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7338499Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7338720Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7339077Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7339476Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7339729Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7340293Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7341181Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7341966Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7342722Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7343562Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7344481Z ___________ ERROR at setup of TestFrontendLayout.test_button_styling ___________
2025-07-16T00:20:02.7345248Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7346314Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7346854Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7347390Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7347860Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7348318Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7348744Z     self._load_csv()
2025-07-16T00:20:02.7349091Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7349797Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7350502Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7351192Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7351927Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7352338Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7353002Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7353769Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7354254Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7354977Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7356067Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7357092Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7357860Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7358701Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7359625Z ____________ ERROR at setup of TestFrontendLayout.test_form_layout _____________
2025-07-16T00:20:02.7360374Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7360940Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7361425Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7361912Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7362362Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7362842Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7363141Z     self._load_csv()
2025-07-16T00:20:02.7363336Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7363715Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7364091Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7364454Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7364849Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7365066Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7365408Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7366039Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7366321Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7366708Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7367169Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7367590Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7368006Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7368468Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7368956Z ________ ERROR at setup of TestFrontendLayout.test_input_field_styling _________
2025-07-16T00:20:02.7369425Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7369739Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7369983Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7370430Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7370701Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7370929Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7371148Z     self._load_csv()
2025-07-16T00:20:02.7371333Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7371702Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7372075Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7372436Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7372813Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7373024Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7373367Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7373756Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7374012Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7374382Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7374844Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7375259Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7375993Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7376458Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7376945Z ______ ERROR at setup of TestFrontendLayout.test_responsive_table_headers ______
2025-07-16T00:20:02.7377347Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7377645Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7377891Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7378155Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7378404Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7378641Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7378851Z     self._load_csv()
2025-07-16T00:20:02.7379038Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7379393Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7379765Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7380128Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7380496Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7380712Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7381042Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7381432Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7381680Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7382050Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7382510Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7382916Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7383361Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7383808Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7384289Z ________ ERROR at setup of TestFrontendLayout.test_decision_row_colors _________
2025-07-16T00:20:02.7384685Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7384982Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7385230Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7385481Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7385877Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7386270Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7386493Z     self._load_csv()
2025-07-16T00:20:02.7386685Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7387048Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7387433Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7387801Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7388172Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7388393Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7388723Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7389119Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7389369Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7389736Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7390200Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7390609Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7391021Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7391472Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7392070Z ________ ERROR at setup of TestFrontendLayout.test_main_content_wrapper ________
2025-07-16T00:20:02.7392472Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7392773Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7393023Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7393282Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7393532Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7393767Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7393981Z     self._load_csv()
2025-07-16T00:20:02.7394171Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7394529Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7394901Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7395248Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7395624Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7395997Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7396342Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7396733Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7396978Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7397353Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7397804Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7398219Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7398622Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7399071Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7399549Z ___________ ERROR at setup of TestFrontendLayout.test_hover_effects ____________
2025-07-16T00:20:02.7399934Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7400244Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7400488Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7400751Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7400994Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7401225Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7401437Z     self._load_csv()
2025-07-16T00:20:02.7401618Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7402221Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7402953Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7403645Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7404387Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7404825Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7405512Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7406235Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7406504Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7406901Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7407387Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7407815Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7408234Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7408695Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7409187Z ____ ERROR at setup of TestTableFunctionality.test_table_renders_with_data _____
2025-07-16T00:20:02.7409790Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7410092Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7410347Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7410605Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7410861Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7411093Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7411304Z     self._load_csv()
2025-07-16T00:20:02.7411496Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7411864Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7412239Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7412601Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7412979Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7413197Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7413539Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7413934Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7414180Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7414552Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7415011Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7415424Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7416030Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7416482Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7416978Z _____ ERROR at setup of TestTableFunctionality.test_table_has_all_columns ______
2025-07-16T00:20:02.7417390Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7417703Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7417949Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7418209Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7418458Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7418684Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7418903Z     self._load_csv()
2025-07-16T00:20:02.7419091Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7419457Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7419948Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7420307Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7420684Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7420894Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7421236Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7421636Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7421896Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7422273Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7422750Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7423163Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7423565Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7424025Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7424511Z ______ ERROR at setup of TestTableFunctionality.test_input_field_classes _______
2025-07-16T00:20:02.7424916Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7425215Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7425582Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7426023Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7426271Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7426504Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7426714Z     self._load_csv()
2025-07-16T00:20:02.7426900Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7427261Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7427637Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7427996Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7428374Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7428592Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7428927Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7429326Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7429570Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7429940Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7430404Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7430810Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7431217Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7431670Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7432164Z ______ ERROR at setup of TestLayoutResponsiveness.test_viewport_meta_tag _______
2025-07-16T00:20:02.7432563Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7432868Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7433118Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7433384Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7433637Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7433866Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7434080Z     self._load_csv()
2025-07-16T00:20:02.7434261Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7434630Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7434994Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7435349Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7436026Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7436273Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7436639Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7437042Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7437306Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7437676Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7438139Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7438548Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7438945Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7439392Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7439889Z ___ ERROR at setup of TestLayoutResponsiveness.test_semantic_html_structure ____
2025-07-16T00:20:02.7440300Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7440601Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7440843Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7441103Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7441520Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7441751Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7441957Z     self._load_csv()
2025-07-16T00:20:02.7442142Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7442498Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7442865Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7443217Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7443585Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7443807Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7444138Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7444524Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7444764Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7445142Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7445599Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7446212Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7446619Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7447062Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7447551Z _______ ERROR at setup of TestLayoutResponsiveness.test_css_organization _______
2025-07-16T00:20:02.7447959Z tests/test_frontend_layout.py:24: in client_with_styled_data
2025-07-16T00:20:02.7448256Z     initialize_app(csv_path, scan_cost=2)
2025-07-16T00:20:02.7448505Z book_triage/api.py:82: in initialize_app
2025-07-16T00:20:02.7448759Z     book_triage = BookTriage(csv_path, scan_cost)
2025-07-16T00:20:02.7449010Z                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7449239Z book_triage/core.py:83: in __init__
2025-07-16T00:20:02.7449450Z     self._load_csv()
2025-07-16T00:20:02.7449640Z book_triage/core.py:127: in _load_csv
2025-07-16T00:20:02.7450000Z     citation_R = json.loads(citation_R_str) if citation_R_str and citation_R_str != "[]" else []
2025-07-16T00:20:02.7450366Z                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7450997Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/__init__.py:346: in loads
2025-07-16T00:20:02.7451454Z     return _default_decoder.decode(s)
2025-07-16T00:20:02.7471107Z            ^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7471809Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:338: in decode
2025-07-16T00:20:02.7472273Z     obj, end = self.raw_decode(s, idx=_w(s, 0).end())
2025-07-16T00:20:02.7472546Z                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7472950Z /opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/json/decoder.py:356: in raw_decode
2025-07-16T00:20:02.7473452Z     raise JSONDecodeError("Expecting value", s, err.value) from None
2025-07-16T00:20:02.7473883Z E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7474319Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7474801Z ERROR    book_triage.core:core.py:167 Error loading CSV: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:02.7475217Z =================================== FAILURES ===================================
2025-07-16T00:20:02.7475568Z ____________________ TestBasicLayout.test_sticky_header_css ____________________
2025-07-16T00:20:02.7476088Z tests/test_layout_basic.py:57: in test_sticky_header_css
2025-07-16T00:20:02.7476394Z     assert "position: fixed" in content
2025-07-16T00:20:02.7518962Z E   assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7560935Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7561360Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmp7_nx3emf.csv
2025-07-16T00:20:02.7562180Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7562962Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7563345Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7563812Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7564257Z ___________________ TestBasicLayout.test_table_container_css ___________________
2025-07-16T00:20:02.7564651Z tests/test_layout_basic.py:67: in test_table_container_css
2025-07-16T00:20:02.7564961Z     assert "overflow-x: auto" in content
2025-07-16T00:20:02.7607563Z E   assert 'overflow-x: auto' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7649050Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7649479Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmppv93rpi1.csv
2025-07-16T00:20:02.7650305Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7651084Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7651470Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7652183Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7652913Z __________________ TestValidateFileUpload.test_non_image_file __________________
2025-07-16T00:20:02.7653554Z tests/test_security.py:160: in test_non_image_file
2025-07-16T00:20:02.7654083Z     assert "File must be an image" in exc_info.value.detail
2025-07-16T00:20:02.7654742Z E   AssertionError: assert 'File must be an image' in 'Invalid file format'
2025-07-16T00:20:02.7655608Z E    +  where 'Invalid file format' = HTTPException(status_code=400, detail='Invalid file format').detail
2025-07-16T00:20:02.7657514Z E    +    where HTTPException(status_code=400, detail='Invalid file format') = <ExceptionInfo HTTPException(status_code=400, detail='Invalid file format') tblen=2>.value
2025-07-16T00:20:02.7658739Z _________________________ test_sticky_form_css_present _________________________
2025-07-16T00:20:02.7659152Z tests/test_sticky_form.py:43: in test_sticky_form_css_present
2025-07-16T00:20:02.7659502Z     assert "position: fixed" in html_content
2025-07-16T00:20:02.7701617Z E   assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7743389Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7743835Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmpcossh_z2.csv
2025-07-16T00:20:02.7744655Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7745412Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7745923Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7746379Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7746810Z _________________________ test_body_padding_adjustment _________________________
2025-07-16T00:20:02.7747186Z tests/test_sticky_form.py:78: in test_body_padding_adjustment
2025-07-16T00:20:02.7747513Z     assert "padding-top: 280px" in html_content
2025-07-16T00:20:02.7789614Z E   assert 'padding-top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7831160Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7831600Z INFO     book_triage.core:core.py:165 Loaded 1 records from /tmp/tmp1g2877hg.csv
2025-07-16T00:20:02.7832393Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7833145Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7833719Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7834175Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7834618Z ____________________ test_sticky_table_headers_css_present _____________________
2025-07-16T00:20:02.7835044Z tests/test_sticky_table_headers.py:44: in test_sticky_table_headers_css_present
2025-07-16T00:20:02.7835490Z     assert "top: 280px" in html_content  # Should align with sticky form height
2025-07-16T00:20:02.7835910Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.7877779Z E   assert 'top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.7919135Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.7919555Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpldpr4600.csv
2025-07-16T00:20:02.7920351Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.7921111Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.7921492Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.7921931Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.7922353Z _________________________ test_table_header_structure __________________________
2025-07-16T00:20:02.7922741Z tests/test_sticky_table_headers.py:84: in test_table_header_structure
2025-07-16T00:20:02.7923074Z     assert header in html_content
2025-07-16T00:20:02.7965215Z E   assert '<th>V</th>' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8006753Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8007170Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpu15sbc4l.csv
2025-07-16T00:20:02.8007964Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8008848Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8009231Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8009672Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8010584Z ______________________ test_table_header_css_specificity _______________________
2025-07-16T00:20:02.8011272Z tests/test_sticky_table_headers.py:96: in test_table_header_css_specificity
2025-07-16T00:20:02.8011921Z     assert 'background-color: #f2f2f2' in html_content
2025-07-16T00:20:02.8055856Z E   assert 'background-color: #f2f2f2' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8098095Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8098536Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp_bg1_q0i.csv
2025-07-16T00:20:02.8099356Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8100121Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8100508Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8100959Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8101389Z ________________________ test_sticky_header_positioning ________________________
2025-07-16T00:20:02.8101801Z tests/test_sticky_table_headers.py:113: in test_sticky_header_positioning
2025-07-16T00:20:02.8102150Z     assert 'top: 0' in control_panel_section
2025-07-16T00:20:02.8103365Z E   AssertionError: assert 'top: 0' in '#control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-a'
2025-07-16T00:20:02.8104466Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8104870Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpkzqk87a2.csv
2025-07-16T00:20:02.8105670Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8106578Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8106962Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8107405Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8107816Z ____________________________ test_z_index_layering _____________________________
2025-07-16T00:20:02.8108317Z tests/test_sticky_table_headers.py:129: in test_z_index_layering
2025-07-16T00:20:02.8108650Z     assert 'z-index: 1000' in html_content
2025-07-16T00:20:02.8150509Z E   assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8191871Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8192285Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp4x1e7eil.csv
2025-07-16T00:20:02.8193085Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8193830Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8194213Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8194648Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8195075Z _____________________ test_table_headers_visual_separation _____________________
2025-07-16T00:20:02.8195508Z tests/test_sticky_table_headers.py:147: in test_table_headers_visual_separation
2025-07-16T00:20:02.8196005Z     assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in html_content
2025-07-16T00:20:02.8238228Z E   assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8279631Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8280055Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmp06lobd4q.csv
2025-07-16T00:20:02.8280855Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8281606Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8281986Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8282427Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8282988Z _____________________ test_complete_sticky_ui_integration ______________________
2025-07-16T00:20:02.8283431Z tests/test_sticky_table_headers.py:186: in test_complete_sticky_ui_integration
2025-07-16T00:20:02.8283835Z     assert 'z-index: 1000' in html_content  # Control panel
2025-07-16T00:20:02.8284114Z     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2025-07-16T00:20:02.8326052Z E   assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8367446Z ------------------------------ Captured log setup ------------------------------
2025-07-16T00:20:02.8367868Z INFO     book_triage.core:core.py:165 Loaded 2 records from /tmp/tmpkd1krj7w.csv
2025-07-16T00:20:02.8368668Z WARNING  book_triage.vision:vision.py:37 Failed to initialize OpenAI client: The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable
2025-07-16T00:20:02.8369426Z ------------------------------ Captured log call -------------------------------
2025-07-16T00:20:02.8369811Z DEBUG    asyncio:selector_events.py:64 Using selector: EpollSelector
2025-07-16T00:20:02.8370247Z INFO     httpx:_client.py:1025 HTTP Request: GET http://testserver/ "HTTP/1.1 200 OK"
2025-07-16T00:20:02.8370637Z ================================ tests coverage ================================
2025-07-16T00:20:02.8370982Z _______________ coverage: platform linux, python 3.12.11-final-0 _______________
2025-07-16T00:20:02.8371230Z 
2025-07-16T00:20:02.8371340Z Name                      Stmts   Miss  Cover   Missing
2025-07-16T00:20:02.8371609Z -------------------------------------------------------
2025-07-16T00:20:02.8371884Z book_triage/__init__.py       3      0   100%
2025-07-16T00:20:02.8372146Z book_triage/__main__.py      21      0   100%
2025-07-16T00:20:02.8372641Z book_triage/api.py          178     27    85%   41, 66, 684, 753, 778-779, 782-783, 791, 810, 812, 814, 817-829, 835, 851, 853
2025-07-16T00:20:02.8373087Z book_triage/cli.py          117      8    93%   229, 231, 233, 235, 237, 239, 241, 250
2025-07-16T00:20:02.8373491Z book_triage/core.py         195     22    89%   121, 240-242, 276-279, 287, 289, 299-300, 304, 313-328
2025-07-16T00:20:02.8373847Z book_triage/security.py      45      0   100%
2025-07-16T00:20:02.8374161Z book_triage/vision.py       100      7    93%   164-165, 171, 173-174, 176-177
2025-07-16T00:20:02.8374482Z -------------------------------------------------------
2025-07-16T00:20:02.8374739Z TOTAL                       659     64    90%
2025-07-16T00:20:02.8375039Z Required test coverage of 85.0% reached. Total coverage: 90.29%
2025-07-16T00:20:02.8375384Z =========================== short test summary info ============================
2025-07-16T00:20:02.8417589Z FAILED tests/test_layout_basic.py::TestBasicLayout::test_sticky_header_css - assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8500868Z FAILED tests/test_layout_basic.py::TestBasicLayout::test_table_container_css - assert 'overflow-x: auto' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8543330Z FAILED tests/test_security.py::TestValidateFileUpload::test_non_image_file - AssertionError: assert 'File must be an image' in 'Invalid file format'
2025-07-16T00:20:02.8544068Z  +  where 'Invalid file format' = HTTPException(status_code=400, detail='Invalid file format').detail
2025-07-16T00:20:02.8544822Z  +    where HTTPException(status_code=400, detail='Invalid file format') = <ExceptionInfo HTTPException(status_code=400, detail='Invalid file format') tblen=2>.value
2025-07-16T00:20:02.8587297Z FAILED tests/test_sticky_form.py::test_sticky_form_css_present - assert 'position: fixed' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8670288Z FAILED tests/test_sticky_form.py::test_body_padding_adjustment - assert 'padding-top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8753107Z FAILED tests/test_sticky_table_headers.py::test_sticky_table_headers_css_present - assert 'top: 280px' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8835941Z FAILED tests/test_sticky_table_headers.py::test_table_header_structure - assert '<th>V</th>' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8918947Z FAILED tests/test_sticky_table_headers.py::test_table_header_css_specificity - assert 'background-color: #f2f2f2' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.8961253Z FAILED tests/test_sticky_table_headers.py::test_sticky_header_positioning - AssertionError: assert 'top: 0' in '#control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-a'
2025-07-16T00:20:02.9004209Z FAILED tests/test_sticky_table_headers.py::test_z_index_layering - assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:02.9088008Z FAILED tests/test_sticky_table_headers.py::test_table_headers_visual_separation - assert 'box-shadow: 0 2px 2px rgba(0,0,0,0.1)' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:03.0340955Z FAILED tests/test_sticky_table_headers.py::test_complete_sticky_ui_integration - assert 'z-index: 1000' in '\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Book Triage</title>\n        <style>\n            * { box-sizing: border-box; }\n            \n            body { \n                font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, sans-serif; \n                margin: 0; \n                padding: 0;\n                height: 100vh;\n                display: flex;\n                flex-direction: column;\n            }\n            \n            #control-panel { \n                background: white; \n                padding: 30px 20px 20px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.1); \n                flex-shrink: 0;\n            }\n            \n            #control-panel h1 {\n                margin: 0 0 20px 0;\n                color: #2c3e50;\n                font-size: 2em;\n            }\n            \n            .upload-section { \n                border: 2px dashed #e1e8ed; \n                padding: 30px; \n                text-align: center; \n                margin: 20px 0; \n                border-radius: 8px;\n                background: #fafbfc;\n                transition: all 0.3s ease;\n            }\n            \n            .upload-section:hover {\n                border-color: #007cba;\n            }\n            \n            .upload-section.dragover { \n                border-color: #007cba; \n                background-color: #e3f2fd; \n                transform: scale(1.02);\n            }\n            \n            .upload-section h3 {\n                margin-top: 0;\n                color: #34495e;\n            }\n            \n            #fileInput { display: none; }\n            \n            .upload-btn { \n                background: #007cba; \n                color: white; \n                padding: 12px 24px; \n                border: none; \n                border-radius: 6px; \n                cursor: pointer;\n                font-size: 16px;\n                transition: background 0.3s ease;\n            }\n            \n            .upload-btn:hover { \n                background: #005a8b; \n            }\n            \n            .result { \n                margin: 20px 0; \n                padding: 15px; \n                border-radius: 8px; \n            }\n            \n            .success { \n                background-color: #d4edda; \n                border: 1px solid #c3e6cb; \n                color: #155724; \n            }\n            \n            .error { \n                background-color: #f8d7da; \n                border: 1px solid #f5c6cb; \n                color: #721c24; \n            }\n            \n            /* Main content area */\n            .main-content {\n                flex: 1;\n                overflow: hidden; /* Changed from auto to hidden */\n                background: #f5f7fa;\n                padding: 20px;\n                min-height: 0; /* Important for flexbox */\n                display: flex;\n                flex-direction: column;\n            }\n            \n            .main-content h2 {\n                color: #2c3e50;\n                margin-bottom: 20px;\n                flex-shrink: 0; /* Prevent header from shrinking */\n            }\n            \n            /* Table styling */\n            .table-container { \n                background: white;\n                border-radius: 8px;\n                box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                min-height: 0; /* Important for flexbox scrolling */\n                position: relative; /* For proper sticky header positioning */\n                max-height: 70vh; /* Set a maximum height to force scrolling */\n            }\n            \n            .books-table { \n                width: 100%; \n                min-width: 1800px; \n                border-collapse: collapse; \n                margin: 0;\n            }\n            \n            /* Create a scrollable wrapper for the table */\n            .table-scroll-container {\n                overflow: auto;\n                flex: 1;\n                min-height: 0; /* Important for flexbox scrolling */\n                max-height: calc(70vh - 60px); /* Account for header space */\n                border: 1px solid #e1e8ed;\n                border-radius: 8px;\n            }\n            \n            .books-table th, .books-table td { \n                border: 1px solid #e1e8ed; \n                padding: 12px 8px; \n                text-align: left; \n            }\n            \n            .books-table th { \n                background-color: #f8f9fa; \n                font-weight: 600;\n                color: #495057;\n                position: sticky; \n                top: 0;\n                z-index: 10;\n                border-bottom: 2px solid #dee2e6;\n            }\n            \n            /* Ensure header cells have a solid background to prevent content showing through */\n            .books-table th::after {\n                content: \'\';\n                position: absolute;\n                left: 0;\n                right: 0;\n                top: 0;\n                bottom: 0;\n                background-color: #f8f9fa;\n                z-index: -1;\n            }\n            \n            .books-table tbody tr:hover {\n                background-color: #f8f9fa;\n            }\n            \n            /* Decision colors */\n            .decision-sell { background-color: #ffebee; }\n            .decision-digital { background-color: #e8f5e8; }\n            .decision-keep { background-color: #fff3e0; }\n            .decision-unknown { background-color: #f5f5f5; }\n            \n            /* Input styling */\n            .edit-title-input { \n                padding: 6px 8px; \n                border: 1px solid #ced4da; \n                border-radius: 4px;\n                font-size: 14px;\n                transition: border-color 0.3s ease;\n            }\n            \n            .edit-title-input:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n            \n            .edit-title-input[type="number"] { \n                width: 60px; \n                text-align: center; \n                font-size: 16px;\n                font-weight: 600;\n                background-color: #f8f9fa;\n                border: 2px solid #007cba;\n            }\n            \n            /* Special styling for VRPFAS inputs */\n            .vrpfas-input {\n                width: 50px !important;\n                height: 40px;\n                font-size: 18px !important;\n                font-weight: bold;\n                text-align: center;\n                background-color: #fff;\n                border: 2px solid #007cba;\n                border-radius: 6px;\n                color: #2c3e50;\n            }\n            \n            .vrpfas-input:focus {\n                outline: none;\n                border-color: #0056b3;\n                background-color: #e3f2fd;\n                box-shadow: 0 0 0 3px rgba(0, 123, 186, 0.25);\n            }\n            \n            .price-input { \n                width: 100px !important; \n                text-align: right; \n            }\n            \n            .url-input { width: 150px !important; }\n            .title-input { width: 250px !important; }\n            .isbn-input { width: 140px !important; }\n            \n            .edit-btn, .save-btn { \n                padding: 6px 16px; \n                margin-left: 4px;\n                background: #28a745;\n                color: white;\n                border: none;\n                border-radius: 4px;\n                cursor: pointer;\n                transition: background 0.3s ease;\n            }\n            \n            .edit-btn:hover, .save-btn:hover {\n                background: #218838;\n            }\n            \n            /* Form styling */\n            #manualTitleForm {\n                display: flex;\n                gap: 10px;\n                justify-content: center;\n                align-items: center;\n                flex-wrap: wrap;\n            }\n            \n            #manualTitleForm input[type="text"] {\n                padding: 10px;\n                border: 1px solid #ced4da;\n                border-radius: 4px;\n                font-size: 16px;\n            }\n            \n            #manualTitleForm input[type="text"]:focus {\n                outline: none;\n                border-color: #007cba;\n            }\n        </style>\n    </head>\n    <body>\n        <div id="control-panel">\n            <h1>Book Triage</h1>\n            \n            <div class="upload-section" id="uploadSection">\n                <h3>Upload Book Photo</h3>\n                <p>Drag and drop an image here or click to select</p>\n                <input type="file" id="fileInput" accept="image/*">\n                <button class="upload-btn" onclick="document.getElementById(\'fileInput\').click()">Select Image</button>\n            </div>\n\n            <!-- Manual Title Input Section -->\n            <div class="upload-section" id="manualTitleSection" style="margin-top: 20px;">\n                <h3>Or, post the title on text</h3>\n                <form id="manualTitleForm" onsubmit="submitManualTitle(event)">\n                    <input type="text" id="manualTitleInput" placeholder="Enter book title" required />\n                    <input type="text" id="manualIsbnInput" placeholder="Enter ISBN 13 digits" maxlength="13" required />\n                    <button type="submit" class="upload-btn">Submit</button>\n                </form>\n            </div>\n            \n            <div id="result"></div>\n        </div>\n        <div id="toast" style="display:none;position:fixed;top:20px;right:20px;z-index:1000;padding:10px 20px;background:#4caf50;color:white;border-radius:5px;font-weight:bold;"></div>\n        \n        <div class="main-content">\n            <h2>Books Database</h2>\n            <div id="booksList">Loading...</div>\n        </div>\n        \n        <script>\n            const uploadSection = document.getElementById(\'uploadSection\');\n            const fileInput = document.getElementById(\'fileInput\');\n            const resultDiv = document.getElementById(\'result\');\n            \n            // Drag and drop functionality\n            uploadSection.addEventListener(\'dragover\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.add(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'dragleave\', () => {\n                uploadSection.classList.remove(\'dragover\');\n            });\n            \n            uploadSection.addEventListener(\'drop\', (e) => {\n                e.preventDefault();\n                uploadSection.classList.remove(\'dragover\');\n                const files = e.dataTransfer.files;\n                if (files.length > 0) {\n                    uploadFile(files[0]);\n                }\n            });\n            \n            fileInput.addEventListener(\'change\', (e) => {\n                if (e.target.files.length > 0) {\n                    uploadFile(e.target.files[0]);\n                }\n            });\n            \n            function uploadFile(file) {\n                const formData = new FormData();\n                formData.append(\'file\', file);\n                \n                resultDiv.innerHTML = \'<div class="result">Uploading...</div>\';\n                \n                fetch(\'/upload_photo\', {\n                    method: \'POST\',\n                    body: formData\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.title) {\n                        resultDiv.innerHTML = `\n                            <div class="result success">\n                                <h4>Success!</h4>\n                                <p><strong>Title:</strong> ${data.title}</p>\n                                <p><strong>ID:</strong> ${data.id}</p>\n                                <p>Book added to database. Please fill in the remaining fields manually.</p>\n                            </div>\n                        `;\n                        loadBooks(); // Refresh the books list\n                    } else {\n                        resultDiv.innerHTML = `\n                            <div class="result error">\n                                <h4>Error</h4>\n                                <p>Failed to extract title from image.</p>\n                            </div>\n                        `;\n                    }\n                })\n                .catch(error => {\n                    resultDiv.innerHTML = `\n                        <div class="result error">\n                            <h4>Error</h4>\n                            <p>Upload failed: ${error.message}</p>\n                        </div>\n                    `;\n                });\n            }\n            \n            function showToast(message) {\n                const toast = document.getElementById(\'toast\');\n                toast.innerText = message;\n                toast.style.display = \'block\';\n                setTimeout(() => { toast.style.display = \'none\'; }, 2000);\n            }\n\n            function loadBooks(preserveScroll = false, targetId = null) {\n                // Save scroll position before reloading if requested\n                let scrollContainer = null;\n                let savedScrollTop = 0;\n                let savedScrollLeft = 0;\n                \n                if (preserveScroll) {\n                    scrollContainer = document.querySelector(\'.table-scroll-container\');\n                    if (scrollContainer) {\n                        savedScrollTop = scrollContainer.scrollTop;\n                        savedScrollLeft = scrollContainer.scrollLeft;\n                    }\n                }\n                \n                fetch(\'/books\')\n                .then(response => response.json())\n                .then(data => {\n                    const booksListDiv = document.getElementById(\'booksList\');\n                    if (data.length === 0) {\n                        booksListDiv.innerHTML = \'<p>No books in database.</p>\';\n                        return;\n                    }\n                    let table = `\n                        <div class="table-container">\n                            <div class="table-scroll-container">\n                                <table class="books-table">\n                                    <thead>\n                                        <tr>\n                                            <th>ID</th>\n                                            <th>Title</th>\n                                            <th>ISBN</th>\n                                            <th>Amazon.co.jp URL</th>\n                                            <th>Amazon.com URL</th>\n                                            <th>Purchase Price</th>\n                                            <th>Used Price</th>\n                                            <th title="Value - Resale value (1-5)">V<br><small>Value</small></th>\n                                            <th title="Rarity - How rare the book is (1-5)">R<br><small>Rarity</small></th>\n                                            <th title="Scannability - How easy to digitize (1-5)">P<br><small>Scan</small></th>\n                                            <th title="Frequency - How often you use it (1-5)">F<br><small>Freq</small></th>\n                                            <th title="Annotation - Personal notes/highlights (1-5)">A<br><small>Notes</small></th>\n                                            <th title="Sentimental - Emotional value (1-5)">S<br><small>Sent</small></th>\n                                            <th>citation_R</th>\n                                            <th>citation_P</th>\n                                            <th>Decision</th>\n                                            <th>Verified</th>\n                                            <th>Actions</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                    `;\n                    \n                    data.forEach(book => {\n                        const decisionClass = `decision-${book.decision.toLowerCase()}`;\n                        table += `\n                            <tr class="${decisionClass}" data-row-id="${book.id}">\n                                <td>${book.id}</td>\n                                <td>\n                                    <input type="text" class="edit-title-input title-input" value="${book.title || \'\'}" id="title-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input isbn-input" value="${book.isbn || \'\'}" id="isbn-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url || \'\'}" id="url-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="text" class="edit-title-input url-input" value="${book.url_com || \'\'}" id="url_com-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.purchase_price || 0}" min="0" id="purchase-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input price-input" value="${book.used_price || 0}" min="0" id="used-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.V || \'\'}" min="0" max="5" id="V-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.R || \'\'}" min="1" max="5" id="R-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.P || \'\'}" min="1" max="5" id="P-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.F || \'\'}" min="1" max="5" id="F-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.A || \'\'}" min="1" max="5" id="A-${book.id}">\n                                </td>\n                                <td>\n                                    <input type="number" class="edit-title-input vrpfas-input" value="${book.S || \'\'}" min="1" max="5" id="S-${book.id}">\n                                </td>\n                                <td>${book.citation_R || \'\'}</td>\n                                <td>${book.citation_P || \'\'}</td>\n                                <td>${book.decision}</td>\n                                <td>${book.verified === \'yes\' ? \'Yes\' : \'No\'}</td>\n                                <td>\n                                    <button class="edit-btn" onclick="saveBook(\'${book.id}\')">Save</button>\n                                </td>\n                            </tr>\n                        `;\n                    });\n                    \n                    table += \'</tbody></table></div></div>\';\n                    booksListDiv.innerHTML = table;\n\n                    // Restore scroll position if requested\n                    if (preserveScroll) {\n                        const currentScrollContainer = document.querySelector(\'.table-scroll-container\');\n                        if (currentScrollContainer) {\n                            currentScrollContainer.scrollTop = savedScrollTop;\n                            currentScrollContainer.scrollLeft = savedScrollLeft;\n                        }\n                    }\n\n                    // If a target row id is provided, scroll it into view\n                    if (targetId) {\n                        const rowEl = document.querySelector(`tr[data-row-id="${targetId}"]`);\n                        if (rowEl) {\n                            rowEl.scrollIntoView({ block: \'center\' });\n                        }\n                    }\n                })\n                .catch(error => {\n                    document.getElementById(\'booksList\').innerHTML = \'<p>Error loading books.</p>\';\n                });\n            }\n            \n            function saveBook(bookId) {\n                const title = document.getElementById(`title-${bookId}`).value;\n                const isbn = document.getElementById(`isbn-${bookId}`).value;\n                const url = document.getElementById(`url-${bookId}`).value;\n                const url_com = document.getElementById(`url_com-${bookId}`).value;\n                const purchaseVal = document.getElementById(`purchase-${bookId}`).value;\n                const usedVal = document.getElementById(`used-${bookId}`).value;\n                const purchase_price = purchaseVal === \'\' ? null : parseFloat(purchaseVal);\n                const used_price = usedVal === \'\' ? null : parseFloat(usedVal);\n                const V = document.getElementById(`V-${bookId}`).value;\n                const R = document.getElementById(`R-${bookId}`).value;\n                const P = document.getElementById(`P-${bookId}`).value;\n                const F = document.getElementById(`F-${bookId}`).value;\n                const A = document.getElementById(`A-${bookId}`).value;\n                const S = document.getElementById(`S-${bookId}`).value;\n                \n                fetch(\'/rescan_title\', {\n                    method: \'POST\',\n                    headers: {\'Content-Type\': \'application/json\'},\n                    body: JSON.stringify({\n                        id: bookId,\n                        title: title,\n                        isbn: isbn,\n                        url: url,\n                        url_com: url_com,\n                        purchase_price: purchase_price,\n                        used_price: used_price,\n                        V: V || null,\n                        R: R || null,\n                        P: P || null,\n                        F: F || null,\n                        A: A || null,\n                        S: S || null\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    loadBooks(true);  // Pass true to preserve scroll position\n                    showToast(\'Book updated!\');\n                })\n                .catch(error => {\n                    showToast(\'Error updating book.\');\n                });\n            }\n            \n            function submitManualTitle(event) {\n                event.preventDefault();\n                const input = document.getElementById(\'manualTitleInput\');\n                const isbnInput = document.getElementById(\'manualIsbnInput\');\n                const title = input.value.trim();\n                const isbn = isbnInput.value.trim();\n                if (!title || !isbn) return;\n                input.disabled = true;\n                isbnInput.disabled = true;\n                const submitBtn = document.querySelector(\'#manualTitleForm button[type="submit"]\');\n                if (submitBtn) submitBtn.disabled = true;\n                fetch(\'/add_manual_title\', {\n                    method: \'POST\',\n                    headers: { \'Content-Type\': \'application/json\' },\n                    body: JSON.stringify({ title, isbn })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    input.value = \'\';\n                    isbnInput.value = \'\';\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    // Scroll to the newly added row\n                    loadBooks(false, data.id);\n                    showToast(\'Book added!\');\n                })\n                .catch(() => {\n                    input.disabled = false;\n                    isbnInput.disabled = false;\n                    if (submitBtn) submitBtn.disabled = false;\n                    showToast(\'Error adding book.\');\n                });\n            }\n            \n            // Load initial books\n            loadBooks();\n        </script>\n    </body>\n    </html>\n    '
2025-07-16T00:20:03.0382979Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_modern_css_styling_present - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0383964Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_control_panel_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0384912Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_table_container_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0385978Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_upload_section_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0386932Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_button_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0387820Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_form_layout - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0388890Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_input_field_styling - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0389836Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_responsive_table_headers - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0390817Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_decision_row_colors - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0391752Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_main_content_wrapper - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0392668Z ERROR tests/test_frontend_layout.py::TestFrontendLayout::test_hover_effects - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0393603Z ERROR tests/test_frontend_layout.py::TestTableFunctionality::test_table_renders_with_data - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0394583Z ERROR tests/test_frontend_layout.py::TestTableFunctionality::test_table_has_all_columns - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0395541Z ERROR tests/test_frontend_layout.py::TestTableFunctionality::test_input_field_classes - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0396654Z ERROR tests/test_frontend_layout.py::TestLayoutResponsiveness::test_viewport_meta_tag - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0397640Z ERROR tests/test_frontend_layout.py::TestLayoutResponsiveness::test_semantic_html_structure - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0398621Z ERROR tests/test_frontend_layout.py::TestLayoutResponsiveness::test_css_organization - json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
2025-07-16T00:20:03.0399290Z ================== 12 failed, 164 passed, 17 errors in 8.25s ===================
2025-07-16T00:20:03.3059583Z ##[error]Process completed with exit code 1.
2025-07-16T00:20:03.3162937Z Post job cleanup.
2025-07-16T00:20:03.4113876Z [command]/usr/bin/git version
2025-07-16T00:20:03.4152015Z git version 2.50.1
2025-07-16T00:20:03.4196440Z Temporarily overriding HOME='/home/runner/work/_temp/cf839d7e-efc4-47f3-9022-210165277aee' before making global git config changes
2025-07-16T00:20:03.4198067Z Adding repository directory to the temporary git global config as a safe directory
2025-07-16T00:20:03.4202423Z [command]/usr/bin/git config --global --add safe.directory /home/runner/work/book_triage_v0.1.0/book_triage_v0.1.0
2025-07-16T00:20:03.4242379Z [command]/usr/bin/git config --local --name-only --get-regexp core\.sshCommand
2025-07-16T00:20:03.4277499Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'core\.sshCommand' && git config --local --unset-all 'core.sshCommand' || :"
2025-07-16T00:20:03.4511308Z [command]/usr/bin/git config --local --name-only --get-regexp http\.https\:\/\/github\.com\/\.extraheader
2025-07-16T00:20:03.4534895Z http.https://github.com/.extraheader
2025-07-16T00:20:03.4548492Z [command]/usr/bin/git config --local --unset-all http.https://github.com/.extraheader
2025-07-16T00:20:03.4581935Z [command]/usr/bin/git submodule foreach --recursive sh -c "git config --local --name-only --get-regexp 'http\.https\:\/\/github\.com\/\.extraheader' && git config --local --unset-all 'http.https://github.com/.extraheader' || :"
2025-07-16T00:20:03.4915114Z Cleaning up orphan processes
