name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  secret-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Run gitleaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    needs: secret-scan
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 tesseract-ocr
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]
        pip install codecov
    
    - name: Create test CSV
      run: |
        echo "id,title,url,F,R,A,V,S,P,decision" > sample_books.csv
        echo "test1,Test Book,https://example.com,3,2,1,4,2,4,unknown" >> sample_books.csv
    
    - name: Set environment variables
      run: |
        echo "BOOK_USER=testuser" >> $GITHUB_ENV
        echo "BOOK_PASS=testpass" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
    
    - name: Run tests with coverage
      run: |
        coverage run -m pytest tests/ -v
        coverage report --show-missing
        coverage xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Start server for chaos tests
      run: |
        python -c "
        from book_triage.api import initialize_app
        from pathlib import Path
        initialize_app(Path('sample_books.csv'))
        " &
        python -m uvicorn book_triage.api:app --host 127.0.0.1 --port 8000 &
        sleep 10
    
    - name: Run chaos demo
      run: |
        python scripts/chaos_demo.py
    
    - name: Run chaos tests against live server
      run: |
        timeout 60 python scripts/simple_chaos.py || echo "Chaos tests completed"
    
    - name: Upload failure artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-failure-artifacts
        path: |
          coverage.xml
          *.log
          htmlcov/

  quality-gate:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1
        python -m pip install --upgrade pip
        pip install -e .
        pip install pytest-cov coverage codecov
    
    - name: Create test CSV
      run: |
        echo "id,title,url,F,R,A,V,S,P,decision" > sample_books.csv
        echo "test1,Test Book,https://example.com,3,2,1,4,2,4,unknown" >> sample_books.csv
    
    - name: Set environment variables
      run: |
        echo "BOOK_USER=testuser" >> $GITHUB_ENV
        echo "BOOK_PASS=testpass" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key" >> $GITHUB_ENV
    
    - name: Run coverage check
      run: |
        coverage run -m pytest tests/
        coverage report --show-missing --fail-under=84
        coverage xml
        echo "‚úÖ Coverage threshold (84%) met"
    
    - name: Generate coverage report
      run: |
        coverage html
    
    - name: Quality Gate - Check metrics
      run: |
        COVERAGE=$(coverage report --format=total)
        echo "Current coverage: ${COVERAGE}%"
        
        if [ "$COVERAGE" -lt 84 ]; then
          echo "‚ùå QUALITY GATE FAILED: Coverage ${COVERAGE}% is below threshold 84%"
          exit 1
        else
          echo "‚úÖ QUALITY GATE PASSED: Coverage ${COVERAGE}% meets threshold"
        fi
        
        # Count test files
        TEST_COUNT=$(find tests/ -name "test_*.py" | wc -l)
        echo "Test files: $TEST_COUNT"
        
        if [ "$TEST_COUNT" -lt 4 ]; then
          echo "‚ùå QUALITY GATE FAILED: Insufficient test files ($TEST_COUNT < 4)"
          exit 1
        else
          echo "‚úÖ QUALITY GATE PASSED: Test coverage adequate"
        fi
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./coverage.xml
        flags: quality-gate
        name: codecov-quality-gate
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: htmlcov/
    
    - name: Upload failure artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: quality-gate-failure-artifacts
        path: |
          coverage.xml
          *.log

  security:
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1
        python -m pip install --upgrade pip
        pip install -e .
        pip install requests bandit safety
    
    - name: Run security scan with bandit
      run: |
        bandit -r book_triage/ -f json -o bandit-report.json || true
        bandit -r book_triage/ || true
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
    
    - name: Upload failure artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: security-failure-artifacts
        path: |
          bandit-report.json
          *.log

  chaos:
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmagic1 tesseract-ocr
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install requests
    
    - name: Create test data
      run: |
        echo "id,title,url,F,R,A,V,S,P,decision" > sample_books.csv
        echo "test1,Test Book,https://example.com,3,2,1,4,2,4,unknown" >> sample_books.csv
    
    - name: Set chaos test environment
      run: |
        echo "BOOK_USER=chaosuser" >> $GITHUB_ENV
        echo "BOOK_PASS=chaospass" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=chaos-test-key" >> $GITHUB_ENV
    
    - name: Initialize and start server
      run: |
        python -c "
        from book_triage.api import initialize_app
        from pathlib import Path
        initialize_app(Path('sample_books.csv'))
        " &
        python -m uvicorn book_triage.api:app --host 127.0.0.1 --port 8000 &
        sleep 15
    
    - name: Verify server is running
      run: |
        curl -f http://127.0.0.1:8000/health || exit 1
    
    - name: Run comprehensive chaos tests
      run: |
        timeout 120 python scripts/simple_chaos.py
    
    - name: Chaos Quality Gate
      run: |
        echo "‚úÖ Chaos tests completed - security hardening verified"
    
    - name: Run chaos demo for documentation
      run: |
        python scripts/chaos_demo.py > chaos-demo-results.txt
    
    - name: Upload chaos test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: chaos-test-results
        path: |
          chaos-demo-results.txt
    
    - name: Upload failure artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: chaos-failure-artifacts
        path: |
          chaos-demo-results.txt
          *.log

  notify:
    runs-on: ubuntu-latest
    needs: [test, quality-gate, security, chaos]
    if: failure()
    
    steps:
    - name: Slack Notification
      if: env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ci-alerts'
        text: |
          üö® CI Pipeline Failed for ${{ github.repository }}
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Failed Job: Tests
          
          View Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        author_name: 8398a7@action-slack
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 