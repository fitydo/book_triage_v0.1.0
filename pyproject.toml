[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "book_triage"
version = "0.1.0"
description = "A tool for triaging books based on frequency, rarity, annotation needs, and other factors"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
authors = [
    {name = "Book Triage Team", email = "team@booktriage.com"}
]
keywords = ["books", "triage", "decision-making", "csv", "vision", "cross-platform"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: Microsoft :: Windows :: Windows 10",
    "Operating System :: Microsoft :: Windows :: Windows 11", 
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Topic :: Office/Business",
    "Topic :: Utilities",
]
dependencies = [
    "openai>=1.0.0",
    "pandas>=2.0.0",
    "python-dotenv>=1.0.0",
    "tqdm>=4.65.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pillow>=10.0.0",
    "pytesseract>=0.3.10",
    "typer>=0.9.0",
    "python-multipart>=0.0.6",
    "slowapi>=0.1.8",
    # Platform-specific magic library dependencies
    "python-magic>=0.4.27; sys_platform != 'win32'",
    "python-magic-bin>=0.4.14; sys_platform == 'win32'",
    # Additional cross-platform dependencies
    "pathlib2>=2.3.0; python_version < '3.4'",
    "colorama>=0.4.6; sys_platform == 'win32'",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "coverage>=7.3.0",
    "requests>=2.31.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

# Platform-specific optional dependencies
windows = [
    "pywin32>=306; sys_platform == 'win32'",
    "wmi>=1.5.1; sys_platform == 'win32'",
]

linux = [
    "python-magic>=0.4.27; sys_platform == 'linux'",
]

macos = [
    "python-magic>=0.4.27; sys_platform == 'darwin'",
]

# Distribution bundles
full = [
    "book_triage[windows,linux,macos]",
]

[project.urls]
Homepage = "https://github.com/fitydo/book_triage_v0.1.0"
Documentation = "https://github.com/fitydo/book_triage_v0.1.0/wiki"
Repository = "https://github.com/fitydo/book_triage_v0.1.0.git"
"Bug Tracker" = "https://github.com/fitydo/book_triage_v0.1.0/issues"
Changelog = "https://github.com/fitydo/book_triage_v0.1.0/releases"

[project.scripts]
book_triage = "book_triage.cli:cli"

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["book_triage"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
fail_under = 81
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml" 